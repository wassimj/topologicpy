Search.setIndex({"docnames": ["index", "modules", "topologicpy", "topologicpy.ANN", "topologicpy.Aperture", "topologicpy.Cell", "topologicpy.CellComplex", "topologicpy.Cluster", "topologicpy.Color", "topologicpy.Context", "topologicpy.DGL", "topologicpy.Dictionary", "topologicpy.Edge", "topologicpy.EnergyModel", "topologicpy.Face", "topologicpy.Graph", "topologicpy.Grid", "topologicpy.Helper", "topologicpy.Honeybee", "topologicpy.Matrix", "topologicpy.Neo4j", "topologicpy.Plotly", "topologicpy.Polyskel", "topologicpy.PyG", "topologicpy.Shell", "topologicpy.Speckle", "topologicpy.Sun", "topologicpy.Topology", "topologicpy.Vector", "topologicpy.Vertex", "topologicpy.Wire", "topologicpy.version"], "filenames": ["index.rst", "modules.rst", "topologicpy.rst", "topologicpy.ANN.rst", "topologicpy.Aperture.rst", "topologicpy.Cell.rst", "topologicpy.CellComplex.rst", "topologicpy.Cluster.rst", "topologicpy.Color.rst", "topologicpy.Context.rst", "topologicpy.DGL.rst", "topologicpy.Dictionary.rst", "topologicpy.Edge.rst", "topologicpy.EnergyModel.rst", "topologicpy.Face.rst", "topologicpy.Graph.rst", "topologicpy.Grid.rst", "topologicpy.Helper.rst", "topologicpy.Honeybee.rst", "topologicpy.Matrix.rst", "topologicpy.Neo4j.rst", "topologicpy.Plotly.rst", "topologicpy.Polyskel.rst", "topologicpy.PyG.rst", "topologicpy.Shell.rst", "topologicpy.Speckle.rst", "topologicpy.Sun.rst", "topologicpy.Topology.rst", "topologicpy.Vector.rst", "topologicpy.Vertex.rst", "topologicpy.Wire.rst", "topologicpy.version.rst"], "titles": ["topologicpy", "topologicpy", "topologicpy package", "topologicpy.ANN module", "topologicpy.Aperture module", "topologicpy.Cell module", "topologicpy.CellComplex module", "topologicpy.Cluster module", "topologicpy.Color module", "topologicpy.Context module", "topologicpy.DGL module", "topologicpy.Dictionary module", "topologicpy.Edge module", "topologicpy.EnergyModel module", "topologicpy.Face module", "topologicpy.Graph module", "topologicpy.Grid module", "topologicpy.Helper module", "topologicpy.Honeybee module", "topologicpy.Matrix module", "topologicpy.Neo4j module", "topologicpy.Plotly module", "topologicpy.Polyskel module", "topologicpy.PyG module", "topologicpy.Shell module", "topologicpy.Speckle module", "topologicpy.Sun module", "topologicpy.Topology module", "topologicpy.Vector module", "topologicpy.Vertex module", "topologicpy.Wire module", "topologicpy.version module"], "terms": {"welcom": 0, "rhyme": 0, "appl": 0, "pie": [0, 2, 21, 24], "i": [0, 3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30], "open": [0, 5, 14, 27, 29, 30], "sourc": [0, 2, 15, 22, 27], "python": [0, 3, 8, 11, 15, 21, 27], "3": [0, 3, 5, 6, 12, 13, 14, 15, 17, 21, 23, 27, 29, 30], "implement": 0, "which": [0, 3, 5, 6, 7, 8, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30], "revolution": 0, "wai": 0, "you": [0, 3, 7, 8, 13, 15, 17, 29], "design": [0, 13], "space": [0, 13, 14, 15, 21, 23, 27], "build": [0, 5, 13, 15, 18], "artefact": 0, "": [0, 3, 5, 6, 7, 12, 15, 16, 20, 24, 27, 30], "advanc": 0, "featur": [0, 3, 15, 23], "enabl": [0, 3], "creat": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 27, 28, 29, 30], "hierarch": 0, "inform": [0, 15, 23], "rich": 0, "3d": [0, 7, 14, 27], "represent": [0, 18], "offer": 0, "unpreced": 0, "flexibl": 0, "control": [0, 3], "your": [0, 3, 8, 17, 22, 27], "process": [0, 13, 15, 23, 24, 27], "With": 0, "integr": 0, "geometri": [0, 2, 14, 15, 27, 30], "topologi": [0, 1, 2, 4, 5, 7, 9, 13, 14, 15, 17, 18, 21, 25, 29, 30], "artifici": 0, "intellig": 0, "enrich": 0, "two": [0, 3, 5, 6, 12, 14, 15, 16, 19, 27, 28, 29, 30], "main": 0, "strength": 0, "ar": [0, 3, 5, 6, 7, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30], "its": [0, 5, 6, 11, 12, 14, 15, 22, 24, 27, 28, 29, 30], "support": [0, 27], "defeatur": 0, "encod": [0, 15], "mesh": [0, 14, 15, 25, 27], "By": 0, "simplifi": [0, 2, 7, 14, 15, 24, 30], "remov": [0, 5, 6, 11, 13, 14, 15, 24, 27, 30], "small": [0, 17], "unnecessari": 0, "detail": 0, "need": [0, 15, 28, 29], "allow": [0, 15, 27], "faster": 0, "more": [0, 14, 15, 27, 30], "accur": 0, "while": [0, 27, 29], "maintain": 0, "consist": 0, "thi": [0, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 29, 30], "transform": [0, 2, 19, 27, 28], "low": [0, 14, 27, 30], "qualiti": 0, "heavi": [0, 14, 27], "bim": [0, 27], "high": [0, 14, 27, 30], "lightweight": 0, "readi": 0, "rigor": 0, "effortlessli": 0, "same": [0, 3, 5, 6, 7, 12, 13, 15, 17, 26, 27, 28, 29], "base": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "element": [0, 8, 14, 27, 28], "avail": [0, 3, 14, 18, 21, 27], "commerci": [0, 13], "platform": 0, "cleanli": 0, "match": [0, 8, 15, 17, 21, 27], "exact": 0, "specif": [0, 3], "versatil": 0, "extend": [0, 2, 12], "entiti": [0, 20], "mix": 0, "dimension": [0, 2, 27], "structur": [0, 27], "exampl": [0, 7, 14, 15, 17, 27, 29], "repres": [0, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 24, 26, 27, 28, 30], "coher": 0, "line": [0, 2, 12, 16, 21, 22, 23, 27, 29, 30], "can": [0, 3, 5, 6, 7, 8, 11, 12, 14, 15, 16, 17, 21, 23, 24, 27, 29, 30], "column": [0, 13, 15, 17], "beam": 0, "surfac": [0, 5, 13, 14, 17, 18, 24, 26, 27, 30], "wall": [0, 13, 15], "slab": [0, 15], "volum": [0, 2, 5, 6, 17], "solid": [0, 27], "even": 0, "non": [0, 6, 14, 29], "like": [0, 7, 14, 15, 30], "load": [0, 2, 3, 13], "effici": 0, "attach": [0, 15], "approach": 0, "highli": 0, "compat": [0, 15], "simul": [0, 13], "graph": [0, 1, 2, 20, 21, 23, 27], "make": [0, 7], "natur": 0, "fit": [0, 21], "machin": 0, "learn": [0, 3, 23], "gml": 0, "excit": 0, "new": [0, 12, 14, 15, 20, 27, 30], "branch": [0, 25], "vast": 0, "amount": [0, 14, 15, 30], "connect": [0, 2, 5, 12, 14, 15, 20, 22, 27, 29, 30], "data": [0, 3, 7, 15, 21, 23, 25, 27], "extract": [0, 21], "valuabl": 0, "insight": 0, "quickli": 0, "algorithm": [0, 5, 6, 7, 14, 15, 23, 24, 27, 29, 30], "node": [0, 3, 15, 20, 23], "classif": [0, 3, 23], "take": [0, 15], "next": [0, 14, 17, 30], "level": [0, 13, 15, 17, 27], "classifi": [0, 5, 23], "typologi": 0, "predict": [0, 3, 21, 23], "associ": [0, 11, 15, 21, 27], "complet": [0, 15, 29], "miss": 0, "empow": 0, "leverag": 0, "histor": 0, "knowledg": 0, "embed": [0, 7, 11, 27], "databas": 0, "decis": 0, "about": 0, "current": [0, 17, 21, 26], "project": [0, 2, 14, 15, 21, 24, 27, 29, 30], "streamlin": 0, "workflow": 0, "enhanc": 0, "product": [0, 22, 28], "achiev": 0, "goal": 0, "greater": 0, "precis": [0, 3], "experi": 0, "comprehens": 0, "well": [0, 15, 24, 30], "applic": [0, 7, 27], "protocol": 0, "interfac": 0, "enjoi": 0, "freedom": 0, "cut": 0, "edg": [0, 1, 2, 5, 6, 7, 14, 15, 16, 20, 21, 23, 24, 26, 27, 29, 30], "c": [0, 14, 17, 27, 29, 30], "manifold": [0, 6, 14, 24, 29, 30], "nmt": 0, "core": [0, 15, 27], "technologi": 0, "cascad": 0, "bind": 0, "interact": 0, "easili": 0, "accomplish": 0, "through": [0, 3, 5, 6, 24, 29, 30], "command": 0, "script": [0, 21], "visual": [0, 21], "flow": [0, 15], "program": [0, 18], "vdfp": 0, "plugin": 0, "popular": 0, "cloud": 0, "streamlit": 0, "variou": 0, "perform": [0, 2, 3, 23, 27], "task": [0, 3, 23], "seamlessli": 0, "custom": 0, "emb": 0, "own": 0, "hous": 0, "plu": [0, 7, 13], "includ": [0, 3, 5, 7, 8, 13, 14, 15, 17, 21, 23, 24, 26, 27, 29, 30], "sever": [0, 14, 27], "industri": 0, "standard": [0, 7, 14], "method": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "transport": 0, "ifc": [0, 15, 27], "obj": [0, 27], "brep": [0, 15, 21, 27], "hbjson": 0, "csv": [0, 3, 15, 23], "serial": [0, 15], "servic": 0, "speckl": [0, 1, 2], "philosophi": 0, "licens": 0, "agplv3": 0, "vision": 0, "minim": [0, 15, 23], "increment": 0, "cost": [0, 15], "ensur": [0, 3, 17, 29], "return": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "invest": 0, "outright": 0, "noth": 0, "ever": 0, "trap": 0, "expens": 0, "subscript": 0, "share": [0, 15, 27, 29], "app": 0, "eas": 0, "give": 0, "choos": [0, 17], "between": [0, 3, 12, 14, 15, 21, 23, 24, 27, 28, 29, 30], "local": [0, 15, 23], "option": [0, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30], "peac": 0, "mind": 0, "focu": 0, "what": [0, 27], "matter": 0, "most": [0, 8, 13, 15, 21, 27], "join": [0, 2, 15, 27], "revolut": 0, "try": 0, "todai": 0, "see": [0, 3, 4, 5, 6, 7, 8, 9, 14, 15, 21, 24, 26, 27, 29, 30], "differ": [0, 2, 14, 24, 27, 30], "yourself": 0, "pip": 0, "upgrad": 0, "depend": [0, 5, 14, 24, 30], "follow": [0, 3, 5, 6, 12, 13, 14, 15, 17, 23, 27, 28, 30], "automat": [0, 14, 15, 27], "from": [0, 3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 26, 27, 28, 29, 30], "expand": 0, "view": [0, 14, 15], "numpi": [0, 21, 27], "http": [0, 3, 5, 6, 7, 8, 12, 14, 15, 21, 24, 26, 27, 29, 30], "org": [0, 3, 5, 6, 7, 8, 14, 15, 24, 26, 27, 29, 30], "1": [0, 3, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30], "24": [0, 5], "0": [0, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30], "scipi": 0, "10": [0, 3, 5, 6, 14, 15, 21, 23, 24, 26, 27, 29, 30], "plotli": [0, 1, 2, 3, 8, 15, 23, 27], "com": [0, 3, 5, 8, 12, 14, 15, 21, 24, 26, 27, 30], "5": [0, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 21, 23, 24, 26, 27, 29, 30], "11": [0, 6], "ifcopenshel": 0, "7": [0, 5, 6, 14, 27, 29, 30], "9": [0, 6, 14, 23, 27], "ipfshttpclient": 0, "pypi": 0, "web3": 0, "web3pi": 0, "readthedoc": [0, 15], "io": [0, 15], "en": [0, 3, 5, 6, 7, 8, 14, 15, 24, 26, 27, 29, 30], "stabl": 0, "30": [0, 3, 18, 26], "openstudio": [0, 13], "net": [0, 15, 27], "4": [0, 3, 5, 6, 7, 14, 15, 27, 29, 30], "topologic_cor": [0, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 18, 20, 21, 24, 27, 29, 30], "6": [0, 3, 5, 6, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30], "lbt": 0, "ladybug": 0, "25": [0, 5, 13, 15, 16, 18, 21, 24, 27], "161": 0, "honeybe": [0, 1, 2], "12": [0, 3, 6, 27], "energi": [0, 13], "91": [0, 15, 27], "49": 0, "json": [0, 15, 21, 27], "doc": [0, 8, 14, 27], "html": [0, 14, 15, 27], "2": [0, 3, 5, 6, 7, 12, 14, 15, 17, 21, 22, 24, 27, 29, 30], "py2neo": 0, "2021": 0, "pyvisgraph": [0, 2, 15], "github": [0, 5, 12, 14, 15, 24, 30], "taipanrex": 0, "specklepi": 0, "specklesystem": 0, "panda": [0, 21], "pydata": 0, "8": [0, 3, 5, 6, 13, 14, 15, 23, 26, 27, 29, 30], "dgl": [0, 1, 2, 15, 21], "dmlc": 0, "favourit": 0, "editor": 0, "jupyt": [0, 15, 21], "notebook": [0, 15, 21, 23, 27], "recommend": 0, "type": [0, 2, 3, 5, 7, 8, 9, 11, 13, 15, 18, 20, 21, 23, 25, 27, 28, 29, 30], "import": [0, 21, 27], "found": [0, 3, 5, 7, 11, 12, 13, 14, 15, 18, 21, 23, 24, 27, 29, 30], "If": [0, 3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30], "wish": [0, 3, 7, 13, 15, 17], "actual": [0, 3, 7, 14, 15, 21, 23], "jabi": 0, "w": [0, 9, 13, 27], "2024": 0, "doi": 0, "5281": 0, "zenodo": 0, "11555172": 0, "To": [0, 17, 20], "one": [0, 3, 4, 7, 12, 14, 15, 16, 17, 23, 24, 27, 29, 30], "paper": 0, "defin": [0, 3, 9, 12, 14, 15, 23, 24, 27, 28, 30], "chatzivasileiadi": 0, "A": [0, 3, 5, 6, 7, 8, 11, 12, 14, 15, 16, 18, 21, 23, 24, 26, 27, 28, 29, 30], "explor": 0, "reason": 0, "semant": 0, "In": [0, 3, 21, 28], "eloi": 0, "d": [0, 14, 17, 29], "leit": 0, "viana": 0, "f": 0, "morai": 0, "j": [0, 15, 27], "vieira": 0, "vaz": 0, "ed": 0, "formal": 0, "pp": 0, "277": 0, "285": 0, "springer": 0, "intern": [0, 3, 5, 6, 14, 15, 24, 29], "publish": 0, "1007": 0, "978": 0, "030": 0, "57509": 0, "0_25": 0, "Or": 0, "bib": 0, "format": [0, 8, 15, 21, 27], "refer": [0, 5], "manag": [0, 15, 27], "misc": 0, "jabi2024": 0, "author": [0, 27], "wassim": 0, "11555173": 0, "titl": [0, 3, 21, 23, 27], "url": [0, 20, 25], "year": [0, 26], "inbook": 0, "jabi2021": 0, "abstract": 0, "conceptu": 0, "framework": 0, "concept": 0, "architect": 0, "reflect": 0, "befor": [0, 3, 5, 20, 27], "complex": 0, "set": [0, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30], "we": 0, "summar": 0, "below": [0, 15, 27, 28], "relat": [0, 15], "work": [0, 5, 13, 14, 15, 17, 24, 27, 30], "late": 0, "1980": 0, "describ": [0, 27], "class": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "discuss": 0, "also": [0, 5, 14, 15, 23, 27, 30], "report": [0, 3, 13], "usabl": 0, "workshop": 0, "wa": [0, 3, 5, 14, 15, 21, 24, 27, 30], "conduct": [0, 17, 27], "valid": [0, 3, 13, 15, 23], "evalu": [0, 3, 7], "methodologi": 0, "collect": [0, 3], "qualit": 0, "illustr": 0, "fundament": 0, "shift": 0, "pursu": 0, "fidel": 0, "form": [0, 5, 7, 22, 24, 27, 29], "intent": 0, "aikaterini": 0, "citi": 0, "cham": 0, "sara": 0, "david": 0, "franklim": 0, "jorg": 0, "isbn": 0, "journal": 0, "page": [0, 15], "link": 0, "cardiff": 0, "univers": 0, "ucl": 0, "packag": [0, 1], "index": [0, 2, 12, 15, 17, 21, 27, 29], "modul": [0, 1], "search": [0, 15, 21, 27, 29, 30], "submodul": 1, "ann": [1, 2], "apertur": [1, 2, 5, 6, 9, 13, 15, 18, 27], "cell": [1, 2, 6, 7, 13, 18, 27, 29], "cellcomplex": [1, 2, 7, 13, 18, 27, 29], "cluster": [1, 2, 5, 6, 12, 14, 15, 16, 18, 24, 27, 29, 30], "color": [1, 2, 3, 13, 15, 21, 23, 27], "context": [1, 2, 4, 15, 27], "dictionari": [1, 2, 3, 5, 6, 7, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30], "energymodel": [1, 2], "face": [1, 2, 5, 6, 7, 12, 13, 15, 16, 18, 21, 24, 26, 27, 29, 30], "graphqueueitem": [1, 2, 15], "mergingprocess": [1, 2, 15, 27], "workerprocess": [1, 2, 15, 27], "workerprocesspool": [1, 2, 15, 27], "grid": [1, 2, 18, 21, 23, 24, 30], "helper": [1, 2], "matrix": [1, 2, 3, 15, 21, 23, 27, 28, 29], "neo4j": [1, 2], "polyskel": [1, 2, 5, 14, 24, 30], "debug": [1, 2, 22], "line2": [1, 2, 22], "linesegment2": [1, 2, 22], "point2": [1, 2, 22], "ray2": [1, 2, 22], "subtre": [1, 2, 22], "set_debug": [1, 2, 22], "skeleton": [1, 2, 5, 14, 22, 24, 30], "pyg": [1, 2], "customgraphdataset": [1, 2, 23], "shell": [1, 2, 5, 6, 7, 14, 26, 27, 29], "sun": [1, 2], "queueitem": [1, 2, 27], "sinkitem": [1, 2, 27], "vector": [1, 2, 5, 6, 7, 12, 14, 15, 21, 24, 26, 27, 29, 30], "vertex": [1, 2, 5, 6, 7, 12, 14, 15, 16, 20, 21, 24, 26, 27, 28, 30], "wire": [1, 2, 5, 6, 7, 12, 14, 15, 24, 26, 27, 29], "version": [1, 2, 14, 15, 17, 23, 24, 27, 30], "content": [1, 9, 15, 27], "datasetbycsvpath": [2, 3, 23], "datasetbysamplenam": [2, 3], "datasetsamplenam": [2, 3], "datasetsplit": [2, 3, 23], "figur": [2, 3, 15, 21, 23, 26, 27], "hyperparamet": [2, 3, 23], "hyperparametersbysamplenam": [2, 3], "initi": [2, 3, 14, 23, 27, 30], "metric": [2, 3, 15], "modeldata": [2, 3, 23], "save": [2, 3, 13, 15, 23], "test": [2, 3, 15, 21, 23, 30], "train": [2, 3, 15, 21, 23], "bytopologycontext": [2, 4], "area": [2, 5, 14, 17, 27, 30], "box": [2, 5, 6, 12, 27, 30], "byfac": [2, 5, 6, 24], "byoffset": [2, 5, 14, 30], "byshel": [2, 5, 14], "bythickenedfac": [2, 5], "bythickenedshel": [2, 5], "bywir": [2, 5, 6, 14, 24], "bywiresclust": [2, 5, 6, 14, 24], "capsul": [2, 5], "compact": [2, 5, 14, 15], "cone": [2, 5], "containmentstatu": [2, 5], "cylind": [2, 5], "decompos": [2, 5, 6], "dodecahedron": [2, 5], "egg": [2, 5], "externalboundari": [2, 5, 6, 12, 14, 24, 27, 29, 30], "hyperboloid": [2, 5], "icosahedron": [2, 5], "internalboundari": [2, 5, 14, 24], "internalvertex": [2, 5, 14, 27], "isonboundari": [2, 5, 24], "octahedron": [2, 5, 6], "paraboloid": [2, 5, 24], "pipe": [2, 5], "prism": [2, 5, 6], "removecollinearedg": [2, 5, 6, 14, 24, 27, 30], "roof": [2, 5, 24, 30], "sphere": [2, 5, 6], "surfacearea": [2, 5], "tetrahedron": [2, 5], "toru": [2, 5], "vertic": [2, 5, 6, 7, 12, 13, 14, 15, 16, 21, 22, 24, 26, 27, 28, 29, 30], "bycel": [2, 6], "bycellsclust": [2, 6], "byfacesclust": [2, 6, 24], "delaunai": [2, 6, 14, 24, 27], "externalfac": [2, 6], "internalfac": [2, 6], "nonmanifoldfac": [2, 6], "voronoi": [2, 6, 24], "byformula": [2, 7], "bytopologi": [2, 7, 13, 15], "dbscan": [2, 7], "freecel": [2, 7], "freeedg": [2, 7], "freefac": [2, 7], "freeshel": [2, 7], "freetopologi": [2, 7, 29], "freevertic": [2, 7], "freewir": [2, 7], "highesttyp": [2, 7, 27], "k_mean": [2, 7], "mergecel": [2, 7], "mysticros": [2, 7], "bycssnamedcolor": [2, 8], "byhex": [2, 8], "byvalueinrang": [2, 8, 15], "cssnamedcolor": [2, 8], "plotlycolor": [2, 8], "rgbtohex": [2, 8], "bytopologyparamet": [2, 9], "bykeyvalu": [2, 11], "bykeysvalu": [2, 11], "bymergeddictionari": [2, 11], "bypythondictionari": [2, 11], "kei": [2, 3, 5, 6, 7, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30], "listattributevalu": [2, 11], "pythondictionari": [2, 11], "removekei": [2, 11], "setvalueatkei": [2, 11], "valueatkei": [2, 11], "valu": [2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 29, 30], "angl": [2, 5, 6, 12, 13, 14, 19, 24, 26, 27, 28, 30], "bisect": [2, 12, 28], "byfacenorm": [2, 12], "byoffset2d": [2, 12], "bystartvertexendvertex": [2, 12], "byvertic": [2, 12, 14, 28, 30], "byverticesclust": [2, 12, 14, 30], "direct": [2, 5, 6, 7, 12, 13, 14, 15, 24, 26, 27, 28, 29, 30], "endvertex": [2, 12, 30], "equation2d": [2, 12], "extendtoedg": [2, 12], "intersect2d": [2, 12], "iscollinear": [2, 12, 28], "iscoplanar": [2, 12, 14], "isparallel": [2, 12, 28], "length": [2, 3, 5, 6, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30], "normal": [2, 5, 12, 14, 15, 17, 22, 23, 27, 28, 29, 30], "normaledg": [2, 12, 14], "parameteratvertex": [2, 12], "revers": [2, 5, 12, 14, 15, 17, 28, 30], "setlength": [2, 12], "startvertex": [2, 12, 30], "trim": [2, 12, 14, 17], "trimbyedg": [2, 12], "vertexbydist": [2, 12, 30], "vertexbyparamet": [2, 12, 14, 30], "byosmpath": [2, 13], "columnnam": [2, 13], "defaultconstructionset": [2, 13], "defaultscheduleset": [2, 13], "exporttogbxml": [2, 13], "exporttoosm": [2, 13], "gbxmlstring": [2, 13], "queri": [2, 13, 14, 27, 30], "reportnam": [2, 13], "rownam": [2, 13], "run": [2, 3, 13, 15, 21, 25, 27], "spacecolor": [2, 13], "spacedictionari": [2, 13], "spacetypenam": [2, 13], "spacetyp": [2, 13, 15], "sqlfile": [2, 13], "tablenam": [2, 13], "unit": [2, 6, 13, 21, 27], "addinternalboundari": [2, 14], "addinternalboundariesclust": [2, 14], "boundingrectangl": [2, 14, 30], "byedg": [2, 14, 30], "byedgesclust": [2, 14, 30], "bythickenedwir": [2, 14, 24], "circl": [2, 5, 7, 14, 15, 24, 26, 30], "compassangl": [2, 14, 28], "einstein": [2, 14, 30], "ellips": [2, 14, 30], "exteriorangl": [2, 14, 30], "facingtoward": [2, 14], "fillet": [2, 14, 30], "harmon": [2, 14], "interiorangl": [2, 14, 30], "invert": [2, 14, 30], "isovist": [2, 14], "medialaxi": [2, 14], "northarrow": [2, 14], "planar": [2, 5, 14, 24, 27, 30], "planeequ": [2, 14, 29], "rectangl": [2, 14, 22, 24, 30], "rectanglebyplaneequ": [2, 14], "squar": [2, 3, 14, 23, 30], "squircl": [2, 14, 30], "star": [2, 14, 30], "trapezoid": [2, 14, 30], "triangul": [2, 5, 6, 14, 24, 27], "trimbywir": [2, 14], "vertexparamet": [2, 14], "addedg": [2, 15], "addvertex": [2, 15], "addvertic": [2, 15], "adjacencydictionari": [2, 15], "adjacencylist": [2, 15], "adjacencymatrix": [2, 15], "adjacentvertic": [2, 15], "allpath": [2, 15], "averageclusteringcoeffici": [2, 15], "botgraph": [2, 15], "botstr": [2, 15], "betweenesscentr": [2, 15], "byadjacencymatrix": [2, 15], "byadjacencymatrixcsvpath": [2, 15], "bybotgraph": [2, 15], "bybotpath": [2, 15], "bycsvpath": [2, 15], "bydgcnnfil": [2, 15], "bydgcnnpath": [2, 15], "bydgcnnstr": [2, 15], "byifcfil": [2, 15, 27], "byifcpath": [2, 15, 27], "bymeshdata": [2, 15], "byverticesedg": [2, 15], "chromaticnumb": [2, 15], "closenesscentr": [2, 15], "containsedg": [2, 15], "containsvertex": [2, 15], "contractedg": [2, 15], "degre": [2, 5, 6, 12, 13, 14, 15, 18, 19, 24, 27, 28, 29, 30], "degreesequ": [2, 15], "densiti": [2, 7, 14, 15], "depthmap": [2, 15], "diamet": [2, 15], "distanc": [2, 5, 12, 14, 15, 16, 19, 22, 24, 27, 29, 30], "exporttoadjacencymatrixcsv": [2, 15], "exporttobot": [2, 15], "exporttocsv": [2, 15], "exporttogexf": [2, 15], "exporttojson": [2, 15, 27], "flatten": [2, 15, 17, 27], "globalclusteringcoeffici": [2, 15], "guid": [2, 15, 27], "incomingedg": [2, 15, 29], "incomingvertic": [2, 15], "isbipartit": [2, 15], "iscomplet": [2, 15], "iserdoesgallai": [2, 15], "isolatedvertic": [2, 15], "jsondata": [2, 15], "jsonstr": [2, 15, 27], "localclusteringcoeffici": [2, 15], "longestpath": [2, 15], "maximumdelta": [2, 15], "maximumflow": [2, 15], "meshdata": [2, 15], "metricdist": [2, 15], "minimumdelta": [2, 15], "minimumspanningtre": [2, 15], "navigationgraph": [2, 15], "nearestvertex": [2, 15, 29], "networkxgraph": [2, 15], "order": [2, 5, 15, 17, 19, 21, 22, 23, 27, 28, 29], "outgoingedg": [2, 15, 29], "outgoingvertic": [2, 15], "pagerank": [2, 15], "path": [2, 3, 13, 15, 18, 21, 23, 26, 27, 30], "removeedg": [2, 15, 27], "removevertex": [2, 15], "setdictionari": [2, 15, 27], "shortestpath": [2, 15], "show": [2, 15, 21, 22, 23, 27], "size": [2, 14, 15, 21, 23, 27, 30], "topologicaldist": [2, 15], "tree": [2, 15], "vertexdegre": [2, 15], "visibilitygraph": [2, 15], "wait_messag": [2, 15, 27], "startprocess": [2, 15, 27], "stopprocess": [2, 15, 27], "edgesbydist": [2, 16], "edgesbyparamet": [2, 16], "verticesbydist": [2, 16], "verticesbyparamet": [2, 16], "closestmatch": [2, 17], "iter": [2, 7, 15, 17, 28], "makeuniqu": [2, 17], "mergebythreshold": [2, 17], "posit": [2, 5, 6, 13, 14, 17, 26, 27, 28, 30], "repeat": [2, 17, 30], "sort": [2, 15, 17, 27, 29], "transpos": [2, 17, 19, 27], "constructionsetbyidentifi": [2, 18], "constructionset": [2, 18], "exporttohbjson": [2, 18], "modelbytopologi": [2, 18], "programtypebyidentifi": [2, 18], "programtyp": [2, 18], "string": [2, 7, 8, 11, 13, 14, 15, 17, 18, 19, 21, 23, 27, 28, 29, 30], "add": [2, 14, 15, 18, 19, 20, 21, 27, 28], "byrot": [2, 19], "byscal": [2, 19], "bytransl": [2, 19], "multipli": [2, 19, 28], "subtract": [2, 19, 28], "addgraph": [2, 20], "byparamet": [2, 20], "deleteal": [2, 20], "exporttograph": [2, 20], "nodelabel": [2, 20], "nodetovertex": [2, 20], "nodesbycyph": [2, 20], "nodesbysubgraph": [2, 20], "relationshiptyp": [2, 20], "setgraph": [2, 20], "subgraphbycyph": [2, 20], "subgraphexporttograph": [2, 20], "addcolorbar": [2, 21], "colorscal": [2, 3, 8, 15, 21, 27], "databydgl": [2, 21], "databygraph": [2, 21], "databytopologi": [2, 21], "exporttoimag": [2, 21], "figurebyconfusionmatrix": [2, 21], "figurebycorrel": [2, 21], "figurebydata": [2, 21], "figurebydatafram": [2, 21], "figurebyjsonfil": [2, 21], "figurebyjsonpath": [2, 21], "figurebymatrix": [2, 21], "figurebypiechart": [2, 21], "figurebytopologi": [2, 21], "figureexporttojson": [2, 21], "figureexporttopdf": [2, 21], "figureexporttopng": [2, 21], "figureexporttosvg": [2, 21], "render": [2, 15, 21, 23, 27], "setcamera": [2, 21], "intersect": [2, 5, 12, 22, 27, 30], "cross": [2, 3, 22, 23, 26, 28], "dot": [2, 21, 22, 28], "height": [2, 3, 5, 6, 13, 15, 21, 22, 23, 27, 30], "sink": [2, 15, 22, 27], "process_al": [2, 23], "accuraci": [2, 3, 21, 23], "confusionmatrix": [2, 23], "datasetgraphlabel": [2, 23], "mse": [2, 3, 23], "model": [2, 3, 13, 18, 23], "modelclassifi": [2, 23], "modelload": [2, 23], "modelpredict": [2, 23], "modelsav": [2, 23], "modeltest": [2, 23], "modeltrain": [2, 23], "optim": [2, 14, 23, 27, 30], "bydisjointfac": [2, 24], "hyperbolicparaboloidcirculardomain": [2, 24], "hyperbolicparaboloidrectangulardomain": [2, 24], "isclos": [2, 24, 30], "selfmerg": [2, 24, 27], "branchesbystream": [2, 25], "clientbyurl": [2, 25], "commitbyid": [2, 25], "commitsbybranch": [2, 25], "object": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30], "send": [2, 25, 27], "specklebranchbyid": [2, 25], "specklecommitbyurl": [2, 25], "specklecommitdelet": [2, 25], "speckleglobalsbystream": [2, 25], "specklesendobject": [2, 25], "specklestreambyid": [2, 25], "specklestreambyurl": [2, 25], "streamsbycli": [2, 25], "mesh_to_speckl": [2, 25], "mesh_to_speckle_mesh": [2, 25], "altitud": [2, 26, 28], "autumnequinox": [2, 26], "azimuth": [2, 26, 28], "diagram": [2, 26], "pathbyd": [2, 26], "pathbyhour": [2, 26], "springequinox": [2, 26], "summersolstic": [2, 26], "sunris": [2, 26], "sunset": [2, 26], "verticesbyd": [2, 26], "verticesbyhour": [2, 26], "wintersolstic": [2, 26], "id": [2, 15, 18, 27], "sinkkei": [2, 27], "sinkvalu": [2, 27], "sink_str": [2, 27], "addapertur": [2, 27], "addapertures_old": [2, 27], "addcont": [2, 27], "adddictionari": [2, 27], "adjacenttopologi": [2, 27], "analyz": [2, 27], "aperturetopologi": [2, 27], "brepstr": [2, 27], "boolean": [2, 17, 23, 27], "boundingbox": [2, 27], "bybimfil": [2, 27], "bybimpath": [2, 27], "bybimstr": [2, 27], "bybrepfil": [2, 27], "bybreppath": [2, 27], "bybrepstr": [2, 27], "bydxffil": [2, 27], "bydxfpath": [2, 27], "bygeometri": [2, 27], "byjsonfil": [2, 27], "byjsonpath": [2, 27], "byjsonstr": [2, 27], "byjsonstring_old": [2, 27], "byobjfil": [2, 27], "byobjpath": [2, 27], "byobjstr": [2, 27], "byocctshap": [2, 27], "byxyzfil": [2, 27], "byxyzpath": [2, 27], "centerofmass": [2, 27], "centroid": [2, 7, 12, 15, 24, 27, 29, 30], "cleanup": [2, 27], "clusterfac": [2, 27], "clusterfaces_orig": [2, 27], "convexhul": [2, 27, 30], "copi": [2, 27], "divid": [2, 23, 26, 27], "explod": [2, 27], "exporttobim": [2, 27], "exporttobrep": [2, 27], "exporttodxf": [2, 27], "exporttoobj": [2, 27], "filter": [2, 15, 23, 27], "fix": [2, 27], "impos": [2, 27], "imprint": [2, 27], "isinst": [2, 27], "isplanar": [2, 27], "issam": [2, 27, 28], "merg": [2, 6, 7, 11, 14, 15, 17, 24, 27], "mergeal": [2, 27], "nonplanarfac": [2, 27], "objstr": [2, 27], "occtshap": [2, 27], "openedg": [2, 27], "openfac": [2, 27], "openvertic": [2, 27], "orient": [2, 5, 27, 30], "place": [2, 5, 6, 7, 12, 14, 24, 27, 30], "removecont": [2, 27], "removecoplanarfac": [2, 27], "removefac": [2, 27], "removefacesbyselector": [2, 27], "removevertic": [2, 27], "replacevertic": [2, 27], "rotat": [2, 12, 14, 19, 27, 30], "rotatebyeulerangl": [2, 27], "rotatebyquaternion": [2, 27], "scale": [2, 3, 8, 15, 19, 21, 27], "selectsubtopologi": [2, 27], "setsnapshot": [2, 27], "sharededg": [2, 27], "sharedfac": [2, 27], "sharedtopologi": [2, 27], "sharedvertic": [2, 27], "sharedwir": [2, 27], "slice": [2, 27], "snapshot": [2, 27], "sortbyselector": [2, 27], "spin": [2, 27], "subtopologi": [2, 7, 15, 27, 29], "supertopologi": [2, 27, 29], "symdif": [2, 27], "symmetricdiffer": [2, 27], "taper": [2, 27], "transferdictionari": [2, 6, 7, 14, 24, 27, 30], "transferdictionariesbyselector": [2, 27], "translat": [2, 19, 27], "translatebydirectiondist": [2, 27], "twist": [2, 5, 27], "typeasstr": [2, 27], "typeid": [2, 27], "uuid": [2, 27], "unflatten": [2, 27], "union": [2, 27], "view3d": [2, 27], "xor": [2, 27], "averag": [2, 15, 17, 28, 29], "azimuthaltitud": [2, 28], "byazimuthaltitud": [2, 28], "bycoordin": [2, 28, 29], "coordin": [2, 14, 15, 27, 28, 29], "down": [2, 28], "east": [2, 14, 28], "isantiparallel": [2, 28], "magnitud": [2, 28], "north": [2, 13, 14, 26, 28], "northeast": [2, 28], "northwest": [2, 28], "setmagnitud": [2, 28], "south": [2, 28], "southeast": [2, 28], "southwest": [2, 28], "sum": [2, 28], "transformationmatrix": [2, 28], "up": [2, 5, 6, 7, 14, 15, 21, 24, 27, 28, 30], "west": [2, 28], "xaxi": [2, 15, 21, 27, 28], "yaxi": [2, 14, 15, 21, 27, 28], "zaxi": [2, 15, 21, 27, 28], "arecollinear": [2, 29], "areipsilater": [2, 29], "areipsilateralclust": [2, 29], "areonsamesid": [2, 29], "areonsamesideclust": [2, 29], "clockwise2d": [2, 29], "counterclockwise2d": [2, 29], "enclosingcel": [2, 29], "fuse": [2, 29], "interpolatevalu": [2, 29], "iscoincid": [2, 29], "isextern": [2, 29], "isintern": [2, 29], "isperipher": [2, 29], "origin": [2, 5, 6, 7, 12, 14, 16, 24, 26, 27, 28, 29, 30], "perpendiculardist": [2, 29], "point": [2, 5, 7, 14, 18, 22, 23, 26, 27, 28, 29, 30], "x": [2, 3, 7, 12, 14, 15, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30], "y": [2, 3, 7, 12, 13, 14, 15, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30], "z": [2, 5, 6, 7, 13, 14, 15, 17, 19, 21, 24, 26, 27, 28, 29, 30], "arc": [2, 14, 24, 30], "close": [2, 5, 8, 14, 15, 24, 27, 29, 30], "cycl": [2, 30], "ellipseal": [2, 30], "interpol": [2, 14, 29, 30], "ismanifold": [2, 30], "issimilar": [2, 30], "miter": [2, 30], "orientedg": [2, 30], "spiral": [2, 30], "split": [2, 3, 23, 30], "startendvertic": [2, 30], "vertexdist": [2, 30], "static": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30], "tasktyp": 3, "descript": [3, 5, 6, 7, 11, 14, 24, 25, 30], "dataset": [3, 23], "accord": [3, 15, 17, 23, 27], "input": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30], "file": [3, 13, 15, 18, 21, 23, 27], "paramet": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30], "str": [3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 27, 29, 30], "The": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30], "folder": [3, 13, 15, 23], "contain": [3, 5, 6, 7, 8, 14, 15, 16, 17, 21, 23, 27, 28, 29, 30], "necessari": [3, 23], "yml": [3, 23], "regress": [3, 23], "default": [3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30], "keep": 3, "scikit": 3, "bunch": 3, "descr": 3, "sklearn": 3, "util": 3, "_bunch": 3, "name": [3, 8, 13, 14, 15, 18, 20, 21, 23, 27, 30], "sampl": [3, 14, 21], "breast_canc": 3, "california_h": 3, "digit": [3, 21], "iri": 3, "wine": 3, "sci": 3, "kit": 3, "list": [3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30], "testratio": 3, "randomst": [3, 23], "42": [3, 23], "ratio": [3, 13, 15, 23, 27], "target": [3, 15, 21, 27], "float": [3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30], "reserv": 3, "unseen": 3, "int": [3, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30], "us": [3, 5, 6, 7, 8, 12, 13, 14, 15, 17, 20, 21, 23, 24, 26, 27, 29, 30], "reproduc": [3, 23], "result": [3, 5, 6, 7, 12, 14, 15, 19, 21, 23, 24, 27, 28, 30], "when": [3, 14, 15, 19, 27, 30], "integ": [3, 8, 11, 14, 15, 26, 27, 30], "shuffl": [3, 23], "mean": [3, 7, 8, 14, 15, 20, 23, 27, 30], "everi": [3, 15], "time": [3, 7, 14, 15, 26, 27], "code": [3, 5, 12, 14, 15, 21, 24, 27, 30], "get": [3, 13, 20], "just": [3, 15], "randomli": 3, "pick": 3, "number": [3, 5, 6, 7, 8, 12, 14, 15, 17, 21, 22, 23, 24, 26, 27, 29, 30], "specifi": [3, 5, 7, 8, 14, 15, 16, 21, 22, 23, 24, 27, 28, 29, 30], "none": [3, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30], "random": [3, 15, 23], "x_train": 3, "x_test": 3, "y_train": 3, "y_test": 3, "width": [3, 5, 6, 14, 15, 21, 23, 24, 27, 30], "900": [3, 15], "600": [3, 21], "templat": [3, 13], "viridi": [3, 8, 15, 21, 27], "colorsampl": [3, 21], "For": [3, 7, 8, 14, 15, 17, 21, 27], "confus": [3, 7, 21, 23], "loss": [3, 21, 23], "mae": [3, 23], "desir": [3, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30], "pixel": [3, 15, 21, 23, 27], "scatter": [3, 21, 23], "plot": 3, "ggplot2": 3, "seaborn": 3, "simple_whit": 3, "plotly_whit": 3, "plotly_dark": 3, "present": [3, 23], "xgridoff": 3, "ygridoff": 3, "gridon": 3, "e": [3, 7, 8, 15, 17, 21, 23, 27, 28, 29, 30], "g": [3, 7, 8, 15, 21, 23, 27], "plasma": [3, 8, 15, 21, 27], "full": [3, 8, 15, 21, 27, 30], "builtin": [3, 8, 15, 21, 27], "discret": [3, 21], "displai": [3, 15, 21, 23, 27], "correspond": [3, 7, 11], "untitl": [3, 21], "validationratio": 3, "hiddenlay": 3, "learningr": 3, "001": [3, 5, 14, 15, 23, 24, 27, 30], "epoch": [3, 21, 23], "batchsiz": 3, "patienc": 3, "earlystop": 3, "true": [3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30], "crossvalidationtyp": 3, "holdout": [3, 23], "kfold": 3, "interv": [3, 26], "mantissa": [3, 5, 6, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30], "either": [3, 7, 12, 15], "case": [3, 5, 6, 7, 12, 14, 15, 19, 21, 23, 24, 27, 28, 29, 30], "insensit": [3, 5, 6, 7, 12, 14, 15, 19, 21, 23, 24, 27, 28, 29, 30], "supervis": 3, "where": [3, 7, 14, 15, 22, 24, 27, 28, 29, 30], "categor": [3, 15], "label": [3, 15, 20, 21, 23, 27], "continu": [3, 30], "numer": [3, 7, 15, 17, 21, 23, 27], "70": 3, "80": [3, 14, 15, 23, 24, 30], "left": [3, 14, 15, 17, 21, 23, 24, 27, 30], "over": [3, 13, 15], "after": 3, "20": [3, 13, 15, 18, 21, 27], "hidden": [3, 23], "layer": [3, 23], "each": [3, 5, 7, 12, 13, 14, 15, 17, 21, 23, 26, 27, 29, 30], "have": [3, 5, 6, 13, 15, 16, 17, 23, 27, 29, 30], "3hidden": 3, "first": [3, 5, 12, 14, 15, 17, 19, 27, 28, 29, 30], "16": [3, 5, 7, 14, 23, 24, 27, 30], "second": [3, 12, 14, 15, 19, 27, 28, 29, 30], "last": [3, 5, 12, 14, 17, 27, 28, 30], "rate": [3, 23], "wikipedia": [3, 5, 6, 7, 14, 15, 24, 26, 27, 29, 30], "wiki": [3, 5, 6, 7, 14, 15, 24, 26, 27, 29, 30], "learning_r": 3, "neural_network_": 3, "machine_learn": 3, "propag": 3, "network": [3, 23], "updat": [3, 21], "instead": [3, 14, 15, 23, 24, 30], "singl": [3, 15, 24, 27, 29], "stochast": 3, "gradient": [3, 23], "descent": [3, 23], "entir": [3, 13], "batch": [3, 23], "mini": 3, "determin": [3, 5, 6, 14, 15, 17, 30], "improv": [3, 23], "stop": [3, 15, 27], "earli": 3, "bool": [3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30], "doe": [3, 12, 15, 27], "certain": 3, "k": [3, 7, 11, 15, 23, 27], "fold": [3, 23], "select": [3, 15, 23, 26, 27], "must": [3, 5, 6, 7, 12, 14, 15, 21, 23, 24, 27, 29, 30], "less": [3, 27], "than": [3, 12, 14, 15, 24, 27, 29, 30], "total": [3, 15, 26, 27], "dict": [3, 5, 6, 11, 12, 13, 14, 15, 18, 23, 26, 27, 28, 29], "task_typ": 3, "test_ratio": 3, "validation_ratio": 3, "hidden_lay": 3, "batch_siz": [3, 23], "early_stop": 3, "random_st": 3, "cross_val_typ": 3, "suggest": 3, "sampledataset": 3, "k_fold": [3, 23], "an": [3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 26, 27, 28, 29, 30], "_annmodel": 3, "state": 3, "pre": [3, 15, 21, 27], "modeliniti": 3, "neural": [3, 23], "given": [3, 13, 14, 22, 27, 30], "recal": 3, "f1": 3, "score": [3, 15], "els": [3, 13, 21], "error": [3, 5, 7, 11, 12, 13, 14, 15, 23, 24, 27, 29, 30], "absolut": [3, 23], "r": [3, 8, 23, 27], "training_loss": 3, "validation_loss": 3, "training_accuraci": 3, "onli": [3, 7, 14, 15, 17, 23, 26, 27, 28, 29, 30], "validation_accuraci": 3, "accuracyfor": 3, "training_ma": 3, "validation_ma": 3, "training_ms": 3, "validation_ms": 3, "training_r2": 3, "validation_r2": 3, "overwrit": [3, 13, 15, 18, 21, 23, 27], "fals": [3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 24, 26, 27, 28, 29, 30], "ani": [3, 5, 6, 7, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 27, 28, 29, 30], "exist": [3, 15, 18, 21, 22, 23, 27], "overwritten": [3, 15, 23], "otherwis": [3, 5, 6, 7, 11, 12, 13, 14, 15, 18, 21, 23, 24, 26, 27, 28, 29, 30], "won": [3, 15, 18, 21, 23, 27], "t": [3, 15, 18, 21, 23, 27], "correctli": [3, 23, 30], "belong": [4, 15, 21, 27, 29], "usid": [5, 6, 24, 26], "vside": [5, 6, 24, 26], "wside": [5, 6], "placement": [5, 6, 7, 12, 14, 24, 30], "center": [5, 6, 7, 12, 14, 15, 21, 24, 26, 27, 30], "toler": [5, 6, 7, 12, 13, 14, 15, 16, 20, 21, 24, 27, 28, 29, 30], "0001": [5, 6, 7, 12, 13, 14, 15, 16, 17, 20, 21, 24, 27, 28, 29, 30], "locat": [5, 6, 7, 9, 12, 14, 15, 18, 21, 24, 26, 27, 30], "being": [5, 6, 7, 12, 14, 15, 23, 24, 27, 30], "side": [5, 6, 7, 14, 21, 24, 26, 27, 29, 30], "along": [5, 6, 9, 12, 14, 15, 19, 24, 26, 27, 28, 30], "bottom": [5, 6, 14, 15, 21, 23, 24, 27, 30], "lowerleft": [5, 6, 7, 14, 24, 30], "It": [5, 6, 7, 12, 14, 15, 21, 23, 24, 26, 27, 29, 30], "silent": [5, 6, 7, 11, 12, 14, 15, 24, 27, 29, 30], "thei": [5, 6, 7, 11, 12, 14, 15, 17, 21, 23, 24, 27, 28, 29, 30], "warn": [5, 7, 11, 12, 14, 15, 24, 27, 29, 30], "messag": [5, 7, 11, 12, 14, 15, 24, 25, 27, 29, 30], "print": [5, 7, 11, 12, 13, 14, 15, 24, 27, 29, 30], "offset": [5, 12, 14, 16, 24, 30], "mai": [5, 15, 21, 23, 27], "fail": 5, "self": [5, 23, 27, 29], "alwai": [5, 14], "check": [5, 23], "succe": 5, "extern": [5, 6, 12, 14, 24, 27, 29, 30], "boundari": [5, 6, 12, 14, 15, 24, 27, 29, 30], "empti": [5, 14, 20, 27], "thick": [5, 15, 21, 27], "bothsid": [5, 12], "thicken": [5, 14, 24], "loft": [5, 6, 24], "opposit": 5, "rais": 5, "except": 5, "do": [5, 13, 15, 22], "radiu": [5, 6, 7, 14, 24, 26, 30], "vsidesend": 5, "vsidesmiddl": 5, "shape": [5, 14, 16, 24, 26, 27, 30], "hemispher": 5, "end": [5, 7, 12, 13, 14, 15, 24, 26, 27, 28, 29, 30], "segment": [5, 12, 24, 30], "middl": [5, 30], "measur": [5, 6, 14, 15, 23, 28], "known": 5, "spheric": 5, "compar": 5, "cube": [5, 6], "baseradiu": 5, "topradiu": 5, "dirz": 5, "top": [5, 6, 14, 15, 21, 23, 27, 30], "statu": [5, 15, 27], "relationship": [5, 15, 20], "insid": [5, 14, 24, 27, 29], "outsid": 5, "tiltangl": [5, 6], "logic": [5, 6, 27], "compon": [5, 6, 14, 27, 28], "assum": [5, 6, 7, 8, 12, 14, 15, 17, 24, 27, 28, 29, 30], "threshold": [5, 6, 17, 24], "tilt": [5, 6], "horizont": [5, 6, 13, 14, 18, 26, 28], "nearest": [5, 6, 14, 15, 29, 30], "cardin": [5, 6], "verticalfac": 5, "tophorizontalfac": [5, 6], "bottomhorizontalfac": [5, 6], "inclinedfac": 5, "inclin": [5, 6], "verticalapertur": 5, "tophorizontalapertur": [5, 6], "bottomhorizontalapertur": [5, 6], "inclinedapertur": 5, "circumscrib": [5, 6], "longitud": [5, 26], "latitud": [5, 26], "60": [5, 14, 26], "guarante": [5, 14, 27], "focallength": [5, 14, 24, 30], "125": [5, 24], "parabol": [5, 24], "focal": [5, 14, 24, 30], "parabola": [5, 24], "addit": [5, 7, 19, 21], "pleas": [5, 7, 14, 15, 22], "note": [5, 14, 15, 22], "spring": [5, 15, 26], "apex": [5, 30], "profil": 5, "startoffset": 5, "endoffset": 5, "endcapa": 5, "endcapb": 5, "centerlin": 5, "xy": [5, 12, 14, 16, 28, 29], "plane": [5, 12, 14, 16, 24, 28, 29, 30], "start": [5, 7, 12, 14, 15, 24, 26, 27, 28, 29, 30], "cap": 5, "invers": [5, 14, 30], "endcap": 5, "been": [5, 15, 17, 29, 30], "ha": [5, 12, 13, 14, 15, 17, 24, 27, 28, 29, 30], "angtoler": [5, 6, 14, 24, 27, 30], "collinear": [5, 6, 12, 14, 24, 27, 28, 30], "angular": [5, 6, 14, 24, 27, 30], "without": [5, 6, 14, 24, 30], "45": [5, 24, 27, 30], "epsilon": [5, 7, 24, 27], "01": [5, 24, 27, 29], "hip": [5, 24, 30], "straight": [5, 12, 14, 22, 24, 28, 29, 30], "contribut": [5, 12, 14, 24, 30], "\u9ad8\u7199\u9e4f": [5, 14, 24, 30], "xipeng": [5, 14, 24, 30], "gao": [5, 14, 24, 30], "gaoxipeng1998": [5, 14, 24, 30], "gmail": [5, 14, 24, 30], "librari": [5, 14, 24, 27, 30], "botffi": [5, 14, 24, 30], "anoth": [5, 22, 24, 27, 29], "larger": [5, 14, 24, 27, 30], "better": [5, 14, 24, 27, 30], "supercel": 5, "enclosur": 5, "within": [5, 6, 7, 12, 14, 15, 17, 24, 27, 29, 30], "super": [5, 27, 29], "inputcel": 5, "majorradiu": 5, "minorradiu": 5, "major": [5, 14, 30], "minor": [5, 14, 30], "manitssa": [5, 6], "transfer": [6, 7, 14, 15, 24, 27, 30], "should": [6, 7, 13, 15, 17, 21, 22, 27], "minimum": [6, 7, 8, 15, 21, 27, 30], "all": [6, 8, 14, 15, 17, 20, 27, 28, 30], "externalverticalfac": 6, "internalverticalfac": 6, "internalhorizontalfac": 6, "externalinclinedfac": 6, "internalinclinedfac": 6, "externalverticalapertur": 6, "internalverticalapertur": 6, "13": 6, "internalhorizontalapertur": 6, "14": 6, "externalinclinedapertur": 6, "15": [6, 21, 26, 27], "internalinclinedapertur": 6, "delaunay_triangul": [6, 24], "both": [6, 7, 15], "around": [6, 7, 12, 14, 19, 27, 30], "prismat": 6, "partit": [6, 24], "voronoi_diagram": [6, 24], "bound": [6, 14, 24, 27, 30], "ax": [6, 15, 21, 27, 29], "align": [6, 14, 27, 28, 30], "formula": 7, "xrang": 7, "yrang": 7, "xstring": 7, "ystring": 7, "rang": [7, 11, 14, 15, 17, 27], "2d": [7, 12, 14, 15, 30], "uppercas": 7, "independ": 7, "variabl": [7, 15, 23], "math": 7, "function": [7, 23], "sin": 7, "co": [7, 27], "tan": 7, "sqrt": 7, "etc": 7, "ab": [7, 14, 30], "tupl": [7, 8, 15, 22, 23, 27], "step": [7, 12, 14, 30], "attempt": [7, 13, 14, 15, 21, 23, 27, 30], "cannot": [7, 14, 15, 30], "unspecifi": 7, "One": 7, "other": [7, 12, 14, 15, 17, 22, 27, 29], "arg": [7, 12, 22, 29], "topolog": [7, 12, 14, 15, 20, 26, 27, 28, 29, 30], "individu": [7, 29], "argument": 7, "store": [7, 12, 15, 18, 23, 27, 29], "selector": [7, 27], "minsampl": 7, "spatial": [7, 15], "nois": 7, "provid": [7, 15, 23, 27], "expect": 7, "ad": [7, 11, 14, 15, 20, 21, 23, 24, 27, 28], "dimens": 7, "sure": 7, "maximum": [7, 8, 15, 21, 24, 27, 29, 30], "consid": [7, 12, 14, 15, 24, 28, 29, 30], "part": [7, 14, 24, 30], "sens": 7, "region": 7, "requir": 7, "dens": 7, "free": [7, 27, 29], "higher": [7, 14, 27, 30], "highest": [7, 13, 15, 17, 22, 27], "maxiter": [7, 15], "100": [7, 15, 21, 23, 27], "centroidkei": 7, "k_centroid": 7, "means_clust": 7, "under": [7, 14, 15, 18, 20, 23, 24, 27, 30], "geometr": [7, 15, 23], "them": 7, "possibl": [7, 15, 19], "perimet": 7, "mystic": 7, "rose": 7, "ignor": [7, 14, 15, 29], "output": [7, 13, 14, 15, 18, 20, 21, 23, 27, 28, 29, 30], "simplif": 7, "alpha": [8, 15, 27], "css": [8, 15, 21, 23, 27], "develop": 8, "mozilla": 8, "u": [8, 9, 12, 14, 16, 30], "web": 8, "THe": [8, 27], "transpar": [8, 21, 23, 27], "express": [8, 12, 15], "b": [8, 14, 17, 24, 27, 29, 30], "hex": [8, 15, 21, 23, 27], "convert": [8, 15, 20], "hexadecim": [8, 15], "rgb": [8, 15, 21, 23, 27], "rrggbb": 8, "fulli": [8, 27], "opaqu": [8, 21, 27], "minvalu": [8, 21], "maxvalu": [8, 21], "red": [8, 13, 21, 27], "green": [8, 13, 21, 27], "blue": [8, 13, 21, 27], "usealpha": 8, "fourth": 8, "three": [8, 12, 13, 21, 23], "v": [9, 11, 14, 16, 22, 23, 29], "rel": 9, "parameter": 9, "axi": [9, 12, 13, 14, 15, 19, 21, 22, 23, 24, 26, 27, 28, 30], "byobjectcontext": 9, "staticmethod": [11, 13], "def": [11, 13], "bydgldata": 11, "item": [11, 12, 13, 17, 25, 27], "vlist": 11, "append": [11, 15, 17], "tolist": 11, "len": 11, "comma": [11, 15, 27], "separ": [11, 15, 27], "equival": 11, "listattribut": 11, "attribut": [11, 15, 22, 23, 27], "pair": 11, "edgea": 12, "edgeb": 12, "bracket": 12, "180": [12, 14, 26, 28], "decid": 12, "chosen": [12, 15, 24, 30], "intend": 12, "vertexa": [12, 15, 29, 30], "vertexb": [12, 15, 29], "closest": [12, 17, 29], "meet": [12, 27, 30], "sinc": 12, "made": [12, 17, 23, 26, 27], "equat": [12, 14, 24, 27, 29], "slope": 12, "inf": 12, "x_intercept": 12, "intercept": 12, "y_intercept": 12, "half": 12, "strict": [12, 29], "strictli": [12, 29], "ident": [12, 15, 27, 29], "comparison": [12, 29], "comput": [12, 14, 15, 22, 23, 26, 27, 28, 29, 30], "necessarili": 12, "fall": 12, "extent": 12, "parallel": [12, 14, 15, 27, 28, 30], "gaoxipeng": [12, 14, 24, 30], "coplanar": [12, 14, 24, 27, 30], "perpendicular": [12, 14, 28, 29, 30], "midpoint": 12, "useendvertex": 12, "symmetr": 12, "preserv": [12, 29], "byosmfil": 13, "osm": 13, "openstudiomodelcor": 13, "osmodel": 13, "read": [13, 15, 26, 27], "isnul": 13, "null": 13, "shadingsurfac": 13, "osmodelpath": 13, "weatherfilepath": 13, "designdayfilepath": 13, "floorlevel": [13, 15], "buildingnam": [13, 18], "topologicbuild": 13, "buildingtyp": 13, "northaxi": 13, "glazingratio": 13, "coolingtemp": 13, "heatingtemp": 13, "defaultspacetyp": 13, "189": 13, "2009": 13, "offic": [13, 18], "wholebuild": 13, "lg": 13, "cz4": 13, "spacenamekei": 13, "topologic_nam": [13, 18], "spacetypekei": 13, "topologic_typ": [13, 18], "shade": [13, 18], "asset": 13, "osmtempl": 13, "officebuild": 13, "weather": 13, "epw": 13, "gbr_london": 13, "gatwick": 13, "037760_iwec": 13, "dai": [13, 26], "ddy": 13, "floor": [13, 15], "lowest": [13, 15, 17], "find": [13, 14, 15, 20, 27, 29, 30], "appli": [13, 14, 19, 23, 27, 30], "assign": [13, 15, 27], "counter": [13, 14, 22, 28, 29], "clockwis": [13, 14, 22, 27, 28, 29, 30], "glaze": 13, "window": [13, 15, 27], "exterior": [13, 14, 15, 24, 30], "temperatur": 13, "cool": [13, 18], "system": 13, "activ": 13, "heat": [13, 18], "tabl": 13, "construct": [13, 18], "schedul": 13, "export": [13, 15, 18, 20, 21, 27], "gbxml": 13, "written": [13, 15], "successfulli": [13, 15], "hvacsizingsummari": 13, "reportforstr": 13, "facil": 13, "zone": 13, "sensibl": 13, "calcul": [13, 14, 15, 27, 28], "row": [13, 15, 17], "osbinarypath": 13, "outputfold": 13, "removefil": 13, "binari": 13, "sql": 13, "shadingfac": 13, "hole": [14, 15, 22, 24], "facea": 14, "faceb": 14, "zrot": [14, 27, 30], "becom": [14, 27, 30], "so": [14, 17, 22, 27, 29, 30], "reduc": [14, 27, 30], "offsetkei": [14, 30], "stepoffseta": [14, 30], "stepoffsetb": [14, 30], "stepoffsetkeya": [14, 30], "stepoffsetkeyb": [14, 30], "bisector": [14, 30], "interior": [14, 24, 30], "anti": [14, 28, 30], "previou": [14, 20, 30], "transit": [14, 24, 30], "seam": [14, 30], "rather": [14, 15], "offseta": [14, 24, 30], "offsetb": [14, 24, 30], "internalboundariesclust": 14, "fromangl": [14, 24, 30], "toangl": [14, 24, 30], "360": [14, 24, 27, 30], "upperleft": [14, 30], "lowerright": [14, 30], "upperright": [14, 30], "compactness_measure_of_a_shap": [14, 24], "compass": [14, 26, 28], "fashion": [14, 28, 29, 30], "aperiod": [14, 30], "monotil": [14, 30], "call": [14, 15, 29, 30], "tile": [14, 30], "german": [14, 30], "famou": [14, 30], "physicist": [14, 30], "arxiv": [14, 30], "2303": [14, 30], "10798": [14, 30], "hexagon": [14, 30], "inputmod": [14, 30], "866025": [14, 30], "eccentr": [14, 30], "majoraxislength": [14, 30], "minoraxislength": [14, 30], "32": [14, 23, 24, 30], "includeinternalboundari": 14, "nest": [14, 15, 17, 27, 28], "270": [14, 28], "300": 14, "simpl": [14, 27], "those": [14, 15], "thu": [14, 15], "asvertex": 14, "toward": [14, 26, 28], "treat": [14, 15], "radiuskei": [14, 30], "round": [14, 23, 30], "corner": [14, 24, 30], "fillet_": [14, 30], "mechan": [14, 30], "90": [14, 27, 28], "mirror": [14, 30], "obstacl": [14, 15], "fov": 14, "viewpoint": [14, 15], "observ": 14, "convent": [14, 23, 28], "field": [14, 15, 22, 27], "field_of_view": 14, "accept": [14, 27], "resolut": 14, "externalvertic": 14, "internalvertic": 14, "toleavesonli": 14, "approxim": 14, "medial": 14, "medial_axi": 14, "solut": 14, "leaf": 14, "outputtyp": [14, 28, 29, 30], "xyz": [14, 19, 25, 27, 28, 29, 30], "subset": [14, 15, 23, 27, 30], "permut": [14, 19, 27, 28, 29, 30], "northangl": 14, "arrow": 14, "neg": [14, 23, 27, 28], "mass": [14, 27], "unto": [14, 24, 29, 30], "centroidof": 14, "coeffici": [14, 15], "receiv": [14, 15, 27, 29, 30], "dougla": [14, 24, 30], "peucker": [14, 24, 30], "algorthim": [14, 30], "ramer": [14, 24, 30], "e2": [14, 15, 24, 30], "93dougla": [14, 24, 30], "93peucker_algorithm": [14, 24, 30], "wassimj": [14, 15, 24, 30], "issu": [14, 24, 30], "35": [14, 24, 30], "shorter": [14, 17, 24, 30], "usual": [14, 27], "121": [14, 30], "hybrid": [14, 30], "factor": [14, 15, 19, 27, 30], "affect": [14, 15, 30], "radiusa": [14, 24, 30], "radiusb": [14, 24, 30], "rai": [14, 22, 30], "outer": [14, 24, 30], "widtha": [14, 30], "widthb": [14, 30], "75": [14, 16, 30], "mode": [14, 15, 27], "meshsiz": [14, 27], "classic": [14, 23, 27], "meshadapt": [14, 27], "frontal": [14, 27], "bamg": [14, 27], "fontal": [14, 27], "quad": [14, 15, 27], "pack": [14, 27], "parallelogram": [14, 27], "gmsh": [14, 27], "info": [14, 27], "texinfo": [14, 27], "veri": [14, 27], "consum": [14, 27], "overal": [14, 27], "triangl": 14, "effect": 14, "uv": 14, "transfervertexdictionari": 15, "transferedgedictionari": 15, "vertexlabelkei": [15, 21, 27], "edgekei": 15, "adjac": [15, 27], "weight": [15, 23], "vertexkei": 15, "adjacency_list": 15, "edgekeyfwd": 15, "edgekeybwd": 15, "bidirkei": 15, "bidirect": [15, 20], "useedgeindex": 15, "useedgelength": 15, "adjacency_matrix": 15, "forward": 15, "overrid": 15, "backward": 15, "suppos": 15, "bidrect": 15, "bidirekei": 15, "timelimit": 15, "limit": [15, 21, 27], "clustering_coeffici": 15, "includeattribut": 15, "includelabel": 15, "includegeometri": 15, "sitelabel": 15, "site_0001": 15, "sitedictionari": 15, "buildinglabel": 15, "building_0001": 15, "buildingdictionari": 15, "storeyprefix": 15, "storei": 15, "typekei": [15, 27], "verticeskei": 15, "edgeskei": 15, "edgelabelkei": [15, 21, 27], "sourcekei": 15, "targetkei": 15, "xkei": 15, "hasx": 15, "ykei": 15, "hasi": 15, "zkei": 15, "hasz": 15, "geometrykei": 15, "walltyp": 15, "slabtyp": 15, "doortyp": 15, "door": 15, "windowtyp": 15, "contenttyp": 15, "namespac": [15, 27], "resourc": [15, 27], "rdf": 15, "bot": 15, "ontologi": 15, "w3c": 15, "lbd": 15, "cg": 15, "wherev": 15, "out": [15, 17, 23, 27], "site": 15, "prefix": 15, "vertex_xxxx": 15, "xxxx": 15, "sequenti": [15, 23], "uniqu": [15, 17], "forc": [15, 17], "edge_xxxx": 15, "look": [15, 20], "rdflib": 15, "turtl": 15, "thde": 15, "ttl": 15, "turtle2": 15, "linebreak": 15, "xml": 15, "pretti": 15, "ld": 15, "There": 15, "further": 15, "syntax": 15, "variant": [15, 27], "ntripl": 15, "nt": 15, "nt11": 15, "n": [15, 17, 29, 30], "tripl": 15, "exactli": [15, 29], "utf8": 15, "n3": 15, "notat": 15, "superset": 15, "cater": 15, "rule": 15, "few": 15, "thing": 15, "trig": 15, "multipl": [15, 19, 27], "trix": 15, "nquad": 15, "destin": 15, "betweeness_centr": 15, "betwe": 15, "central": 15, "betweenness_centr": 15, "betweneess_centr": 15, "xmin": 15, "ymin": 15, "zmin": 15, "xmax": 15, "ymax": 15, "zmax": 15, "schema": 15, "includecontext": 15, "graphidhead": 15, "graph_id": 15, "graphlabelhead": [15, 23], "graphfeatureshead": 15, "feat": [15, 23], "graphfeatureskei": 15, "edgesrchead": 15, "src_id": 15, "edgedsthead": 15, "dst_id": 15, "edgelabelhead": 15, "edgetrainmaskhead": 15, "train_mask": 15, "edgevalidatemaskhead": 15, "val_mask": 15, "edgetestmaskhead": 15, "test_mask": 15, "edgefeatureshead": 15, "edgefeatureskei": 15, "nodeidhead": 15, "node_id": 15, "nodelabelhead": 15, "nodetrainmaskhead": 15, "nodevalidatemaskhead": 15, "nodetestmaskhead": 15, "nodefeatureshead": 15, "nodexhead": 15, "nodeyhead": 15, "nodezhead": 15, "nodefeatureskei": 15, "yaml": 15, "header": 15, "mask": [15, 23], "dgcnn": 15, "includetyp": [15, 27], "excludetyp": [15, 27], "includerel": 15, "excluderel": 15, "partial": 15, "bruno": 15, "postl": 15, "exclud": [15, 27], "vertexdictionari": 15, "edgedictionari": 15, "indic": [15, 17, 23, 27], "signifi": 15, "directapertur": 15, "viasharedtopologi": 15, "viasharedapertur": 15, "toexteriortopologi": 15, "toexteriorapertur": 15, "tocont": 15, "tooutpost": 15, "idkei": 15, "topologic_id": 15, "outpostskei": 15, "outpost": 15, "useinternalvertex": 15, "storebrep": 15, "graph_": 15, "discrete_mathemat": 15, "directli": 15, "via": 15, "maxcolor": 15, "chromat": 15, "graph_color": 15, "against": [15, 21, 27], "closeness_centr": 15, "oldkei": 15, "write": 15, "verticesa": [15, 27], "verticesb": [15, 27], "ther": [15, 27], "contract": 15, "replac": [15, 27, 29], "edge_contract": 15, "topollog": 15, "degree_": [15, 29], "graph_theori": [15, 29], "aggreg": 15, "retriev": [15, 27, 29], "sequenc": 15, "mathworld": 15, "wolfram": 15, "dense_graph": 15, "depth": [15, 27], "map": [15, 30], "www": 15, "spacesyntax": 15, "onlin": 15, "overview": [15, 27], "analysi": [15, 27], "graphdiamet": 15, "shortest": [15, 17], "distance_": 15, "restrict": [15, 27], "graphlabel": 15, "graphfeatur": 15, "defaultedgelabel": 15, "edgemaskkei": 15, "edgetrainratio": 15, "edgevalidateratio": 15, "edgetestratio": 15, "nodelabelkei": 15, "defaultnodelabel": 15, "nodemaskkei": 15, "nodetrainratio": 15, "nodevalidateratio": 15, "nodetestratio": 15, "contin": 15, "456": 15, "011": 15, "56": 15, "defauli": 15, "dicitonari": 15, "categori": [15, 21, 23], "foud": 15, "graphwidth": 15, "graphlength": 15, "graphheight": 15, "defaultvertexcolor": 15, "black": [15, 21, 27], "defaultvertexs": 15, "vertexcolorkei": 15, "vertexsizekei": 15, "defaultedgecolor": 15, "defaultedgeweight": 15, "defaultedgetyp": 15, "undirect": 15, "edgecolorkei": 15, "edgeweightkei": 15, "exchang": 15, "gexf": 15, "indent": 15, "sortkei": 15, "ouptut": [15, 21, 27], "oper": [15, 18, 21, 27], "success": [15, 18, 21, 27], "unsucces": [15, 27], "layout": 15, "seed": [15, 23], "50": [15, 21, 23, 27, 30], "rootvertex": 15, "fruchterman": 15, "reingold": 15, "distribut": 15, "radial": 15, "tillford": 15, "constant": [15, 24], "attract": 15, "repuls": 15, "solv": 15, "root": [15, 23], "global": 15, "incom": [15, 29], "coincid": [15, 29], "unidrect": 15, "bipartit": 15, "bipartite_graph": 15, "complete_graph": 15, "satisfi": 15, "erd\u0151": 15, "gallai": 15, "theorem": 15, "erd": 15, "c5": 15, "93gallai_theorem": 15, "isol": 15, "lcc": 15, "costkei": 15, "longest": 15, "maxim": [15, 23], "longest_path": 15, "delta": 15, "residualkei": 15, "residu": 15, "maximum_flow_problem": 15, "capac": 15, "whole": 15, "span": 15, "minimum_spanning_tre": 15, "numwork": [15, 27], "navig": 15, "clip": [15, 16, 24], "veritc": 15, "worker": [15, 27], "twice": [15, 27], "cpu": [15, 27], "networkx": 15, "outgo": [15, 29], "85": 15, "page_rank": 15, "damp": 15, "dampen": 15, "rank": [15, 21, 27], "backgroundcolor": [15, 21, 23, 27], "white": [15, 27], "fontcolor": 15, "vertexs": [15, 21, 27], "vertexcolor": [15, 21, 27], "vertexgroupkei": [15, 21, 27], "vertexgroup": [15, 21, 27], "minvertexgroup": 15, "maxvertexgroup": 15, "edgeweight": 15, "showneighbour": 15, "selectmenu": 15, "filtermenu": 15, "pyvi": 15, "background": [15, 21, 23, 27], "font": 15, "bug": 15, "deriv": 15, "neighbor": 15, "hi": 15, "group": [15, 21, 27], "help": 15, "showneighbor": 15, "shown": [15, 21, 27], "hover": 15, "menu": 15, "inlin": 15, "browser": [15, 21], "tab": [15, 27], "consider": 15, "whatev": 15, "minimis": 15, "pathlimit": 15, "showvertic": [15, 21, 27], "showvertexlabel": [15, 21], "showvertexlegend": [15, 21, 27], "edgecolor": [15, 21, 27], "edgewidth": [15, 21, 27], "edgegroupkei": [15, 21, 27], "edgegroup": [15, 21, 27], "showedg": [15, 21, 27], "showedgelabel": [15, 21], "showedgelegend": [15, 21, 27], "950": [15, 21, 23, 27], "500": [15, 21, 23, 27], "axiss": [15, 21, 27], "rgba": [15, 21, 23, 27], "marginleft": [15, 21, 23, 27], "marginright": [15, 21, 23, 27], "margintop": [15, 21, 23, 27], "marginbottom": [15, 21, 23, 27], "camera": [15, 21, 27], "perspect": [15, 21, 27], "ff0000": [15, 21, 23, 27], "255": [15, 21, 23, 27], "hsl": [15, 21, 23, 27], "hsla": [15, 21, 23, 27], "hsv": [15, 21, 23, 27], "hsva": [15, 21, 23, 27], "drawn": [15, 21, 27], "permenant": [15, 21], "screen": [15, 21, 27], "legend": [15, 21, 27], "discov": [15, 21, 27], "suitabl": [15, 21, 27], "margin": [15, 21, 23, 27], "right": [15, 17, 21, 23, 24, 27], "orthograph": [15, 21, 27], "viewpointsa": 15, "viewpointsb": 15, "visibl": 15, "alia": [15, 22, 27], "message_queu": [15, 27], "authkei": [15, 27], "daemon": [15, 27], "whether": [15, 23, 27], "exitcod": [15, 27], "exit": [15, 27], "yet": [15, 27], "identifi": [15, 16, 18, 21, 27], "pid": [15, 27], "sentinel": [15, 27], "descriptor": [15, 27], "unix": [15, 27], "handl": [15, 27], "wait": [15, 27], "termin": [15, 27], "start_index": 15, "sub": [15, 27, 29], "overridden": [15, 27], "num_work": [15, 27], "uorigin": 16, "vorigin": 16, "urang": 16, "vrang": 16, "paratm": 16, "dir": 16, "lista": 17, "best": [17, 21], "sublist": 17, "member": 17, "fill": 17, "extra": 17, "m": 17, "o": 17, "p": [17, 22], "yield": 17, "duplic": [17, 29], "ascend": 17, "would": 17, "insert": 17, "otherlist": 17, "reverseflag": 17, "subsequ": 17, "lastli": 17, "larg": [17, 23], "particular": 17, "swap": 17, "softwar": [17, 28], "built": 18, "hbconstructionset": 18, "hb": 18, "hbmodel": 18, "tpbuild": 18, "tpshadingfacesclust": 18, "generic_build": 18, "defaultprogramidentifi": 18, "gener": [18, 27], "defaultconstructionsetidentifi": 18, "coolingsetpoint": 18, "heatingsetpoint": 18, "humidifyingsetpoint": 18, "dehumidifyingsetpoint": 18, "55": 18, "roomnamekei": 18, "roomtypekei": 18, "aperturetypekei": 18, "addsensorgrid": 18, "tpshadingfaceclust": 18, "hvac": 18, "celsiu": 18, "humidifi": 18, "percentag": 18, "room": 18, "sensor": 18, "identifii": 18, "hbprogram": 18, "mata": 19, "matb": 19, "matric": 19, "anglex": 19, "anglei": 19, "anglez": 19, "4x4": [19, 27], "roatat": 19, "scalex": 19, "scalei": 19, "scalez": 19, "translatex": 19, "translatei": 19, "translatez": 19, "neo4jgraph": 20, "labelkei": 20, "relationshipkei": 20, "usernam": 20, "password": 20, "server": 20, "log": [20, 23], "delet": [20, 27], "newo4j": 20, "cypher": 20, "subgraph": 20, "topologicgraphvertex": 20, "bi": 20, "drection": 20, "ntick": 21, "xposit": 21, "outlinewidth": 21, "subtitl": [21, 27], "bar": [21, 23, 27], "graph_obj": 21, "_figur": 21, "tick": [21, 27], "outlin": [21, 27], "blind": 21, "friendli": 21, "These": [21, 26], "protanopia": 21, "deuteranopia": 21, "tritanopia": 21, "colorblind": 21, "respect": [21, 23, 27], "frame": [21, 27], "datafram": 21, "pd": 21, "vertexmingroup": [21, 27], "vertexmaxgroup": [21, 27], "vertexlegendlabel": [21, 27], "vertexlegendrank": [21, 27], "vertexlegendgroup": [21, 27], "edgemingroup": [21, 27], "edgemaxgroup": [21, 27], "edgelegendlabel": [21, 27], "edgelegendrank": [21, 27], "edgelegendgroup": [21, 27], "showfac": [21, 27], "faceopac": [21, 27], "facecolor": [21, 27], "fafafa": [21, 27], "facelabelkei": [21, 27], "facegroupkei": [21, 27], "facegroup": [21, 27], "facemingroup": [21, 27], "facemaxgroup": [21, 27], "showfacelegend": [21, 27], "facelegendlabel": [21, 27], "facelegendrank": [21, 27], "facelegendgroup": [21, 27], "intensitykei": [21, 27], "intens": [21, 27, 29], "isn": [21, 27], "opac": [21, 27], "bhave": [21, 27], "mingroup": [21, 27], "maxgroup": [21, 27], "idenitfi": [21, 27], "png": 21, "1920": 21, "1080": 21, "imag": [21, 22], "jpg": 21, "jpeg": 21, "pdf": 21, "svg": 21, "webp": 21, "sucessfulli": 21, "xtitl": [21, 23], "ytitl": [21, 23], "showscal": [21, 27], "40": [21, 23], "arrai": [21, 27], "minmum": 21, "correl": 21, "dotcolor": 21, "linecolor": 21, "800": 21, "theme": 21, "scheme": 21, "dark": 21, "light": 21, "xspace": [21, 23], "yspace": [21, 23], "usemark": [21, 23], "charttyp": [21, 23], "gridcolor": [21, 23], "lightgrai": [21, 23], "df": 21, "data_label": 21, "chart": [21, 23], "marker": [21, 23], "xcategori": 21, "ycategori": 21, "grai": 21, "cbvalu": [21, 27], "cbtick": [21, 27], "cbx": [21, 27], "cbwidth": [21, 27], "cboutlinewidth": [21, 27], "cbtitl": [21, 27], "cbsubtitl": [21, 27], "cbunit": [21, 27], "colorbar": [21, 27], "1200": 21, "environ": 21, "vscode": 21, "studio": 21, "colab": 21, "googl": 21, "ifram": 21, "jupyterlab": 21, "anyth": 21, "kwarg": [22, 29], "p1": 22, "p2": 22, "polygon": 22, "contour": [22, 30], "goe": 22, "downward": 22, "far": 22, "concern": 22, "accordingli": 22, "data_list": 23, "node_level": 23, "graph_level": 23, "node_attr_kei": 23, "edge_attr_kei": 23, "has_download": 23, "download": 23, "has_process": 23, "num_class": 23, "num_edge_featur": 23, "per": 23, "num_featur": 23, "num_node_featur": 23, "processed_dir": 23, "processed_file_nam": 23, "skip": 23, "processed_path": 23, "filepath": 23, "raw_dir": 23, "raw_file_nam": 23, "raw_path": 23, "correct": 23, "wrong": 23, "proport": 23, "numberofgraphclass": 23, "nodeattrkei": 23, "edgeattrkei": 23, "nodeonehotencod": 23, "nodefeaturescategori": 23, "edgeonehotencod": 23, "edgefeaturescategori": 23, "addselfloop": 23, "pytorch": 23, "meta": 23, "customdataset": 23, "model_typ": 23, "cv_type": 23, "hl_width": 23, "conv_layer_typ": 23, "sageconv": 23, "pool": 23, "avgpool": 23, "use_gpu": 23, "loss_funct": 23, "entropi": 23, "input_typ": 23, "regressor": 23, "classifierholdout": 23, "neuron": 23, "convolut": 23, "graphconv": 23, "ginconv": 23, "tagconv": 23, "dgn": 23, "maxpool": 23, "sumpool": 23, "gpu": 23, "likelihood": 23, "hparam": 23, "trainingdataset": 23, "validationdataset": 23, "testingdataset": 23, "portion": 23, "hyper": 23, "pygdataset": 23, "probabl": 23, "cv": 23, "hl": 23, "conv": 23, "max": 23, "min": 23, "torch": 23, "nn": 23, "instanc": [23, 27], "adam": 23, "amsgrad": 23, "beta": 23, "999": 23, "ep": 23, "1e": 23, "06": [23, 29], "lr": 23, "weightdecai": 23, "rho": 23, "lr_decai": 23, "extens": 23, "converg": 23, "properti": 23, "avoid": 23, "abrupt": 23, "chang": 23, "smooth": 23, "some": 23, "momentum": 23, "minima": 23, "saddl": 23, "term": 23, "denomin": 23, "stabil": 23, "000001": 23, "adjust": 23, "our": 23, "param": 23, "l2": 23, "penalti": 23, "regular": 23, "techniqu": 23, "mape": 23, "r2": 23, "rmse": 23, "plolti": 23, "maximumgap": 24, "mergejunct": 24, "disjoint": 24, "still": 24, "experiment": [24, 27], "resembl": 24, "ribbon": 24, "touch": 24, "gap": 24, "junction": 24, "diagon": 24, "resolv": 24, "subdivid": 24, "aid": 24, "36": [24, 26, 30], "ring": [24, 26], "hyperbol": 24, "circular": 24, "domain": 24, "parabolid": 24, "concentr": 24, "llvertex": 24, "lrvertex": 24, "ulvertex": 24, "urvertex": 24, "rectangular": 24, "lower": 24, "upper": 24, "On": 24, "inner": 24, "optioal": [24, 30], "simplifyboundari": 24, "optimis": 24, "client": 25, "stream": 25, "token": 25, "commit_list": 25, "commit_id": 25, "commit": 25, "branch_list": 25, "branch_id": 25, "confirm": 25, "stream_list": 25, "stream_id": 25, "date": [26, 27], "datetim": 26, "autumn": 26, "equinox": 26, "september_equinox": 26, "summer": 26, "solstic": 26, "minuteinterv": 26, "dayinterv": 26, "hyperfinearchitectur": 26, "how": [26, 28], "minut": 26, "hourli": 26, "world": [26, 27], "orbit": 26, "othwerwis": [26, 27, 30], "incldu": 26, "date_path": 26, "winter": 26, "hourly_path": 26, "hour": 26, "ground": 26, "starttim": 26, "endtim": 26, "equal": [26, 27, 30], "startdai": 26, "enddai": 26, "365": 26, "vernal": 26, "march_equinox": 26, "summer_solstic": 26, "winter_solstic": 26, "so_dict": 27, "exclus": [27, 29], "subtopologytyp": 27, "seem": 27, "subtpologi": 27, "hosttopologi": [27, 29], "topologytyp": [27, 29], "host": [27, 29], "topologya": 27, "topologyb": 27, "trandict": 27, "execut": 27, "operand": 27, "boolean_oper": 27, "xrot": 27, "yrot": 27, "substr": [27, 28, 29], "sensit": 27, "guidkei": 27, "colorkei": 27, "defaultcolor": 27, "defaulttyp": 27, "authorkei": 27, "datekei": 27, "dotbimpi": 27, "dotbim": 27, "creation": 27, "dd": 27, "mm": 27, "yyyi": 27, "carri": 27, "dxf": 27, "capabl": 27, "spline": 27, "lengthunit": 27, "meter": 27, "outputmod": 27, "l": 27, "uuid4": 27, "topologic_": 27, "topology_typ": 27, "record": 27, "progressbar": 27, "tqdm": 27, "progress": 27, "objfil": 27, "mtlfile": 27, "defaultopac": 27, "transposeax": 27, "materi": 27, "basic": 27, "textur": 27, "mtl": 27, "remain": 27, "objpath": 27, "mtlstring": 27, "occt": 27, "dev": 27, "opencascad": 27, "occt_user_guides__modeling_data": 27, "topods_shap": 27, "inoput": 27, "frameidkei": 27, "vertexidkei": 27, "conform": 27, "sepat": 27, "No": [27, 30], "word": 27, "charact": 27, "text": 27, "vertex_label": 27, "67": 27, "61": 27, "47": 27, "93": 27, "22": 27, "center_of_mass": 27, "clean": 27, "memori": 27, "consumpt": 27, "WITH": 27, "care": 27, "convex": [27, 30], "hull": [27, 30], "deep": 27, "slow": 27, "immedi": [27, 29], "addnestingdepth": 27, "tool": 27, "divis": 27, "typefilt": 27, "view_draw": 27, "explos": 27, "occt_brep_format": 27, "autocad_dxf": 27, "r2010": 27, "namekei": 27, "opacitykei": 27, "256": 27, "wavefront": 27, "searchtyp": 27, "did": 27, "criteria": 27, "ptional": 27, "nonplanar": 27, "border": 27, "dira": 27, "dirb": 27, "origina": 27, "originb": 27, "old": 27, "movement": 27, "contentlist": 27, "rebuild": 27, "roll": 27, "pitch": 27, "yaw": 27, "euler": 27, "aircraft_principal_ax": 27, "quaternion": 27, "timestamp": 27, "unsort": 27, "solid_of_revolut": 27, "spun": 27, "request": 27, "ratiorang": 27, "linear": 27, "inward": 27, "outward": 27, "traingul": 27, "move": 27, "tranvertic": 27, "tranedg": 27, "tranfac": 27, "trancel": 27, "caus": 27, "toplogi": 27, "topologgi": 27, "triangular": 27, "anglerang": 27, "could": [27, 28, 29], "v5": 27, "namescap": 27, "3dviewer": 27, "themselv": 27, "vectora": 28, "vectorb": 28, "abov": 28, "coodin": 28, "much": 28, "therefor": 28, "blender": 28, "least": [29, 30], "counterclockwis": 29, "includecentroid": 29, "enclos": 29, "trivial": 29, "itself": 29, "retain": 29, "nearli": 29, "closer": 29, "howev": 29, "now": 29, "modifi": 29, "hold": 29, "peripher": 29, "said": 29, "02": 29, "03": 29, "04": 29, "05": [29, 30], "07": 29, "08": 29, "09": 29, "usekdtre": 29, "kdtree": 29, "infinit": 29, "pass": 29, "cz": 29, "middlevertex": 30, "chord": 30, "head": 30, "tail": 30, "maxvertic": 30, "circuit": 30, "foci": 30, "yidan": 30, "xue": 30, "wirea": 30, "wireb": 30, "intermedi": 30, "raster": 30, "zigzag": 30, "toolpath": 30, "similar": 30, "turn": 30, "final": 30, "increas": 30, "circumfer": 30, "confer": 30}, "objects": {"": [[2, 0, 0, "-", "topologicpy"]], "topologicpy": [[3, 0, 0, "-", "ANN"], [4, 0, 0, "-", "Aperture"], [5, 0, 0, "-", "Cell"], [6, 0, 0, "-", "CellComplex"], [7, 0, 0, "-", "Cluster"], [8, 0, 0, "-", "Color"], [9, 0, 0, "-", "Context"], [11, 0, 0, "-", "Dictionary"], [12, 0, 0, "-", "Edge"], [13, 0, 0, "-", "EnergyModel"], [14, 0, 0, "-", "Face"], [15, 0, 0, "-", "Graph"], [16, 0, 0, "-", "Grid"], [17, 0, 0, "-", "Helper"], [18, 0, 0, "-", "Honeybee"], [19, 0, 0, "-", "Matrix"], [20, 0, 0, "-", "Neo4j"], [21, 0, 0, "-", "Plotly"], [22, 0, 0, "-", "Polyskel"], [23, 0, 0, "-", "PyG"], [24, 0, 0, "-", "Shell"], [25, 0, 0, "-", "Speckle"], [26, 0, 0, "-", "Sun"], [27, 0, 0, "-", "Topology"], [28, 0, 0, "-", "Vector"], [29, 0, 0, "-", "Vertex"], [30, 0, 0, "-", "Wire"], [31, 0, 0, "-", "version"]], "topologicpy.ANN": [[3, 1, 1, "", "ANN"]], "topologicpy.ANN.ANN": [[3, 2, 1, "", "DatasetByCSVPath"], [3, 2, 1, "", "DatasetBySampleName"], [3, 2, 1, "", "DatasetSampleNames"], [3, 2, 1, "", "DatasetSplit"], [3, 2, 1, "", "Figures"], [3, 2, 1, "", "Hyperparameters"], [3, 2, 1, "", "HyperparametersBySampleName"], [3, 2, 1, "", "Initialize"], [3, 2, 1, "", "Load"], [3, 2, 1, "", "Metrics"], [3, 2, 1, "", "ModelData"], [3, 2, 1, "", "Save"], [3, 2, 1, "", "Test"], [3, 2, 1, "", "Train"]], "topologicpy.Aperture": [[4, 1, 1, "", "Aperture"]], "topologicpy.Aperture.Aperture": [[4, 2, 1, "", "ByTopologyContext"], [4, 2, 1, "", "Topology"]], "topologicpy.Cell": [[5, 1, 1, "", "Cell"]], "topologicpy.Cell.Cell": [[5, 2, 1, "", "Area"], [5, 2, 1, "", "Box"], [5, 2, 1, "", "ByFaces"], [5, 2, 1, "", "ByOffset"], [5, 2, 1, "", "ByShell"], [5, 2, 1, "", "ByShells"], [5, 2, 1, "", "ByThickenedFace"], [5, 2, 1, "", "ByThickenedShell"], [5, 2, 1, "", "ByWires"], [5, 2, 1, "", "ByWiresCluster"], [5, 2, 1, "", "Capsule"], [5, 2, 1, "", "Compactness"], [5, 2, 1, "", "Cone"], [5, 2, 1, "", "ContainmentStatus"], [5, 2, 1, "", "Cylinder"], [5, 2, 1, "", "Decompose"], [5, 2, 1, "", "Dodecahedron"], [5, 2, 1, "", "Edges"], [5, 2, 1, "", "Egg"], [5, 2, 1, "", "ExternalBoundary"], [5, 2, 1, "", "Faces"], [5, 2, 1, "", "Hyperboloid"], [5, 2, 1, "", "Icosahedron"], [5, 2, 1, "", "InternalBoundaries"], [5, 2, 1, "", "InternalVertex"], [5, 2, 1, "", "IsOnBoundary"], [5, 2, 1, "", "Octahedron"], [5, 2, 1, "", "Paraboloid"], [5, 2, 1, "", "Pipe"], [5, 2, 1, "", "Prism"], [5, 2, 1, "", "RemoveCollinearEdges"], [5, 2, 1, "", "Roof"], [5, 2, 1, "", "Sets"], [5, 2, 1, "", "Shells"], [5, 2, 1, "", "Sphere"], [5, 2, 1, "", "SurfaceArea"], [5, 2, 1, "", "Tetrahedron"], [5, 2, 1, "", "Torus"], [5, 2, 1, "", "Vertices"], [5, 2, 1, "", "Volume"], [5, 2, 1, "", "Wires"]], "topologicpy.CellComplex": [[6, 1, 1, "", "CellComplex"]], "topologicpy.CellComplex.CellComplex": [[6, 2, 1, "", "Box"], [6, 2, 1, "", "ByCells"], [6, 2, 1, "", "ByCellsCluster"], [6, 2, 1, "", "ByFaces"], [6, 2, 1, "", "ByFacesCluster"], [6, 2, 1, "", "ByWires"], [6, 2, 1, "", "ByWiresCluster"], [6, 2, 1, "", "Cells"], [6, 2, 1, "", "Decompose"], [6, 2, 1, "", "Delaunay"], [6, 2, 1, "", "Edges"], [6, 2, 1, "", "ExternalBoundary"], [6, 2, 1, "", "ExternalFaces"], [6, 2, 1, "", "Faces"], [6, 2, 1, "", "InternalFaces"], [6, 2, 1, "", "NonManifoldFaces"], [6, 2, 1, "", "Octahedron"], [6, 2, 1, "", "Prism"], [6, 2, 1, "", "RemoveCollinearEdges"], [6, 2, 1, "", "Shells"], [6, 2, 1, "", "Vertices"], [6, 2, 1, "", "Volume"], [6, 2, 1, "", "Voronoi"], [6, 2, 1, "", "Wires"]], "topologicpy.Cluster": [[7, 1, 1, "", "Cluster"]], "topologicpy.Cluster.Cluster": [[7, 2, 1, "", "ByFormula"], [7, 2, 1, "", "ByTopologies"], [7, 2, 1, "", "CellComplexes"], [7, 2, 1, "", "Cells"], [7, 2, 1, "", "DBSCAN"], [7, 2, 1, "", "Edges"], [7, 2, 1, "", "Faces"], [7, 2, 1, "", "FreeCells"], [7, 2, 1, "", "FreeEdges"], [7, 2, 1, "", "FreeFaces"], [7, 2, 1, "", "FreeShells"], [7, 2, 1, "", "FreeTopologies"], [7, 2, 1, "", "FreeVertices"], [7, 2, 1, "", "FreeWires"], [7, 2, 1, "", "HighestType"], [7, 2, 1, "", "K_Means"], [7, 2, 1, "", "MergeCells"], [7, 2, 1, "", "MysticRose"], [7, 2, 1, "", "Shells"], [7, 2, 1, "", "Simplify"], [7, 2, 1, "", "Vertices"], [7, 2, 1, "", "Wires"]], "topologicpy.Color": [[8, 1, 1, "", "Color"]], "topologicpy.Color.Color": [[8, 2, 1, "", "ByCSSNamedColor"], [8, 2, 1, "", "ByHEX"], [8, 2, 1, "", "ByValueInRange"], [8, 2, 1, "", "CSSNamedColor"], [8, 2, 1, "", "CSSNamedColors"], [8, 2, 1, "", "PlotlyColor"], [8, 2, 1, "", "RGBToHex"]], "topologicpy.Context": [[9, 1, 1, "", "Context"]], "topologicpy.Context.Context": [[9, 2, 1, "", "ByTopologyParameters"], [9, 2, 1, "", "Topology"]], "topologicpy.Dictionary": [[11, 1, 1, "", "Dictionary"]], "topologicpy.Dictionary.Dictionary": [[11, 2, 1, "", "ByKeyValue"], [11, 2, 1, "", "ByKeysValues"], [11, 2, 1, "", "ByMergedDictionaries"], [11, 2, 1, "", "ByPythonDictionary"], [11, 2, 1, "", "Keys"], [11, 2, 1, "", "ListAttributeValues"], [11, 2, 1, "", "PythonDictionary"], [11, 2, 1, "", "RemoveKey"], [11, 2, 1, "", "SetValueAtKey"], [11, 2, 1, "", "ValueAtKey"], [11, 2, 1, "", "Values"]], "topologicpy.Edge": [[12, 1, 1, "", "Edge"]], "topologicpy.Edge.Edge": [[12, 2, 1, "", "Angle"], [12, 2, 1, "", "Bisect"], [12, 2, 1, "", "ByFaceNormal"], [12, 2, 1, "", "ByOffset2D"], [12, 2, 1, "", "ByStartVertexEndVertex"], [12, 2, 1, "", "ByVertices"], [12, 2, 1, "", "ByVerticesCluster"], [12, 2, 1, "", "Connection"], [12, 2, 1, "", "Direction"], [12, 2, 1, "", "EndVertex"], [12, 2, 1, "", "Equation2D"], [12, 2, 1, "", "Extend"], [12, 2, 1, "", "ExtendToEdge"], [12, 2, 1, "", "ExternalBoundary"], [12, 2, 1, "", "Index"], [12, 2, 1, "", "Intersect2D"], [12, 2, 1, "", "IsCollinear"], [12, 2, 1, "", "IsCoplanar"], [12, 2, 1, "", "IsParallel"], [12, 2, 1, "", "Length"], [12, 2, 1, "", "Line"], [12, 2, 1, "", "Normal"], [12, 2, 1, "", "NormalEdge"], [12, 2, 1, "", "Normalize"], [12, 2, 1, "", "ParameterAtVertex"], [12, 2, 1, "", "Reverse"], [12, 2, 1, "", "SetLength"], [12, 2, 1, "", "StartVertex"], [12, 2, 1, "", "Trim"], [12, 2, 1, "", "TrimByEdge"], [12, 2, 1, "", "VertexByDistance"], [12, 2, 1, "", "VertexByParameter"], [12, 2, 1, "", "Vertices"]], "topologicpy.EnergyModel": [[13, 1, 1, "", "EnergyModel"]], "topologicpy.EnergyModel.EnergyModel": [[13, 2, 1, "", "ByOSMPath"], [13, 2, 1, "", "ByTopology"], [13, 2, 1, "", "ColumnNames"], [13, 2, 1, "", "DefaultConstructionSets"], [13, 2, 1, "", "DefaultScheduleSets"], [13, 2, 1, "", "ExportToGBXML"], [13, 2, 1, "", "ExportToOSM"], [13, 2, 1, "", "GBXMLString"], [13, 2, 1, "", "Query"], [13, 2, 1, "", "ReportNames"], [13, 2, 1, "", "RowNames"], [13, 2, 1, "", "Run"], [13, 2, 1, "", "SpaceColors"], [13, 2, 1, "", "SpaceDictionaries"], [13, 2, 1, "", "SpaceTypeNames"], [13, 2, 1, "", "SpaceTypes"], [13, 2, 1, "", "SqlFile"], [13, 2, 1, "", "TableNames"], [13, 2, 1, "", "Topologies"], [13, 2, 1, "", "Units"]], "topologicpy.Face": [[14, 1, 1, "", "Face"]], "topologicpy.Face.Face": [[14, 2, 1, "", "AddInternalBoundaries"], [14, 2, 1, "", "AddInternalBoundariesCluster"], [14, 2, 1, "", "Angle"], [14, 2, 1, "", "Area"], [14, 2, 1, "", "BoundingRectangle"], [14, 2, 1, "", "ByEdges"], [14, 2, 1, "", "ByEdgesCluster"], [14, 2, 1, "", "ByOffset"], [14, 2, 1, "", "ByShell"], [14, 2, 1, "", "ByThickenedWire"], [14, 2, 1, "", "ByVertices"], [14, 2, 1, "", "ByVerticesCluster"], [14, 2, 1, "", "ByWire"], [14, 2, 1, "", "ByWires"], [14, 2, 1, "", "ByWiresCluster"], [14, 2, 1, "", "Circle"], [14, 2, 1, "", "Compactness"], [14, 2, 1, "", "CompassAngle"], [14, 2, 1, "", "Edges"], [14, 2, 1, "", "Einstein"], [14, 2, 1, "", "Ellipse"], [14, 2, 1, "", "ExteriorAngles"], [14, 2, 1, "", "ExternalBoundary"], [14, 2, 1, "", "FacingToward"], [14, 2, 1, "", "Fillet"], [14, 2, 1, "", "Harmonize"], [14, 2, 1, "", "InteriorAngles"], [14, 2, 1, "", "InternalBoundaries"], [14, 2, 1, "", "InternalVertex"], [14, 2, 1, "", "Invert"], [14, 2, 1, "", "IsCoplanar"], [14, 2, 1, "", "Isovist"], [14, 2, 1, "", "MedialAxis"], [14, 2, 1, "", "Normal"], [14, 2, 1, "", "NormalEdge"], [14, 2, 1, "", "NorthArrow"], [14, 2, 1, "", "Planarize"], [14, 2, 1, "", "PlaneEquation"], [14, 2, 1, "", "Project"], [14, 2, 1, "", "Rectangle"], [14, 2, 1, "", "RectangleByPlaneEquation"], [14, 2, 1, "", "RemoveCollinearEdges"], [14, 2, 1, "", "Simplify"], [14, 2, 1, "", "Skeleton"], [14, 2, 1, "", "Square"], [14, 2, 1, "", "Squircle"], [14, 2, 1, "", "Star"], [14, 2, 1, "", "Trapezoid"], [14, 2, 1, "", "Triangulate"], [14, 2, 1, "", "TrimByWire"], [14, 2, 1, "", "VertexByParameters"], [14, 2, 1, "", "VertexParameters"], [14, 2, 1, "", "Vertices"], [14, 2, 1, "", "Wire"], [14, 2, 1, "", "Wires"]], "topologicpy.Graph": [[15, 1, 1, "", "Graph"], [15, 1, 1, "", "GraphQueueItem"], [15, 1, 1, "", "MergingProcess"], [15, 1, 1, "", "WorkerProcess"], [15, 1, 1, "", "WorkerProcessPool"]], "topologicpy.Graph.Graph": [[15, 2, 1, "", "AddEdge"], [15, 2, 1, "", "AddVertex"], [15, 2, 1, "", "AddVertices"], [15, 2, 1, "", "AdjacencyDictionary"], [15, 2, 1, "", "AdjacencyList"], [15, 2, 1, "", "AdjacencyMatrix"], [15, 2, 1, "", "AdjacentVertices"], [15, 2, 1, "", "AllPaths"], [15, 2, 1, "", "AverageClusteringCoefficient"], [15, 2, 1, "", "BOTGraph"], [15, 2, 1, "", "BOTString"], [15, 2, 1, "", "BetweenessCentrality"], [15, 2, 1, "", "ByAdjacencyMatrix"], [15, 2, 1, "", "ByAdjacencyMatrixCSVPath"], [15, 2, 1, "", "ByBOTGraph"], [15, 2, 1, "", "ByBOTPath"], [15, 2, 1, "", "ByCSVPath"], [15, 2, 1, "", "ByDGCNNFile"], [15, 2, 1, "", "ByDGCNNPath"], [15, 2, 1, "", "ByDGCNNString"], [15, 2, 1, "", "ByIFCFile"], [15, 2, 1, "", "ByIFCPath"], [15, 2, 1, "", "ByMeshData"], [15, 2, 1, "", "ByTopology"], [15, 2, 1, "", "ByVerticesEdges"], [15, 2, 1, "", "ChromaticNumber"], [15, 2, 1, "", "ClosenessCentrality"], [15, 2, 1, "", "Color"], [15, 2, 1, "", "Connect"], [15, 2, 1, "", "ContainsEdge"], [15, 2, 1, "", "ContainsVertex"], [15, 2, 1, "", "ContractEdge"], [15, 2, 1, "", "Degree"], [15, 2, 1, "", "DegreeSequence"], [15, 2, 1, "", "Density"], [15, 2, 1, "", "DepthMap"], [15, 2, 1, "", "Diameter"], [15, 2, 1, "", "Dictionary"], [15, 2, 1, "", "Distance"], [15, 2, 1, "", "Edge"], [15, 2, 1, "", "Edges"], [15, 2, 1, "", "ExportToAdjacencyMatrixCSV"], [15, 2, 1, "", "ExportToBOT"], [15, 2, 1, "", "ExportToCSV"], [15, 2, 1, "", "ExportToGEXF"], [15, 2, 1, "", "ExportToJSON"], [15, 2, 1, "", "Flatten"], [15, 2, 1, "", "GlobalClusteringCoefficient"], [15, 2, 1, "", "Guid"], [15, 2, 1, "", "IncomingEdges"], [15, 2, 1, "", "IncomingVertices"], [15, 2, 1, "", "IsBipartite"], [15, 2, 1, "", "IsComplete"], [15, 2, 1, "", "IsErdoesGallai"], [15, 2, 1, "", "IsolatedVertices"], [15, 2, 1, "", "JSONData"], [15, 2, 1, "", "JSONString"], [15, 2, 1, "", "LocalClusteringCoefficient"], [15, 2, 1, "", "LongestPath"], [15, 2, 1, "", "MaximumDelta"], [15, 2, 1, "", "MaximumFlow"], [15, 2, 1, "", "MeshData"], [15, 2, 1, "", "MetricDistance"], [15, 2, 1, "", "MinimumDelta"], [15, 2, 1, "", "MinimumSpanningTree"], [15, 2, 1, "", "NavigationGraph"], [15, 2, 1, "", "NearestVertex"], [15, 2, 1, "", "NetworkXGraph"], [15, 2, 1, "", "Order"], [15, 2, 1, "", "OutgoingEdges"], [15, 2, 1, "", "OutgoingVertices"], [15, 2, 1, "", "PageRank"], [15, 2, 1, "", "Path"], [15, 2, 1, "", "PyvisGraph"], [15, 2, 1, "", "RemoveEdge"], [15, 2, 1, "", "RemoveVertex"], [15, 2, 1, "", "SetDictionary"], [15, 2, 1, "", "ShortestPath"], [15, 2, 1, "", "ShortestPaths"], [15, 2, 1, "", "Show"], [15, 2, 1, "", "Size"], [15, 2, 1, "", "TopologicalDistance"], [15, 2, 1, "", "Topology"], [15, 2, 1, "", "Tree"], [15, 2, 1, "", "VertexDegree"], [15, 2, 1, "", "Vertices"], [15, 2, 1, "", "VisibilityGraph"]], "topologicpy.Graph.GraphQueueItem": [[15, 3, 1, "", "edges"]], "topologicpy.Graph.MergingProcess": [[15, 2, 1, "", "wait_message"]], "topologicpy.Graph.WorkerProcess": [[15, 2, 1, "", "run"]], "topologicpy.Graph.WorkerProcessPool": [[15, 2, 1, "", "join"], [15, 2, 1, "", "startProcesses"], [15, 2, 1, "", "stopProcesses"]], "topologicpy.Grid": [[16, 1, 1, "", "Grid"]], "topologicpy.Grid.Grid": [[16, 2, 1, "", "EdgesByDistances"], [16, 2, 1, "", "EdgesByParameters"], [16, 2, 1, "", "VerticesByDistances"], [16, 2, 1, "", "VerticesByParameters"]], "topologicpy.Helper": [[17, 1, 1, "", "Helper"]], "topologicpy.Helper.Helper": [[17, 2, 1, "", "ClosestMatch"], [17, 2, 1, "", "Flatten"], [17, 2, 1, "", "Iterate"], [17, 2, 1, "", "MakeUnique"], [17, 2, 1, "", "MergeByThreshold"], [17, 2, 1, "", "Normalize"], [17, 2, 1, "", "Position"], [17, 2, 1, "", "Repeat"], [17, 2, 1, "", "Sort"], [17, 2, 1, "", "Transpose"], [17, 2, 1, "", "Trim"], [17, 2, 1, "", "Version"]], "topologicpy.Honeybee": [[18, 1, 1, "", "Honeybee"]], "topologicpy.Honeybee.Honeybee": [[18, 2, 1, "", "ConstructionSetByIdentifier"], [18, 2, 1, "", "ConstructionSets"], [18, 2, 1, "", "ExportToHBJSON"], [18, 2, 1, "", "ModelByTopology"], [18, 2, 1, "", "ProgramTypeByIdentifier"], [18, 2, 1, "", "ProgramTypes"], [18, 2, 1, "", "String"]], "topologicpy.Matrix": [[19, 1, 1, "", "Matrix"]], "topologicpy.Matrix.Matrix": [[19, 2, 1, "", "Add"], [19, 2, 1, "", "ByRotation"], [19, 2, 1, "", "ByScaling"], [19, 2, 1, "", "ByTranslation"], [19, 2, 1, "", "Multiply"], [19, 2, 1, "", "Subtract"], [19, 2, 1, "", "Transpose"]], "topologicpy.Neo4j": [[20, 1, 1, "", "Neo4j"]], "topologicpy.Neo4j.Neo4j": [[20, 2, 1, "", "AddGraph"], [20, 2, 1, "", "ByParameters"], [20, 2, 1, "", "DeleteAll"], [20, 2, 1, "", "ExportToGraph"], [20, 2, 1, "", "NodeLabels"], [20, 2, 1, "", "NodeToVertex"], [20, 2, 1, "", "NodesByCypher"], [20, 2, 1, "", "NodesBySubGraph"], [20, 2, 1, "", "RelationshipTypes"], [20, 2, 1, "", "SetGraph"], [20, 2, 1, "", "SubGraphByCypher"], [20, 2, 1, "", "SubGraphExportToGraph"]], "topologicpy.Plotly": [[21, 1, 1, "", "Plotly"]], "topologicpy.Plotly.Plotly": [[21, 2, 1, "", "AddColorBar"], [21, 2, 1, "", "ColorScale"], [21, 2, 1, "", "Colors"], [21, 2, 1, "", "DataByDGL"], [21, 2, 1, "", "DataByGraph"], [21, 2, 1, "", "DataByTopology"], [21, 2, 1, "", "ExportToImage"], [21, 2, 1, "", "FigureByConfusionMatrix"], [21, 2, 1, "", "FigureByCorrelation"], [21, 2, 1, "", "FigureByData"], [21, 2, 1, "", "FigureByDataFrame"], [21, 2, 1, "", "FigureByJSONFile"], [21, 2, 1, "", "FigureByJSONPath"], [21, 2, 1, "", "FigureByMatrix"], [21, 2, 1, "", "FigureByPieChart"], [21, 2, 1, "", "FigureByTopology"], [21, 2, 1, "", "FigureExportToJSON"], [21, 2, 1, "", "FigureExportToPDF"], [21, 2, 1, "", "FigureExportToPNG"], [21, 2, 1, "", "FigureExportToSVG"], [21, 2, 1, "", "Renderer"], [21, 2, 1, "", "Renderers"], [21, 2, 1, "", "SetCamera"], [21, 2, 1, "", "Show"]], "topologicpy.Polyskel": [[22, 1, 1, "", "Debug"], [22, 1, 1, "", "Line2"], [22, 1, 1, "", "LineSegment2"], [22, 1, 1, "", "Point2"], [22, 1, 1, "", "Ray2"], [22, 1, 1, "", "Subtree"], [22, 4, 1, "", "set_debug"], [22, 4, 1, "", "skeletonize"]], "topologicpy.Polyskel.Debug": [[22, 2, 1, "", "line"], [22, 2, 1, "", "rectangle"], [22, 2, 1, "", "show"]], "topologicpy.Polyskel.Line2": [[22, 2, 1, "", "distance"], [22, 2, 1, "", "intersect"]], "topologicpy.Polyskel.LineSegment2": [[22, 2, 1, "", "intersect"]], "topologicpy.Polyskel.Point2": [[22, 2, 1, "", "cross"], [22, 2, 1, "", "distance"], [22, 2, 1, "", "dot"], [22, 2, 1, "", "normalized"]], "topologicpy.Polyskel.Ray2": [[22, 2, 1, "", "intersect"]], "topologicpy.Polyskel.Subtree": [[22, 3, 1, "", "height"], [22, 3, 1, "", "sinks"], [22, 3, 1, "", "source"]], "topologicpy.PyG": [[23, 1, 1, "", "CustomGraphDataset"], [23, 1, 1, "", "PyG"]], "topologicpy.PyG.CustomGraphDataset": [[23, 2, 1, "", "process_all"]], "topologicpy.PyG.PyG": [[23, 2, 1, "", "Accuracy"], [23, 2, 1, "", "ConfusionMatrix"], [23, 2, 1, "", "DatasetByCSVPath"], [23, 2, 1, "", "DatasetGraphLabels"], [23, 2, 1, "", "DatasetSplit"], [23, 2, 1, "", "Hyperparameters"], [23, 2, 1, "", "MSE"], [23, 2, 1, "", "Model"], [23, 2, 1, "", "ModelClassify"], [23, 2, 1, "", "ModelData"], [23, 2, 1, "", "ModelLoad"], [23, 2, 1, "", "ModelPredict"], [23, 2, 1, "", "ModelSave"], [23, 2, 1, "", "ModelTest"], [23, 2, 1, "", "ModelTrain"], [23, 2, 1, "", "Optimizer"], [23, 2, 1, "", "Performance"], [23, 2, 1, "", "Show"]], "topologicpy.Shell": [[24, 1, 1, "", "Shell"]], "topologicpy.Shell.Shell": [[24, 2, 1, "", "ByDisjointFaces"], [24, 2, 1, "", "ByFaces"], [24, 2, 1, "", "ByFacesCluster"], [24, 2, 1, "", "ByThickenedWire"], [24, 2, 1, "", "ByWires"], [24, 2, 1, "", "ByWiresCluster"], [24, 2, 1, "", "Circle"], [24, 2, 1, "", "Delaunay"], [24, 2, 1, "", "Edges"], [24, 2, 1, "", "ExternalBoundary"], [24, 2, 1, "", "Faces"], [24, 2, 1, "", "HyperbolicParaboloidCircularDomain"], [24, 2, 1, "", "HyperbolicParaboloidRectangularDomain"], [24, 2, 1, "", "InternalBoundaries"], [24, 2, 1, "", "IsClosed"], [24, 2, 1, "", "IsOnBoundary"], [24, 2, 1, "", "Paraboloid"], [24, 2, 1, "", "Pie"], [24, 2, 1, "", "Planarize"], [24, 2, 1, "", "Rectangle"], [24, 2, 1, "", "RemoveCollinearEdges"], [24, 2, 1, "", "Roof"], [24, 2, 1, "", "SelfMerge"], [24, 2, 1, "", "Simplify"], [24, 2, 1, "", "Skeleton"], [24, 2, 1, "", "Vertices"], [24, 2, 1, "", "Voronoi"], [24, 2, 1, "", "Wires"]], "topologicpy.Speckle": [[25, 1, 1, "", "Speckle"]], "topologicpy.Speckle.Speckle": [[25, 2, 1, "", "BranchesByStream"], [25, 2, 1, "", "ClientByURL"], [25, 2, 1, "", "CommitByID"], [25, 2, 1, "", "CommitsByBranch"], [25, 2, 1, "", "Object"], [25, 2, 1, "", "Send"], [25, 2, 1, "", "SpeckleBranchByID"], [25, 2, 1, "", "SpeckleCommitByURL"], [25, 2, 1, "", "SpeckleCommitDelete"], [25, 2, 1, "", "SpeckleGlobalsByStream"], [25, 2, 1, "", "SpeckleSendObjects"], [25, 2, 1, "", "SpeckleStreamByID"], [25, 2, 1, "", "SpeckleStreamByURL"], [25, 2, 1, "", "StreamsByClient"], [25, 2, 1, "", "mesh_to_speckle"], [25, 2, 1, "", "mesh_to_speckle_mesh"]], "topologicpy.Sun": [[26, 1, 1, "", "Sun"]], "topologicpy.Sun.Sun": [[26, 2, 1, "", "Altitude"], [26, 2, 1, "", "AutumnEquinox"], [26, 2, 1, "", "Azimuth"], [26, 2, 1, "", "Diagram"], [26, 2, 1, "", "Edge"], [26, 2, 1, "", "PathByDate"], [26, 2, 1, "", "PathByHour"], [26, 2, 1, "", "Position"], [26, 2, 1, "", "SpringEquinox"], [26, 2, 1, "", "SummerSolstice"], [26, 2, 1, "", "Sunrise"], [26, 2, 1, "", "Sunset"], [26, 2, 1, "", "Vector"], [26, 2, 1, "", "Vertex"], [26, 2, 1, "", "VerticesByDate"], [26, 2, 1, "", "VerticesByHour"], [26, 2, 1, "", "WinterSolstice"]], "topologicpy.Topology": [[27, 1, 1, "", "MergingProcess"], [27, 1, 1, "", "QueueItem"], [27, 1, 1, "", "SinkItem"], [27, 1, 1, "", "Topology"], [27, 1, 1, "", "WorkerProcess"], [27, 1, 1, "", "WorkerProcessPool"]], "topologicpy.Topology.MergingProcess": [[27, 2, 1, "", "wait_message"]], "topologicpy.Topology.QueueItem": [[27, 3, 1, "", "ID"], [27, 3, 1, "", "sinkKeys"], [27, 3, 1, "", "sinkValues"]], "topologicpy.Topology.SinkItem": [[27, 3, 1, "", "ID"], [27, 3, 1, "", "sink_str"]], "topologicpy.Topology.Topology": [[27, 2, 1, "", "AddApertures"], [27, 2, 1, "", "AddApertures_old"], [27, 2, 1, "", "AddContent"], [27, 2, 1, "", "AddDictionary"], [27, 2, 1, "", "AdjacentTopologies"], [27, 2, 1, "", "Analyze"], [27, 2, 1, "", "ApertureTopologies"], [27, 2, 1, "", "Apertures"], [27, 2, 1, "", "BREPString"], [27, 2, 1, "", "Boolean"], [27, 2, 1, "", "BoundingBox"], [27, 2, 1, "", "ByBIMFile"], [27, 2, 1, "", "ByBIMPath"], [27, 2, 1, "", "ByBIMString"], [27, 2, 1, "", "ByBREPFile"], [27, 2, 1, "", "ByBREPPath"], [27, 2, 1, "", "ByBREPString"], [27, 2, 1, "", "ByDXFFile"], [27, 2, 1, "", "ByDXFPath"], [27, 2, 1, "", "ByGeometry"], [27, 2, 1, "", "ByIFCFile"], [27, 2, 1, "", "ByIFCPath"], [27, 2, 1, "", "ByJSONFile"], [27, 2, 1, "", "ByJSONPath"], [27, 2, 1, "", "ByJSONString"], [27, 2, 1, "", "ByJSONString_old"], [27, 2, 1, "", "ByOBJFile"], [27, 2, 1, "", "ByOBJPath"], [27, 2, 1, "", "ByOBJString"], [27, 2, 1, "", "ByOCCTShape"], [27, 2, 1, "", "ByXYZFile"], [27, 2, 1, "", "ByXYZPath"], [27, 2, 1, "", "CellComplexes"], [27, 2, 1, "", "Cells"], [27, 2, 1, "", "CenterOfMass"], [27, 2, 1, "", "Centroid"], [27, 2, 1, "", "Cleanup"], [27, 2, 1, "", "ClusterFaces"], [27, 2, 1, "", "ClusterFaces_orig"], [27, 2, 1, "", "Clusters"], [27, 2, 1, "", "Contents"], [27, 2, 1, "", "Contexts"], [27, 2, 1, "", "ConvexHull"], [27, 2, 1, "", "Copy"], [27, 2, 1, "", "Degree"], [27, 2, 1, "", "Dictionary"], [27, 2, 1, "", "Difference"], [27, 2, 1, "", "Dimensionality"], [27, 2, 1, "", "Divide"], [27, 2, 1, "", "Edges"], [27, 2, 1, "", "Explode"], [27, 2, 1, "", "ExportToBIM"], [27, 2, 1, "", "ExportToBREP"], [27, 2, 1, "", "ExportToDXF"], [27, 2, 1, "", "ExportToJSON"], [27, 2, 1, "", "ExportToOBJ"], [27, 2, 1, "", "ExternalBoundary"], [27, 2, 1, "", "Faces"], [27, 2, 1, "", "Filter"], [27, 2, 1, "", "Fix"], [27, 2, 1, "", "Flatten"], [27, 2, 1, "", "Geometry"], [27, 2, 1, "", "HighestType"], [27, 2, 1, "", "Impose"], [27, 2, 1, "", "Imprint"], [27, 2, 1, "", "InternalVertex"], [27, 2, 1, "", "Intersect"], [27, 2, 1, "", "IsInstance"], [27, 2, 1, "", "IsPlanar"], [27, 2, 1, "", "IsSame"], [27, 2, 1, "", "JSONString"], [27, 2, 1, "", "Merge"], [27, 2, 1, "", "MergeAll"], [27, 2, 1, "", "NonPlanarFaces"], [27, 2, 1, "", "OBJString"], [27, 2, 1, "", "OCCTShape"], [27, 2, 1, "", "OpenEdges"], [27, 2, 1, "", "OpenFaces"], [27, 2, 1, "", "OpenVertices"], [27, 2, 1, "", "Orient"], [27, 2, 1, "", "Place"], [27, 2, 1, "", "RemoveCollinearEdges"], [27, 2, 1, "", "RemoveContent"], [27, 2, 1, "", "RemoveCoplanarFaces"], [27, 2, 1, "", "RemoveEdges"], [27, 2, 1, "", "RemoveFaces"], [27, 2, 1, "", "RemoveFacesBySelectors"], [27, 2, 1, "", "RemoveVertices"], [27, 2, 1, "", "ReplaceVertices"], [27, 2, 1, "", "Rotate"], [27, 2, 1, "", "RotateByEulerAngles"], [27, 2, 1, "", "RotateByQuaternion"], [27, 2, 1, "", "Scale"], [27, 2, 1, "", "SelectSubTopology"], [27, 2, 1, "", "SelfMerge"], [27, 2, 1, "", "SetDictionary"], [27, 2, 1, "", "SetSnapshot"], [27, 2, 1, "", "SharedEdges"], [27, 2, 1, "", "SharedFaces"], [27, 2, 1, "", "SharedTopologies"], [27, 2, 1, "", "SharedVertices"], [27, 2, 1, "", "SharedWires"], [27, 2, 1, "", "Shells"], [27, 2, 1, "", "Show"], [27, 2, 1, "", "Slice"], [27, 2, 1, "", "Snapshots"], [27, 2, 1, "", "SortBySelectors"], [27, 2, 1, "", "Spin"], [27, 2, 1, "", "SubTopologies"], [27, 2, 1, "", "SuperTopologies"], [27, 2, 1, "", "SymDif"], [27, 2, 1, "", "SymmetricDifference"], [27, 2, 1, "", "Taper"], [27, 2, 1, "", "TransferDictionaries"], [27, 2, 1, "", "TransferDictionariesBySelectors"], [27, 2, 1, "", "Transform"], [27, 2, 1, "", "Translate"], [27, 2, 1, "", "TranslateByDirectionDistance"], [27, 2, 1, "", "Triangulate"], [27, 2, 1, "", "Twist"], [27, 2, 1, "", "Type"], [27, 2, 1, "", "TypeAsString"], [27, 2, 1, "", "TypeID"], [27, 2, 1, "", "UUID"], [27, 2, 1, "", "Unflatten"], [27, 2, 1, "", "Union"], [27, 2, 1, "", "Vertices"], [27, 2, 1, "", "View3D"], [27, 2, 1, "", "Wires"], [27, 2, 1, "", "XOR"]], "topologicpy.Topology.WorkerProcess": [[27, 2, 1, "", "run"]], "topologicpy.Topology.WorkerProcessPool": [[27, 2, 1, "", "join"], [27, 2, 1, "", "startProcesses"], [27, 2, 1, "", "stopProcesses"]], "topologicpy.Vector": [[28, 1, 1, "", "Vector"]], "topologicpy.Vector.Vector": [[28, 2, 1, "", "Add"], [28, 2, 1, "", "Angle"], [28, 2, 1, "", "Average"], [28, 2, 1, "", "AzimuthAltitude"], [28, 2, 1, "", "Bisect"], [28, 2, 1, "", "ByAzimuthAltitude"], [28, 2, 1, "", "ByCoordinates"], [28, 2, 1, "", "ByVertices"], [28, 2, 1, "", "CompassAngle"], [28, 2, 1, "", "Coordinates"], [28, 2, 1, "", "Cross"], [28, 2, 1, "", "Dot"], [28, 2, 1, "", "Down"], [28, 2, 1, "", "East"], [28, 2, 1, "", "IsAntiParallel"], [28, 2, 1, "", "IsCollinear"], [28, 2, 1, "", "IsParallel"], [28, 2, 1, "", "IsSame"], [28, 2, 1, "", "Length"], [28, 2, 1, "", "Magnitude"], [28, 2, 1, "", "Multiply"], [28, 2, 1, "", "Normalize"], [28, 2, 1, "", "North"], [28, 2, 1, "", "NorthEast"], [28, 2, 1, "", "NorthWest"], [28, 2, 1, "", "Reverse"], [28, 2, 1, "", "SetMagnitude"], [28, 2, 1, "", "South"], [28, 2, 1, "", "SouthEast"], [28, 2, 1, "", "SouthWest"], [28, 2, 1, "", "Subtract"], [28, 2, 1, "", "Sum"], [28, 2, 1, "", "TransformationMatrix"], [28, 2, 1, "", "Up"], [28, 2, 1, "", "West"], [28, 2, 1, "", "XAxis"], [28, 2, 1, "", "YAxis"], [28, 2, 1, "", "ZAxis"]], "topologicpy.Vertex": [[29, 1, 1, "", "Vertex"]], "topologicpy.Vertex.Vertex": [[29, 2, 1, "", "AreCollinear"], [29, 2, 1, "", "AreIpsilateral"], [29, 2, 1, "", "AreIpsilateralCluster"], [29, 2, 1, "", "AreOnSameSide"], [29, 2, 1, "", "AreOnSameSideCluster"], [29, 2, 1, "", "ByCoordinates"], [29, 2, 1, "", "Centroid"], [29, 2, 1, "", "Clockwise2D"], [29, 2, 1, "", "Coordinates"], [29, 2, 1, "", "CounterClockwise2D"], [29, 2, 1, "", "Degree"], [29, 2, 1, "", "Distance"], [29, 2, 1, "", "EnclosingCell"], [29, 2, 1, "", "ExternalBoundary"], [29, 2, 1, "", "Fuse"], [29, 2, 1, "", "IncomingEdges"], [29, 2, 1, "", "Index"], [29, 2, 1, "", "InterpolateValue"], [29, 2, 1, "", "IsCoincident"], [29, 2, 1, "", "IsExternal"], [29, 2, 1, "", "IsInternal"], [29, 2, 1, "", "IsPeripheral"], [29, 2, 1, "", "NearestVertex"], [29, 2, 1, "", "Origin"], [29, 2, 1, "", "OutgoingEdges"], [29, 2, 1, "", "PerpendicularDistance"], [29, 2, 1, "", "PlaneEquation"], [29, 2, 1, "", "Point"], [29, 2, 1, "", "Project"], [29, 2, 1, "", "X"], [29, 2, 1, "", "Y"], [29, 2, 1, "", "Z"]], "topologicpy.Wire": [[30, 1, 1, "", "Wire"]], "topologicpy.Wire.Wire": [[30, 2, 1, "", "Arc"], [30, 2, 1, "", "BoundingRectangle"], [30, 2, 1, "", "ByEdges"], [30, 2, 1, "", "ByEdgesCluster"], [30, 2, 1, "", "ByOffset"], [30, 2, 1, "", "ByVertices"], [30, 2, 1, "", "ByVerticesCluster"], [30, 2, 1, "", "Circle"], [30, 2, 1, "", "Close"], [30, 2, 1, "", "ConvexHull"], [30, 2, 1, "", "Cycles"], [30, 2, 1, "", "Edges"], [30, 2, 1, "", "Einstein"], [30, 2, 1, "", "Ellipse"], [30, 2, 1, "", "EllipseAll"], [30, 2, 1, "", "EndVertex"], [30, 2, 1, "", "ExteriorAngles"], [30, 2, 1, "", "ExternalBoundary"], [30, 2, 1, "", "Fillet"], [30, 2, 1, "", "InteriorAngles"], [30, 2, 1, "", "Interpolate"], [30, 2, 1, "", "Invert"], [30, 2, 1, "", "IsClosed"], [30, 2, 1, "", "IsManifold"], [30, 2, 1, "", "IsSimilar"], [30, 2, 1, "", "Length"], [30, 2, 1, "", "Line"], [30, 2, 1, "", "Miter"], [30, 2, 1, "", "Normal"], [30, 2, 1, "", "OrientEdges"], [30, 2, 1, "", "Planarize"], [30, 2, 1, "", "Project"], [30, 2, 1, "", "Rectangle"], [30, 2, 1, "", "RemoveCollinearEdges"], [30, 2, 1, "", "Reverse"], [30, 2, 1, "", "Roof"], [30, 2, 1, "", "Simplify"], [30, 2, 1, "", "Skeleton"], [30, 2, 1, "", "Spiral"], [30, 2, 1, "", "Split"], [30, 2, 1, "", "Square"], [30, 2, 1, "", "Squircle"], [30, 2, 1, "", "Star"], [30, 2, 1, "", "StartEndVertices"], [30, 2, 1, "", "StartVertex"], [30, 2, 1, "", "Trapezoid"], [30, 2, 1, "", "VertexByDistance"], [30, 2, 1, "", "VertexByParameter"], [30, 2, 1, "", "VertexDistance"], [30, 2, 1, "", "Vertices"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"topologicpi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "an": 0, "ai": 0, "power": 0, "spatial": 0, "model": 0, "analysi": 0, "softwar": 0, "librari": 0, "architectur": 0, "engin": 0, "construct": 0, "introduct": 0, "instal": 0, "prerequisit": 0, "how": 0, "start": 0, "us": 0, "topolog": 0, "api": 0, "document": 0, "cite": 0, "content": [0, 2], "indic": 0, "tabl": 0, "packag": 2, "submodul": 2, "modul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "ann": 3, "apertur": 4, "cell": 5, "cellcomplex": 6, "cluster": 7, "color": 8, "context": 9, "dgl": 10, "dictionari": 11, "edg": 12, "energymodel": 13, "face": 14, "graph": 15, "grid": 16, "helper": 17, "honeybe": 18, "matrix": 19, "neo4j": 20, "plotli": 21, "polyskel": 22, "pyg": 23, "shell": 24, "speckl": 25, "sun": 26, "topologi": 27, "vector": 28, "vertex": 29, "wire": 30, "version": 31}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"topologicpy": [[0, "topologicpy"], [1, "topologicpy"]], "An AI-Powered Spatial Modelling and Analysis Software Library for Architecture, Engineering, and Construction": [[0, "an-ai-powered-spatial-modelling-and-analysis-software-library-for-architecture-engineering-and-construction"]], "Introduction": [[0, "introduction"]], "Installation": [[0, "installation"]], "Prerequisites": [[0, "prerequisites"]], "How to start using Topologic": [[0, "how-to-start-using-topologic"]], "API Documentation": [[0, "api-documentation"]], "How to cite topologicpy": [[0, "how-to-cite-topologicpy"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "topologicpy package": [[2, "topologicpy-package"]], "Submodules": [[2, "submodules"]], "Module contents": [[2, "module-topologicpy"]], "topologicpy.ANN module": [[3, "module-topologicpy.ANN"]], "topologicpy.Aperture module": [[4, "module-topologicpy.Aperture"]], "topologicpy.Cell module": [[5, "module-topologicpy.Cell"]], "topologicpy.CellComplex module": [[6, "module-topologicpy.CellComplex"]], "topologicpy.Cluster module": [[7, "module-topologicpy.Cluster"]], "topologicpy.Color module": [[8, "module-topologicpy.Color"]], "topologicpy.Context module": [[9, "module-topologicpy.Context"]], "topologicpy.DGL module": [[10, "topologicpy-dgl-module"]], "topologicpy.Dictionary module": [[11, "module-topologicpy.Dictionary"]], "topologicpy.Edge module": [[12, "module-topologicpy.Edge"]], "topologicpy.EnergyModel module": [[13, "module-topologicpy.EnergyModel"]], "topologicpy.Face module": [[14, "module-topologicpy.Face"]], "topologicpy.Graph module": [[15, "module-topologicpy.Graph"]], "topologicpy.Grid module": [[16, "module-topologicpy.Grid"]], "topologicpy.Helper module": [[17, "module-topologicpy.Helper"]], "topologicpy.Honeybee module": [[18, "module-topologicpy.Honeybee"]], "topologicpy.Matrix module": [[19, "module-topologicpy.Matrix"]], "topologicpy.Neo4j module": [[20, "module-topologicpy.Neo4j"]], "topologicpy.Plotly module": [[21, "module-topologicpy.Plotly"]], "topologicpy.Polyskel module": [[22, "module-topologicpy.Polyskel"]], "topologicpy.PyG module": [[23, "module-topologicpy.PyG"]], "topologicpy.Shell module": [[24, "module-topologicpy.Shell"]], "topologicpy.Speckle module": [[25, "module-topologicpy.Speckle"]], "topologicpy.Sun module": [[26, "module-topologicpy.Sun"]], "topologicpy.Topology module": [[27, "module-topologicpy.Topology"]], "topologicpy.Vector module": [[28, "module-topologicpy.Vector"]], "topologicpy.Vertex module": [[29, "module-topologicpy.Vertex"]], "topologicpy.Wire module": [[30, "module-topologicpy.Wire"]], "topologicpy.version module": [[31, "module-topologicpy.version"]]}, "indexentries": {"module": [[2, "module-topologicpy"], [3, "module-topologicpy.ANN"], [4, "module-topologicpy.Aperture"], [5, "module-topologicpy.Cell"], [6, "module-topologicpy.CellComplex"], [7, "module-topologicpy.Cluster"], [8, "module-topologicpy.Color"], [9, "module-topologicpy.Context"], [11, "module-topologicpy.Dictionary"], [12, "module-topologicpy.Edge"], [13, "module-topologicpy.EnergyModel"], [14, "module-topologicpy.Face"], [15, "module-topologicpy.Graph"], [16, "module-topologicpy.Grid"], [17, "module-topologicpy.Helper"], [18, "module-topologicpy.Honeybee"], [19, "module-topologicpy.Matrix"], [20, "module-topologicpy.Neo4j"], [21, "module-topologicpy.Plotly"], [22, "module-topologicpy.Polyskel"], [23, "module-topologicpy.PyG"], [24, "module-topologicpy.Shell"], [25, "module-topologicpy.Speckle"], [26, "module-topologicpy.Sun"], [27, "module-topologicpy.Topology"], [28, "module-topologicpy.Vector"], [29, "module-topologicpy.Vertex"], [30, "module-topologicpy.Wire"], [31, "module-topologicpy.version"]], "topologicpy": [[2, "module-topologicpy"]], "ann (class in topologicpy.ann)": [[3, "topologicpy.ANN.ANN"]], "datasetbycsvpath() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetByCSVPath"]], "datasetbysamplename() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetBySampleName"]], "datasetsamplenames() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetSampleNames"]], "datasetsplit() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetSplit"]], "figures() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Figures"]], "hyperparameters() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Hyperparameters"]], "hyperparametersbysamplename() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.HyperparametersBySampleName"]], "initialize() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Initialize"]], "load() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Load"]], "metrics() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Metrics"]], "modeldata() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.ModelData"]], "save() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Save"]], "test() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Test"]], "train() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Train"]], "topologicpy.ann": [[3, "module-topologicpy.ANN"]], "aperture (class in topologicpy.aperture)": [[4, "topologicpy.Aperture.Aperture"]], "bytopologycontext() (topologicpy.aperture.aperture static method)": [[4, "topologicpy.Aperture.Aperture.ByTopologyContext"]], "topology() (topologicpy.aperture.aperture static method)": [[4, "topologicpy.Aperture.Aperture.Topology"]], "topologicpy.aperture": [[4, "module-topologicpy.Aperture"]], "area() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Area"]], "box() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Box"]], "byfaces() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ByFaces"]], "byoffset() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ByOffset"]], "byshell() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ByShell"]], "byshells() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ByShells"]], "bythickenedface() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ByThickenedFace"]], "bythickenedshell() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ByThickenedShell"]], "bywires() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ByWires"]], "bywirescluster() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ByWiresCluster"]], "capsule() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Capsule"]], "cell (class in topologicpy.cell)": [[5, "topologicpy.Cell.Cell"]], "compactness() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Compactness"]], "cone() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Cone"]], "containmentstatus() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ContainmentStatus"]], "cylinder() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Cylinder"]], "decompose() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Decompose"]], "dodecahedron() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Dodecahedron"]], "edges() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Edges"]], "egg() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Egg"]], "externalboundary() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.ExternalBoundary"]], "faces() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Faces"]], "hyperboloid() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Hyperboloid"]], "icosahedron() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Icosahedron"]], "internalboundaries() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.InternalBoundaries"]], "internalvertex() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.InternalVertex"]], "isonboundary() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.IsOnBoundary"]], "octahedron() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Octahedron"]], "paraboloid() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Paraboloid"]], "pipe() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Pipe"]], "prism() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Prism"]], "removecollinearedges() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.RemoveCollinearEdges"]], "roof() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Roof"]], "sets() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Sets"]], "shells() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Shells"]], "sphere() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Sphere"]], "surfacearea() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.SurfaceArea"]], "tetrahedron() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Tetrahedron"]], "torus() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Torus"]], "vertices() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Vertices"]], "volume() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Volume"]], "wires() (topologicpy.cell.cell static method)": [[5, "topologicpy.Cell.Cell.Wires"]], "topologicpy.cell": [[5, "module-topologicpy.Cell"]], "box() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Box"]], "bycells() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.ByCells"]], "bycellscluster() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.ByCellsCluster"]], "byfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.ByFaces"]], "byfacescluster() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.ByFacesCluster"]], "bywires() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.ByWires"]], "bywirescluster() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.ByWiresCluster"]], "cellcomplex (class in topologicpy.cellcomplex)": [[6, "topologicpy.CellComplex.CellComplex"]], "cells() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Cells"]], "decompose() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Decompose"]], "delaunay() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Delaunay"]], "edges() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Edges"]], "externalboundary() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.ExternalBoundary"]], "externalfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.ExternalFaces"]], "faces() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Faces"]], "internalfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.InternalFaces"]], "nonmanifoldfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.NonManifoldFaces"]], "octahedron() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Octahedron"]], "prism() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Prism"]], "removecollinearedges() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.RemoveCollinearEdges"]], "shells() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Shells"]], "vertices() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Vertices"]], "volume() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Volume"]], "voronoi() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Voronoi"]], "wires() (topologicpy.cellcomplex.cellcomplex static method)": [[6, "topologicpy.CellComplex.CellComplex.Wires"]], "topologicpy.cellcomplex": [[6, "module-topologicpy.CellComplex"]], "byformula() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.ByFormula"]], "bytopologies() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.ByTopologies"]], "cellcomplexes() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.CellComplexes"]], "cells() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.Cells"]], "cluster (class in topologicpy.cluster)": [[7, "topologicpy.Cluster.Cluster"]], "dbscan() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.DBSCAN"]], "edges() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.Edges"]], "faces() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.Faces"]], "freecells() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.FreeCells"]], "freeedges() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.FreeEdges"]], "freefaces() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.FreeFaces"]], "freeshells() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.FreeShells"]], "freetopologies() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.FreeTopologies"]], "freevertices() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.FreeVertices"]], "freewires() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.FreeWires"]], "highesttype() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.HighestType"]], "k_means() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.K_Means"]], "mergecells() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.MergeCells"]], "mysticrose() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.MysticRose"]], "shells() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.Shells"]], "simplify() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.Simplify"]], "vertices() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.Vertices"]], "wires() (topologicpy.cluster.cluster static method)": [[7, "topologicpy.Cluster.Cluster.Wires"]], "topologicpy.cluster": [[7, "module-topologicpy.Cluster"]], "bycssnamedcolor() (topologicpy.color.color static method)": [[8, "topologicpy.Color.Color.ByCSSNamedColor"]], "byhex() (topologicpy.color.color static method)": [[8, "topologicpy.Color.Color.ByHEX"]], "byvalueinrange() (topologicpy.color.color static method)": [[8, "topologicpy.Color.Color.ByValueInRange"]], "cssnamedcolor() (topologicpy.color.color static method)": [[8, "topologicpy.Color.Color.CSSNamedColor"]], "cssnamedcolors() (topologicpy.color.color static method)": [[8, "topologicpy.Color.Color.CSSNamedColors"]], "color (class in topologicpy.color)": [[8, "topologicpy.Color.Color"]], "plotlycolor() (topologicpy.color.color static method)": [[8, "topologicpy.Color.Color.PlotlyColor"]], "rgbtohex() (topologicpy.color.color static method)": [[8, "topologicpy.Color.Color.RGBToHex"]], "topologicpy.color": [[8, "module-topologicpy.Color"]], "bytopologyparameters() (topologicpy.context.context static method)": [[9, "topologicpy.Context.Context.ByTopologyParameters"]], "context (class in topologicpy.context)": [[9, "topologicpy.Context.Context"]], "topology() (topologicpy.context.context static method)": [[9, "topologicpy.Context.Context.Topology"]], "topologicpy.context": [[9, "module-topologicpy.Context"]], "bykeyvalue() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.ByKeyValue"]], "bykeysvalues() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.ByKeysValues"]], "bymergeddictionaries() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.ByMergedDictionaries"]], "bypythondictionary() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.ByPythonDictionary"]], "dictionary (class in topologicpy.dictionary)": [[11, "topologicpy.Dictionary.Dictionary"]], "keys() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.Keys"]], "listattributevalues() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.ListAttributeValues"]], "pythondictionary() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.PythonDictionary"]], "removekey() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.RemoveKey"]], "setvalueatkey() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.SetValueAtKey"]], "valueatkey() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.ValueAtKey"]], "values() (topologicpy.dictionary.dictionary static method)": [[11, "topologicpy.Dictionary.Dictionary.Values"]], "topologicpy.dictionary": [[11, "module-topologicpy.Dictionary"]], "angle() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Angle"]], "bisect() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Bisect"]], "byfacenormal() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.ByFaceNormal"]], "byoffset2d() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.ByOffset2D"]], "bystartvertexendvertex() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.ByStartVertexEndVertex"]], "byvertices() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.ByVertices"]], "byverticescluster() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.ByVerticesCluster"]], "connection() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Connection"]], "direction() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Direction"]], "edge (class in topologicpy.edge)": [[12, "topologicpy.Edge.Edge"]], "endvertex() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.EndVertex"]], "equation2d() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Equation2D"]], "extend() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Extend"]], "extendtoedge() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.ExtendToEdge"]], "externalboundary() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.ExternalBoundary"]], "index() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Index"]], "intersect2d() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Intersect2D"]], "iscollinear() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.IsCollinear"]], "iscoplanar() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.IsCoplanar"]], "isparallel() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.IsParallel"]], "length() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Length"]], "line() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Line"]], "normal() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Normal"]], "normaledge() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.NormalEdge"]], "normalize() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Normalize"]], "parameteratvertex() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.ParameterAtVertex"]], "reverse() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Reverse"]], "setlength() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.SetLength"]], "startvertex() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.StartVertex"]], "trim() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Trim"]], "trimbyedge() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.TrimByEdge"]], "vertexbydistance() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.VertexByDistance"]], "vertexbyparameter() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.VertexByParameter"]], "vertices() (topologicpy.edge.edge static method)": [[12, "topologicpy.Edge.Edge.Vertices"]], "topologicpy.edge": [[12, "module-topologicpy.Edge"]], "byosmpath() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.ByOSMPath"]], "bytopology() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.ByTopology"]], "columnnames() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.ColumnNames"]], "defaultconstructionsets() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.DefaultConstructionSets"]], "defaultschedulesets() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.DefaultScheduleSets"]], "energymodel (class in topologicpy.energymodel)": [[13, "topologicpy.EnergyModel.EnergyModel"]], "exporttogbxml() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.ExportToGBXML"]], "exporttoosm() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.ExportToOSM"]], "gbxmlstring() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.GBXMLString"]], "query() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.Query"]], "reportnames() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.ReportNames"]], "rownames() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.RowNames"]], "run() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.Run"]], "spacecolors() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.SpaceColors"]], "spacedictionaries() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.SpaceDictionaries"]], "spacetypenames() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.SpaceTypeNames"]], "spacetypes() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.SpaceTypes"]], "sqlfile() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.SqlFile"]], "tablenames() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.TableNames"]], "topologies() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.Topologies"]], "units() (topologicpy.energymodel.energymodel static method)": [[13, "topologicpy.EnergyModel.EnergyModel.Units"]], "topologicpy.energymodel": [[13, "module-topologicpy.EnergyModel"]], "addinternalboundaries() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.AddInternalBoundaries"]], "addinternalboundariescluster() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.AddInternalBoundariesCluster"]], "angle() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Angle"]], "area() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Area"]], "boundingrectangle() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.BoundingRectangle"]], "byedges() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByEdges"]], "byedgescluster() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByEdgesCluster"]], "byoffset() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByOffset"]], "byshell() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByShell"]], "bythickenedwire() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByThickenedWire"]], "byvertices() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByVertices"]], "byverticescluster() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByVerticesCluster"]], "bywire() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByWire"]], "bywires() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByWires"]], "bywirescluster() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ByWiresCluster"]], "circle() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Circle"]], "compactness() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Compactness"]], "compassangle() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.CompassAngle"]], "edges() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Edges"]], "einstein() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Einstein"]], "ellipse() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Ellipse"]], "exteriorangles() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ExteriorAngles"]], "externalboundary() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.ExternalBoundary"]], "face (class in topologicpy.face)": [[14, "topologicpy.Face.Face"]], "facingtoward() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.FacingToward"]], "fillet() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Fillet"]], "harmonize() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Harmonize"]], "interiorangles() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.InteriorAngles"]], "internalboundaries() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.InternalBoundaries"]], "internalvertex() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.InternalVertex"]], "invert() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Invert"]], "iscoplanar() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.IsCoplanar"]], "isovist() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Isovist"]], "medialaxis() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.MedialAxis"]], "normal() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Normal"]], "normaledge() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.NormalEdge"]], "northarrow() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.NorthArrow"]], "planarize() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Planarize"]], "planeequation() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.PlaneEquation"]], "project() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Project"]], "rectangle() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Rectangle"]], "rectanglebyplaneequation() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.RectangleByPlaneEquation"]], "removecollinearedges() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.RemoveCollinearEdges"]], "simplify() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Simplify"]], "skeleton() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Skeleton"]], "square() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Square"]], "squircle() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Squircle"]], "star() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Star"]], "trapezoid() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Trapezoid"]], "triangulate() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Triangulate"]], "trimbywire() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.TrimByWire"]], "vertexbyparameters() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.VertexByParameters"]], "vertexparameters() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.VertexParameters"]], "vertices() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Vertices"]], "wire() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Wire"]], "wires() (topologicpy.face.face static method)": [[14, "topologicpy.Face.Face.Wires"]], "topologicpy.face": [[14, "module-topologicpy.Face"]], "addedge() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.AddEdge"]], "addvertex() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.AddVertex"]], "addvertices() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.AddVertices"]], "adjacencydictionary() (topologicpy.graph.graph method)": [[15, "topologicpy.Graph.Graph.AdjacencyDictionary"]], "adjacencylist() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.AdjacencyList"]], "adjacencymatrix() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.AdjacencyMatrix"]], "adjacentvertices() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.AdjacentVertices"]], "allpaths() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.AllPaths"]], "averageclusteringcoefficient() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.AverageClusteringCoefficient"]], "botgraph() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.BOTGraph"]], "botstring() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.BOTString"]], "betweenesscentrality() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.BetweenessCentrality"]], "byadjacencymatrix() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByAdjacencyMatrix"]], "byadjacencymatrixcsvpath() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByAdjacencyMatrixCSVPath"]], "bybotgraph() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByBOTGraph"]], "bybotpath() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByBOTPath"]], "bycsvpath() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByCSVPath"]], "bydgcnnfile() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByDGCNNFile"]], "bydgcnnpath() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByDGCNNPath"]], "bydgcnnstring() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByDGCNNString"]], "byifcfile() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByIFCFile"]], "byifcpath() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByIFCPath"]], "bymeshdata() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByMeshData"]], "bytopology() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByTopology"]], "byverticesedges() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ByVerticesEdges"]], "chromaticnumber() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ChromaticNumber"]], "closenesscentrality() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ClosenessCentrality"]], "color() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Color"]], "connect() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Connect"]], "containsedge() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ContainsEdge"]], "containsvertex() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ContainsVertex"]], "contractedge() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ContractEdge"]], "degree() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Degree"]], "degreesequence() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.DegreeSequence"]], "density() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Density"]], "depthmap() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.DepthMap"]], "diameter() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Diameter"]], "dictionary() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Dictionary"]], "distance() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Distance"]], "edge() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Edge"]], "edges() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Edges"]], "exporttoadjacencymatrixcsv() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ExportToAdjacencyMatrixCSV"]], "exporttobot() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ExportToBOT"]], "exporttocsv() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ExportToCSV"]], "exporttogexf() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ExportToGEXF"]], "exporttojson() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ExportToJSON"]], "flatten() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Flatten"]], "globalclusteringcoefficient() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.GlobalClusteringCoefficient"]], "graph (class in topologicpy.graph)": [[15, "topologicpy.Graph.Graph"]], "graphqueueitem (class in topologicpy.graph)": [[15, "topologicpy.Graph.GraphQueueItem"]], "guid() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Guid"]], "incomingedges() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.IncomingEdges"]], "incomingvertices() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.IncomingVertices"]], "isbipartite() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.IsBipartite"]], "iscomplete() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.IsComplete"]], "iserdoesgallai() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.IsErdoesGallai"]], "isolatedvertices() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.IsolatedVertices"]], "jsondata() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.JSONData"]], "jsonstring() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.JSONString"]], "localclusteringcoefficient() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.LocalClusteringCoefficient"]], "longestpath() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.LongestPath"]], "maximumdelta() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.MaximumDelta"]], "maximumflow() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.MaximumFlow"]], "mergingprocess (class in topologicpy.graph)": [[15, "topologicpy.Graph.MergingProcess"]], "meshdata() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.MeshData"]], "metricdistance() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.MetricDistance"]], "minimumdelta() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.MinimumDelta"]], "minimumspanningtree() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.MinimumSpanningTree"]], "navigationgraph() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.NavigationGraph"]], "nearestvertex() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.NearestVertex"]], "networkxgraph() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.NetworkXGraph"]], "order() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Order"]], "outgoingedges() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.OutgoingEdges"]], "outgoingvertices() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.OutgoingVertices"]], "pagerank() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.PageRank"]], "path() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Path"]], "pyvisgraph() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.PyvisGraph"]], "removeedge() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.RemoveEdge"]], "removevertex() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.RemoveVertex"]], "setdictionary() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.SetDictionary"]], "shortestpath() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ShortestPath"]], "shortestpaths() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.ShortestPaths"]], "show() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Show"]], "size() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Size"]], "topologicaldistance() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.TopologicalDistance"]], "topology() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Topology"]], "tree() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Tree"]], "vertexdegree() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.VertexDegree"]], "vertices() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.Vertices"]], "visibilitygraph() (topologicpy.graph.graph static method)": [[15, "topologicpy.Graph.Graph.VisibilityGraph"]], "workerprocess (class in topologicpy.graph)": [[15, "topologicpy.Graph.WorkerProcess"]], "workerprocesspool (class in topologicpy.graph)": [[15, "topologicpy.Graph.WorkerProcessPool"]], "edges (topologicpy.graph.graphqueueitem attribute)": [[15, "topologicpy.Graph.GraphQueueItem.edges"]], "join() (topologicpy.graph.workerprocesspool method)": [[15, "topologicpy.Graph.WorkerProcessPool.join"]], "run() (topologicpy.graph.workerprocess method)": [[15, "topologicpy.Graph.WorkerProcess.run"]], "startprocesses() (topologicpy.graph.workerprocesspool method)": [[15, "topologicpy.Graph.WorkerProcessPool.startProcesses"]], "stopprocesses() (topologicpy.graph.workerprocesspool method)": [[15, "topologicpy.Graph.WorkerProcessPool.stopProcesses"]], "topologicpy.graph": [[15, "module-topologicpy.Graph"]], "wait_message() (topologicpy.graph.mergingprocess method)": [[15, "topologicpy.Graph.MergingProcess.wait_message"]], "edgesbydistances() (topologicpy.grid.grid static method)": [[16, "topologicpy.Grid.Grid.EdgesByDistances"]], "edgesbyparameters() (topologicpy.grid.grid static method)": [[16, "topologicpy.Grid.Grid.EdgesByParameters"]], "grid (class in topologicpy.grid)": [[16, "topologicpy.Grid.Grid"]], "verticesbydistances() (topologicpy.grid.grid static method)": [[16, "topologicpy.Grid.Grid.VerticesByDistances"]], "verticesbyparameters() (topologicpy.grid.grid static method)": [[16, "topologicpy.Grid.Grid.VerticesByParameters"]], "topologicpy.grid": [[16, "module-topologicpy.Grid"]], "closestmatch() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.ClosestMatch"]], "flatten() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.Flatten"]], "helper (class in topologicpy.helper)": [[17, "topologicpy.Helper.Helper"]], "iterate() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.Iterate"]], "makeunique() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.MakeUnique"]], "mergebythreshold() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.MergeByThreshold"]], "normalize() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.Normalize"]], "position() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.Position"]], "repeat() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.Repeat"]], "sort() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.Sort"]], "transpose() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.Transpose"]], "trim() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.Trim"]], "version() (topologicpy.helper.helper static method)": [[17, "topologicpy.Helper.Helper.Version"]], "topologicpy.helper": [[17, "module-topologicpy.Helper"]], "constructionsetbyidentifier() (topologicpy.honeybee.honeybee static method)": [[18, "topologicpy.Honeybee.Honeybee.ConstructionSetByIdentifier"]], "constructionsets() (topologicpy.honeybee.honeybee static method)": [[18, "topologicpy.Honeybee.Honeybee.ConstructionSets"]], "exporttohbjson() (topologicpy.honeybee.honeybee static method)": [[18, "topologicpy.Honeybee.Honeybee.ExportToHBJSON"]], "honeybee (class in topologicpy.honeybee)": [[18, "topologicpy.Honeybee.Honeybee"]], "modelbytopology() (topologicpy.honeybee.honeybee static method)": [[18, "topologicpy.Honeybee.Honeybee.ModelByTopology"]], "programtypebyidentifier() (topologicpy.honeybee.honeybee static method)": [[18, "topologicpy.Honeybee.Honeybee.ProgramTypeByIdentifier"]], "programtypes() (topologicpy.honeybee.honeybee static method)": [[18, "topologicpy.Honeybee.Honeybee.ProgramTypes"]], "string() (topologicpy.honeybee.honeybee static method)": [[18, "topologicpy.Honeybee.Honeybee.String"]], "topologicpy.honeybee": [[18, "module-topologicpy.Honeybee"]], "add() (topologicpy.matrix.matrix static method)": [[19, "topologicpy.Matrix.Matrix.Add"]], "byrotation() (topologicpy.matrix.matrix static method)": [[19, "topologicpy.Matrix.Matrix.ByRotation"]], "byscaling() (topologicpy.matrix.matrix static method)": [[19, "topologicpy.Matrix.Matrix.ByScaling"]], "bytranslation() (topologicpy.matrix.matrix static method)": [[19, "topologicpy.Matrix.Matrix.ByTranslation"]], "matrix (class in topologicpy.matrix)": [[19, "topologicpy.Matrix.Matrix"]], "multiply() (topologicpy.matrix.matrix static method)": [[19, "topologicpy.Matrix.Matrix.Multiply"]], "subtract() (topologicpy.matrix.matrix static method)": [[19, "topologicpy.Matrix.Matrix.Subtract"]], "transpose() (topologicpy.matrix.matrix static method)": [[19, "topologicpy.Matrix.Matrix.Transpose"]], "topologicpy.matrix": [[19, "module-topologicpy.Matrix"]], "addgraph() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.AddGraph"]], "byparameters() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.ByParameters"]], "deleteall() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.DeleteAll"]], "exporttograph() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.ExportToGraph"]], "neo4j (class in topologicpy.neo4j)": [[20, "topologicpy.Neo4j.Neo4j"]], "nodelabels() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.NodeLabels"]], "nodetovertex() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.NodeToVertex"]], "nodesbycypher() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.NodesByCypher"]], "nodesbysubgraph() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.NodesBySubGraph"]], "relationshiptypes() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.RelationshipTypes"]], "setgraph() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.SetGraph"]], "subgraphbycypher() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.SubGraphByCypher"]], "subgraphexporttograph() (topologicpy.neo4j.neo4j static method)": [[20, "topologicpy.Neo4j.Neo4j.SubGraphExportToGraph"]], "topologicpy.neo4j": [[20, "module-topologicpy.Neo4j"]], "addcolorbar() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.AddColorBar"]], "colorscale() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.ColorScale"]], "colors() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.Colors"]], "databydgl() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.DataByDGL"]], "databygraph() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.DataByGraph"]], "databytopology() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.DataByTopology"]], "exporttoimage() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.ExportToImage"]], "figurebyconfusionmatrix() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureByConfusionMatrix"]], "figurebycorrelation() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureByCorrelation"]], "figurebydata() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureByData"]], "figurebydataframe() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureByDataFrame"]], "figurebyjsonfile() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureByJSONFile"]], "figurebyjsonpath() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureByJSONPath"]], "figurebymatrix() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureByMatrix"]], "figurebypiechart() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureByPieChart"]], "figurebytopology() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureByTopology"]], "figureexporttojson() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureExportToJSON"]], "figureexporttopdf() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureExportToPDF"]], "figureexporttopng() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureExportToPNG"]], "figureexporttosvg() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.FigureExportToSVG"]], "plotly (class in topologicpy.plotly)": [[21, "topologicpy.Plotly.Plotly"]], "renderer() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.Renderer"]], "renderers() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.Renderers"]], "setcamera() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.SetCamera"]], "show() (topologicpy.plotly.plotly static method)": [[21, "topologicpy.Plotly.Plotly.Show"]], "topologicpy.plotly": [[21, "module-topologicpy.Plotly"]], "debug (class in topologicpy.polyskel)": [[22, "topologicpy.Polyskel.Debug"]], "line2 (class in topologicpy.polyskel)": [[22, "topologicpy.Polyskel.Line2"]], "linesegment2 (class in topologicpy.polyskel)": [[22, "topologicpy.Polyskel.LineSegment2"]], "point2 (class in topologicpy.polyskel)": [[22, "topologicpy.Polyskel.Point2"]], "ray2 (class in topologicpy.polyskel)": [[22, "topologicpy.Polyskel.Ray2"]], "subtree (class in topologicpy.polyskel)": [[22, "topologicpy.Polyskel.Subtree"]], "cross() (topologicpy.polyskel.point2 method)": [[22, "topologicpy.Polyskel.Point2.cross"]], "distance() (topologicpy.polyskel.line2 method)": [[22, "topologicpy.Polyskel.Line2.distance"]], "distance() (topologicpy.polyskel.point2 method)": [[22, "topologicpy.Polyskel.Point2.distance"]], "dot() (topologicpy.polyskel.point2 method)": [[22, "topologicpy.Polyskel.Point2.dot"]], "height (topologicpy.polyskel.subtree attribute)": [[22, "topologicpy.Polyskel.Subtree.height"]], "intersect() (topologicpy.polyskel.line2 method)": [[22, "topologicpy.Polyskel.Line2.intersect"]], "intersect() (topologicpy.polyskel.linesegment2 method)": [[22, "topologicpy.Polyskel.LineSegment2.intersect"]], "intersect() (topologicpy.polyskel.ray2 method)": [[22, "topologicpy.Polyskel.Ray2.intersect"]], "line() (topologicpy.polyskel.debug method)": [[22, "topologicpy.Polyskel.Debug.line"]], "normalized() (topologicpy.polyskel.point2 method)": [[22, "topologicpy.Polyskel.Point2.normalized"]], "rectangle() (topologicpy.polyskel.debug method)": [[22, "topologicpy.Polyskel.Debug.rectangle"]], "set_debug() (in module topologicpy.polyskel)": [[22, "topologicpy.Polyskel.set_debug"]], "show() (topologicpy.polyskel.debug method)": [[22, "topologicpy.Polyskel.Debug.show"]], "sinks (topologicpy.polyskel.subtree attribute)": [[22, "topologicpy.Polyskel.Subtree.sinks"]], "skeletonize() (in module topologicpy.polyskel)": [[22, "topologicpy.Polyskel.skeletonize"]], "source (topologicpy.polyskel.subtree attribute)": [[22, "topologicpy.Polyskel.Subtree.source"]], "topologicpy.polyskel": [[22, "module-topologicpy.Polyskel"]], "accuracy() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.Accuracy"]], "confusionmatrix() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.ConfusionMatrix"]], "customgraphdataset (class in topologicpy.pyg)": [[23, "topologicpy.PyG.CustomGraphDataset"]], "datasetbycsvpath() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.DatasetByCSVPath"]], "datasetgraphlabels() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.DatasetGraphLabels"]], "datasetsplit() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.DatasetSplit"]], "hyperparameters() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.Hyperparameters"]], "mse() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.MSE"]], "model() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.Model"]], "modelclassify() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.ModelClassify"]], "modeldata() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.ModelData"]], "modelload() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.ModelLoad"]], "modelpredict() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.ModelPredict"]], "modelsave() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.ModelSave"]], "modeltest() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.ModelTest"]], "modeltrain() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.ModelTrain"]], "optimizer() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.Optimizer"]], "performance() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.Performance"]], "pyg (class in topologicpy.pyg)": [[23, "topologicpy.PyG.PyG"]], "show() (topologicpy.pyg.pyg static method)": [[23, "topologicpy.PyG.PyG.Show"]], "process_all() (topologicpy.pyg.customgraphdataset method)": [[23, "topologicpy.PyG.CustomGraphDataset.process_all"]], "topologicpy.pyg": [[23, "module-topologicpy.PyG"]], "bydisjointfaces() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.ByDisjointFaces"]], "byfaces() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.ByFaces"]], "byfacescluster() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.ByFacesCluster"]], "bythickenedwire() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.ByThickenedWire"]], "bywires() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.ByWires"]], "bywirescluster() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.ByWiresCluster"]], "circle() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Circle"]], "delaunay() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Delaunay"]], "edges() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Edges"]], "externalboundary() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.ExternalBoundary"]], "faces() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Faces"]], "hyperbolicparaboloidcirculardomain() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.HyperbolicParaboloidCircularDomain"]], "hyperbolicparaboloidrectangulardomain() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.HyperbolicParaboloidRectangularDomain"]], "internalboundaries() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.InternalBoundaries"]], "isclosed() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.IsClosed"]], "isonboundary() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.IsOnBoundary"]], "paraboloid() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Paraboloid"]], "pie() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Pie"]], "planarize() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Planarize"]], "rectangle() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Rectangle"]], "removecollinearedges() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.RemoveCollinearEdges"]], "roof() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Roof"]], "selfmerge() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.SelfMerge"]], "shell (class in topologicpy.shell)": [[24, "topologicpy.Shell.Shell"]], "simplify() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Simplify"]], "skeleton() (topologicpy.shell.shell method)": [[24, "topologicpy.Shell.Shell.Skeleton"]], "vertices() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Vertices"]], "voronoi() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Voronoi"]], "wires() (topologicpy.shell.shell static method)": [[24, "topologicpy.Shell.Shell.Wires"]], "topologicpy.shell": [[24, "module-topologicpy.Shell"]], "branchesbystream() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.BranchesByStream"]], "clientbyurl() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.ClientByURL"]], "commitbyid() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.CommitByID"]], "commitsbybranch() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.CommitsByBranch"]], "object() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.Object"]], "send() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.Send"]], "speckle (class in topologicpy.speckle)": [[25, "topologicpy.Speckle.Speckle"]], "specklebranchbyid() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.SpeckleBranchByID"]], "specklecommitbyurl() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.SpeckleCommitByURL"]], "specklecommitdelete() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.SpeckleCommitDelete"]], "speckleglobalsbystream() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.SpeckleGlobalsByStream"]], "specklesendobjects() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.SpeckleSendObjects"]], "specklestreambyid() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.SpeckleStreamByID"]], "specklestreambyurl() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.SpeckleStreamByURL"]], "streamsbyclient() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.StreamsByClient"]], "mesh_to_speckle() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.mesh_to_speckle"]], "mesh_to_speckle_mesh() (topologicpy.speckle.speckle static method)": [[25, "topologicpy.Speckle.Speckle.mesh_to_speckle_mesh"]], "topologicpy.speckle": [[25, "module-topologicpy.Speckle"]], "altitude() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.Altitude"]], "autumnequinox() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.AutumnEquinox"]], "azimuth() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.Azimuth"]], "diagram() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.Diagram"]], "edge() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.Edge"]], "pathbydate() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.PathByDate"]], "pathbyhour() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.PathByHour"]], "position() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.Position"]], "springequinox() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.SpringEquinox"]], "summersolstice() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.SummerSolstice"]], "sun (class in topologicpy.sun)": [[26, "topologicpy.Sun.Sun"]], "sunrise() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.Sunrise"]], "sunset() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.Sunset"]], "vector() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.Vector"]], "vertex() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.Vertex"]], "verticesbydate() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.VerticesByDate"]], "verticesbyhour() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.VerticesByHour"]], "wintersolstice() (topologicpy.sun.sun static method)": [[26, "topologicpy.Sun.Sun.WinterSolstice"]], "topologicpy.sun": [[26, "module-topologicpy.Sun"]], "addapertures() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.AddApertures"]], "addapertures_old() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.AddApertures_old"]], "addcontent() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.AddContent"]], "adddictionary() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.AddDictionary"]], "adjacenttopologies() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.AdjacentTopologies"]], "analyze() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Analyze"]], "aperturetopologies() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ApertureTopologies"]], "apertures() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Apertures"]], "brepstring() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.BREPString"]], "boolean() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Boolean"]], "boundingbox() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.BoundingBox"]], "bybimfile() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByBIMFile"]], "bybimpath() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByBIMPath"]], "bybimstring() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByBIMString"]], "bybrepfile() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByBREPFile"]], "bybreppath() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByBREPPath"]], "bybrepstring() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByBREPString"]], "bydxffile() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByDXFFile"]], "bydxfpath() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByDXFPath"]], "bygeometry() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByGeometry"]], "byifcfile() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByIFCFile"]], "byifcpath() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByIFCPath"]], "byjsonfile() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByJSONFile"]], "byjsonpath() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByJSONPath"]], "byjsonstring() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByJSONString"]], "byjsonstring_old() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByJSONString_old"]], "byobjfile() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByOBJFile"]], "byobjpath() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByOBJPath"]], "byobjstring() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByOBJString"]], "byocctshape() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByOCCTShape"]], "byxyzfile() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByXYZFile"]], "byxyzpath() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ByXYZPath"]], "cellcomplexes() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.CellComplexes"]], "cells() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Cells"]], "centerofmass() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.CenterOfMass"]], "centroid() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Centroid"]], "cleanup() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Cleanup"]], "clusterfaces() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ClusterFaces"]], "clusterfaces_orig() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ClusterFaces_orig"]], "clusters() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Clusters"]], "contents() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Contents"]], "contexts() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Contexts"]], "convexhull() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ConvexHull"]], "copy() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Copy"]], "degree() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Degree"]], "dictionary() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Dictionary"]], "difference() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Difference"]], "dimensionality() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Dimensionality"]], "divide() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Divide"]], "edges() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Edges"]], "explode() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Explode"]], "exporttobim() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ExportToBIM"]], "exporttobrep() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ExportToBREP"]], "exporttodxf() (topologicpy.topology.topology method)": [[27, "topologicpy.Topology.Topology.ExportToDXF"]], "exporttojson() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ExportToJSON"]], "exporttoobj() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ExportToOBJ"]], "externalboundary() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ExternalBoundary"]], "faces() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Faces"]], "filter() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Filter"]], "fix() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Fix"]], "flatten() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Flatten"]], "geometry() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Geometry"]], "highesttype() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.HighestType"]], "id (topologicpy.topology.queueitem attribute)": [[27, "topologicpy.Topology.QueueItem.ID"]], "id (topologicpy.topology.sinkitem attribute)": [[27, "topologicpy.Topology.SinkItem.ID"]], "impose() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Impose"]], "imprint() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Imprint"]], "internalvertex() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.InternalVertex"]], "intersect() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Intersect"]], "isinstance() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.IsInstance"]], "isplanar() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.IsPlanar"]], "issame() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.IsSame"]], "jsonstring() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.JSONString"]], "merge() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Merge"]], "mergeall() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.MergeAll"]], "mergingprocess (class in topologicpy.topology)": [[27, "topologicpy.Topology.MergingProcess"]], "nonplanarfaces() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.NonPlanarFaces"]], "objstring() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.OBJString"]], "occtshape() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.OCCTShape"]], "openedges() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.OpenEdges"]], "openfaces() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.OpenFaces"]], "openvertices() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.OpenVertices"]], "orient() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Orient"]], "place() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Place"]], "queueitem (class in topologicpy.topology)": [[27, "topologicpy.Topology.QueueItem"]], "removecollinearedges() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.RemoveCollinearEdges"]], "removecontent() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.RemoveContent"]], "removecoplanarfaces() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.RemoveCoplanarFaces"]], "removeedges() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.RemoveEdges"]], "removefaces() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.RemoveFaces"]], "removefacesbyselectors() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.RemoveFacesBySelectors"]], "removevertices() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.RemoveVertices"]], "replacevertices() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.ReplaceVertices"]], "rotate() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Rotate"]], "rotatebyeulerangles() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.RotateByEulerAngles"]], "rotatebyquaternion() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.RotateByQuaternion"]], "scale() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Scale"]], "selectsubtopology() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SelectSubTopology"]], "selfmerge() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SelfMerge"]], "setdictionary() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SetDictionary"]], "setsnapshot() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SetSnapshot"]], "sharededges() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SharedEdges"]], "sharedfaces() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SharedFaces"]], "sharedtopologies() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SharedTopologies"]], "sharedvertices() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SharedVertices"]], "sharedwires() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SharedWires"]], "shells() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Shells"]], "show() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Show"]], "sinkitem (class in topologicpy.topology)": [[27, "topologicpy.Topology.SinkItem"]], "slice() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Slice"]], "snapshots() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Snapshots"]], "sortbyselectors() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SortBySelectors"]], "spin() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Spin"]], "subtopologies() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SubTopologies"]], "supertopologies() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SuperTopologies"]], "symdif() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SymDif"]], "symmetricdifference() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.SymmetricDifference"]], "taper() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Taper"]], "topology (class in topologicpy.topology)": [[27, "topologicpy.Topology.Topology"]], "transferdictionaries() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.TransferDictionaries"]], "transferdictionariesbyselectors() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.TransferDictionariesBySelectors"]], "transform() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Transform"]], "translate() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Translate"]], "translatebydirectiondistance() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.TranslateByDirectionDistance"]], "triangulate() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Triangulate"]], "twist() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Twist"]], "type() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Type"]], "typeasstring() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.TypeAsString"]], "typeid() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.TypeID"]], "uuid() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.UUID"]], "unflatten() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Unflatten"]], "union() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Union"]], "vertices() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Vertices"]], "view3d() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.View3D"]], "wires() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.Wires"]], "workerprocess (class in topologicpy.topology)": [[27, "topologicpy.Topology.WorkerProcess"]], "workerprocesspool (class in topologicpy.topology)": [[27, "topologicpy.Topology.WorkerProcessPool"]], "xor() (topologicpy.topology.topology static method)": [[27, "topologicpy.Topology.Topology.XOR"]], "join() (topologicpy.topology.workerprocesspool method)": [[27, "topologicpy.Topology.WorkerProcessPool.join"]], "run() (topologicpy.topology.workerprocess method)": [[27, "topologicpy.Topology.WorkerProcess.run"]], "sinkkeys (topologicpy.topology.queueitem attribute)": [[27, "topologicpy.Topology.QueueItem.sinkKeys"]], "sinkvalues (topologicpy.topology.queueitem attribute)": [[27, "topologicpy.Topology.QueueItem.sinkValues"]], "sink_str (topologicpy.topology.sinkitem attribute)": [[27, "topologicpy.Topology.SinkItem.sink_str"]], "startprocesses() (topologicpy.topology.workerprocesspool method)": [[27, "topologicpy.Topology.WorkerProcessPool.startProcesses"]], "stopprocesses() (topologicpy.topology.workerprocesspool method)": [[27, "topologicpy.Topology.WorkerProcessPool.stopProcesses"]], "topologicpy.topology": [[27, "module-topologicpy.Topology"]], "wait_message() (topologicpy.topology.mergingprocess method)": [[27, "topologicpy.Topology.MergingProcess.wait_message"]], "add() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Add"]], "angle() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Angle"]], "average() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Average"]], "azimuthaltitude() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.AzimuthAltitude"]], "bisect() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Bisect"]], "byazimuthaltitude() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.ByAzimuthAltitude"]], "bycoordinates() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.ByCoordinates"]], "byvertices() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.ByVertices"]], "compassangle() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.CompassAngle"]], "coordinates() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Coordinates"]], "cross() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Cross"]], "dot() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Dot"]], "down() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Down"]], "east() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.East"]], "isantiparallel() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.IsAntiParallel"]], "iscollinear() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.IsCollinear"]], "isparallel() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.IsParallel"]], "issame() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.IsSame"]], "length() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Length"]], "magnitude() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Magnitude"]], "multiply() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Multiply"]], "normalize() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Normalize"]], "north() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.North"]], "northeast() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.NorthEast"]], "northwest() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.NorthWest"]], "reverse() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Reverse"]], "setmagnitude() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.SetMagnitude"]], "south() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.South"]], "southeast() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.SouthEast"]], "southwest() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.SouthWest"]], "subtract() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Subtract"]], "sum() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Sum"]], "transformationmatrix() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.TransformationMatrix"]], "up() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.Up"]], "vector (class in topologicpy.vector)": [[28, "topologicpy.Vector.Vector"]], "west() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.West"]], "xaxis() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.XAxis"]], "yaxis() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.YAxis"]], "zaxis() (topologicpy.vector.vector static method)": [[28, "topologicpy.Vector.Vector.ZAxis"]], "topologicpy.vector": [[28, "module-topologicpy.Vector"]], "arecollinear() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.AreCollinear"]], "areipsilateral() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.AreIpsilateral"]], "areipsilateralcluster() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.AreIpsilateralCluster"]], "areonsameside() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.AreOnSameSide"]], "areonsamesidecluster() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.AreOnSameSideCluster"]], "bycoordinates() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.ByCoordinates"]], "centroid() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Centroid"]], "clockwise2d() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Clockwise2D"]], "coordinates() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Coordinates"]], "counterclockwise2d() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.CounterClockwise2D"]], "degree() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Degree"]], "distance() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Distance"]], "enclosingcell() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.EnclosingCell"]], "externalboundary() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.ExternalBoundary"]], "fuse() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Fuse"]], "incomingedges() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.IncomingEdges"]], "index() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Index"]], "interpolatevalue() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.InterpolateValue"]], "iscoincident() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.IsCoincident"]], "isexternal() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.IsExternal"]], "isinternal() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.IsInternal"]], "isperipheral() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.IsPeripheral"]], "nearestvertex() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.NearestVertex"]], "origin() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Origin"]], "outgoingedges() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.OutgoingEdges"]], "perpendiculardistance() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.PerpendicularDistance"]], "planeequation() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.PlaneEquation"]], "point() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Point"]], "project() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Project"]], "vertex (class in topologicpy.vertex)": [[29, "topologicpy.Vertex.Vertex"]], "x() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.X"]], "y() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Y"]], "z() (topologicpy.vertex.vertex static method)": [[29, "topologicpy.Vertex.Vertex.Z"]], "topologicpy.vertex": [[29, "module-topologicpy.Vertex"]], "arc() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Arc"]], "boundingrectangle() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.BoundingRectangle"]], "byedges() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.ByEdges"]], "byedgescluster() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.ByEdgesCluster"]], "byoffset() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.ByOffset"]], "byvertices() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.ByVertices"]], "byverticescluster() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.ByVerticesCluster"]], "circle() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Circle"]], "close() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Close"]], "convexhull() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.ConvexHull"]], "cycles() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Cycles"]], "edges() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Edges"]], "einstein() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Einstein"]], "ellipse() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Ellipse"]], "ellipseall() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.EllipseAll"]], "endvertex() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.EndVertex"]], "exteriorangles() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.ExteriorAngles"]], "externalboundary() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.ExternalBoundary"]], "fillet() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Fillet"]], "interiorangles() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.InteriorAngles"]], "interpolate() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Interpolate"]], "invert() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Invert"]], "isclosed() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.IsClosed"]], "ismanifold() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.IsManifold"]], "issimilar() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.IsSimilar"]], "length() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Length"]], "line() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Line"]], "miter() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Miter"]], "normal() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Normal"]], "orientedges() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.OrientEdges"]], "planarize() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Planarize"]], "project() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Project"]], "rectangle() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Rectangle"]], "removecollinearedges() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.RemoveCollinearEdges"]], "reverse() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Reverse"]], "roof() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Roof"]], "simplify() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Simplify"]], "skeleton() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Skeleton"]], "spiral() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Spiral"]], "split() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Split"]], "square() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Square"]], "squircle() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Squircle"]], "star() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Star"]], "startendvertices() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.StartEndVertices"]], "startvertex() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.StartVertex"]], "trapezoid() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Trapezoid"]], "vertexbydistance() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.VertexByDistance"]], "vertexbyparameter() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.VertexByParameter"]], "vertexdistance() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.VertexDistance"]], "vertices() (topologicpy.wire.wire static method)": [[30, "topologicpy.Wire.Wire.Vertices"]], "wire (class in topologicpy.wire)": [[30, "topologicpy.Wire.Wire"]], "topologicpy.wire": [[30, "module-topologicpy.Wire"]], "topologicpy.version": [[31, "module-topologicpy.version"]]}})