Search.setIndex({"docnames": ["index", "modules", "topologicpy", "topologicpy.ANN", "topologicpy.Aperture", "topologicpy.BVH", "topologicpy.CSG", "topologicpy.Cell", "topologicpy.CellComplex", "topologicpy.Cluster", "topologicpy.Color", "topologicpy.Context", "topologicpy.DGL", "topologicpy.Dictionary", "topologicpy.Edge", "topologicpy.EnergyModel", "topologicpy.Face", "topologicpy.Graph", "topologicpy.Grid", "topologicpy.Helper", "topologicpy.Honeybee", "topologicpy.Kuzu", "topologicpy.Matrix", "topologicpy.Neo4j", "topologicpy.Plotly", "topologicpy.Polyskel", "topologicpy.PyG", "topologicpy.ShapeGrammar", "topologicpy.Shell", "topologicpy.Speckle", "topologicpy.Sun", "topologicpy.Topology", "topologicpy.Vector", "topologicpy.Vertex", "topologicpy.Wire", "topologicpy.version"], "filenames": ["index.rst", "modules.rst", "topologicpy.rst", "topologicpy.ANN.rst", "topologicpy.Aperture.rst", "topologicpy.BVH.rst", "topologicpy.CSG.rst", "topologicpy.Cell.rst", "topologicpy.CellComplex.rst", "topologicpy.Cluster.rst", "topologicpy.Color.rst", "topologicpy.Context.rst", "topologicpy.DGL.rst", "topologicpy.Dictionary.rst", "topologicpy.Edge.rst", "topologicpy.EnergyModel.rst", "topologicpy.Face.rst", "topologicpy.Graph.rst", "topologicpy.Grid.rst", "topologicpy.Helper.rst", "topologicpy.Honeybee.rst", "topologicpy.Kuzu.rst", "topologicpy.Matrix.rst", "topologicpy.Neo4j.rst", "topologicpy.Plotly.rst", "topologicpy.Polyskel.rst", "topologicpy.PyG.rst", "topologicpy.ShapeGrammar.rst", "topologicpy.Shell.rst", "topologicpy.Speckle.rst", "topologicpy.Sun.rst", "topologicpy.Topology.rst", "topologicpy.Vector.rst", "topologicpy.Vertex.rst", "topologicpy.Wire.rst", "topologicpy.version.rst"], "titles": ["topologicpy", "topologicpy", "topologicpy package", "topologicpy.ANN module", "topologicpy.Aperture module", "topologicpy.BVH module", "topologicpy.CSG module", "topologicpy.Cell module", "topologicpy.CellComplex module", "topologicpy.Cluster module", "topologicpy.Color module", "topologicpy.Context module", "topologicpy.DGL module", "topologicpy.Dictionary module", "topologicpy.Edge module", "topologicpy.EnergyModel module", "topologicpy.Face module", "topologicpy.Graph module", "topologicpy.Grid module", "topologicpy.Helper module", "topologicpy.Honeybee module", "topologicpy.Kuzu module", "topologicpy.Matrix module", "topologicpy.Neo4j module", "topologicpy.Plotly module", "topologicpy.Polyskel module", "topologicpy.PyG module", "topologicpy.ShapeGrammar module", "topologicpy.Shell module", "topologicpy.Speckle module", "topologicpy.Sun module", "topologicpy.Topology module", "topologicpy.Vector module", "topologicpy.Vertex module", "topologicpy.Wire module", "topologicpy.version module"], "terms": {"welcom": 0, "rhyme": 0, "appl": 0, "pie": [0, 2, 24, 28], "i": [0, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "open": [0, 7, 16, 31, 33, 34], "sourc": [0, 2, 8, 14, 17, 21, 22, 25, 31], "python": [0, 3, 10, 13, 17, 19, 20, 21, 24, 31], "3": [0, 3, 5, 7, 8, 14, 15, 16, 17, 19, 21, 24, 26, 31, 33, 34], "implement": [0, 17, 28], "which": [0, 3, 7, 8, 9, 10, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "revolution": 0, "wai": 0, "you": [0, 3, 5, 9, 10, 15, 16, 17, 19, 31, 33, 34], "design": [0, 15], "space": [0, 15, 16, 17, 24, 26, 31], "build": [0, 5, 7, 8, 15, 17, 20, 33, 34], "artefact": 0, "": [0, 3, 5, 7, 8, 9, 13, 14, 16, 17, 18, 19, 23, 28, 31, 34], "advanc": 0, "featur": [0, 3, 17, 26], "enabl": [0, 3, 16], "creat": [0, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 34], "hierarch": [0, 5, 17, 20], "inform": [0, 17, 26, 31], "rich": 0, "3d": [0, 9, 16, 17, 31, 33], "represent": [0, 2, 10, 17, 20, 34], "offer": 0, "unpreced": 0, "flexibl": 0, "control": [0, 3, 33], "your": [0, 3, 5, 10, 17, 19, 31], "process": [0, 9, 15, 16, 17, 26, 28, 31, 33, 34], "With": 0, "integr": [0, 2, 17], "geometri": [0, 2, 5, 6, 16, 17, 31, 34], "topologi": [0, 1, 2, 4, 5, 6, 7, 9, 11, 13, 15, 16, 17, 19, 20, 24, 27, 33, 34], "artifici": 0, "intellig": 0, "enrich": 0, "two": [0, 6, 7, 8, 13, 14, 16, 17, 18, 19, 21, 22, 31, 32, 33, 34], "main": [0, 17], "strength": [0, 33], "ar": [0, 3, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "its": [0, 5, 6, 7, 8, 10, 13, 14, 16, 17, 21, 28, 31, 32, 33, 34], "support": [0, 17, 21, 31], "defeatur": 0, "encod": [0, 17], "mesh": [0, 16, 17, 31], "By": 0, "simplifi": [0, 2, 9, 16, 17, 28, 34], "remov": [0, 7, 8, 13, 15, 16, 17, 19, 28, 31, 34], "small": [0, 5, 17, 19], "unnecessari": 0, "detail": [0, 34], "need": [0, 5, 17, 21, 31, 32, 33], "allow": [0, 16, 17, 31, 32, 34], "faster": [0, 5, 33], "more": [0, 5, 9, 16, 17, 31, 33, 34], "accur": 0, "while": [0, 5, 16, 31, 33, 34], "maintain": 0, "consist": [0, 17], "thi": [0, 3, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 23, 24, 26, 27, 28, 30, 31, 33, 34], "transform": [0, 2, 6, 9, 14, 22, 27, 31, 32, 33], "low": [0, 16, 31, 34], "qualiti": 0, "heavi": [0, 16, 31], "bim": [0, 31], "high": [0, 16, 31, 34], "lightweight": [0, 21], "readi": 0, "rigor": 0, "effortlessli": 0, "same": [0, 3, 7, 8, 9, 14, 15, 17, 19, 28, 30, 31, 32, 33], "base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34], "element": [0, 10, 13, 16, 19, 31, 32], "avail": [0, 3, 16, 17, 20, 24, 27, 31], "commerci": [0, 15], "platform": 0, "cleanli": 0, "match": [0, 2, 10, 17, 19, 21, 22, 24, 27, 31], "exact": [0, 21], "specif": [0, 3, 17], "versatil": 0, "extend": [0, 2, 14], "entiti": [0, 23, 31], "mix": 0, "dimension": [0, 2, 31], "structur": [0, 17, 31], "exampl": [0, 9, 16, 17, 19, 22, 24, 31, 33, 34], "repres": [0, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 22, 25, 28, 30, 31, 32, 34], "coher": 0, "line": [0, 2, 14, 16, 17, 18, 24, 26, 31, 33, 34], "can": [0, 3, 5, 7, 8, 9, 10, 13, 14, 16, 17, 18, 19, 24, 26, 28, 31, 33, 34], "column": [0, 15, 17, 19, 21], "beam": 0, "surfac": [0, 7, 15, 16, 17, 19, 20, 28, 30, 31, 34], "wall": [0, 15, 17], "slab": [0, 5, 17], "volum": [0, 2, 5, 7, 8, 19], "solid": [0, 17, 31], "even": [0, 16, 19, 31], "non": [0, 8, 16, 17, 23, 33], "like": [0, 9, 16, 17, 34], "load": [0, 2, 3, 15, 17, 20, 21], "effici": 0, "attach": [0, 17, 31], "approach": [0, 34], "highli": 0, "compat": [0, 17, 27], "simul": [0, 15, 33], "graph": [0, 1, 2, 6, 21, 23, 24, 26, 31], "make": [0, 9, 20], "natur": 0, "fit": [0, 24], "machin": 0, "learn": [0, 3, 26], "gml": 0, "excit": 0, "new": [0, 14, 16, 17, 21, 23, 31, 33, 34], "branch": 0, "vast": 0, "amount": [0, 16, 17, 31, 34], "connect": [0, 2, 6, 7, 14, 16, 17, 19, 21, 23, 24, 31, 33, 34], "data": [0, 3, 9, 17, 24, 26, 31], "extract": [0, 5, 21, 24], "valuabl": 0, "insight": 0, "quickli": 0, "algorithm": [0, 7, 8, 9, 16, 17, 26, 28, 31, 33, 34], "node": [0, 3, 5, 17, 21, 23, 26, 33], "classif": [0, 3, 26], "take": [0, 16, 17, 31, 34], "next": [0, 16, 19, 34], "level": [0, 5, 7, 8, 15, 17, 19, 20, 31], "classifi": [0, 7, 26], "typologi": 0, "predict": [0, 3, 24, 26], "associ": [0, 13, 16, 17, 22, 24, 31], "complet": [0, 2, 17, 23, 31, 33], "miss": [0, 17], "empow": 0, "leverag": [0, 31], "histor": 0, "knowledg": 0, "embed": [0, 9, 13, 31], "databas": [0, 2, 21, 23], "decis": 0, "about": 0, "current": [0, 16, 17, 19, 24, 30, 34], "project": [0, 2, 16, 17, 24, 28, 31, 33, 34], "streamlin": 0, "workflow": 0, "enhanc": 0, "product": [0, 32], "achiev": 0, "goal": 0, "greater": [0, 17, 19], "precis": [0, 3, 5, 17, 27, 31, 33], "experi": 0, "comprehens": 0, "well": [0, 17, 28, 34], "applic": [0, 9, 27, 31, 34], "protocol": 0, "interfac": 0, "enjoi": 0, "freedom": 0, "cut": [0, 17, 20], "edg": [0, 1, 2, 5, 6, 7, 8, 9, 13, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 30, 31, 33, 34], "c": [0, 7, 10, 16, 17, 19, 31, 33, 34], "manifold": [0, 8, 16, 28, 33, 34], "nmt": 0, "core": [0, 16, 17, 31, 34], "technologi": 0, "cascad": 0, "bind": 0, "interact": 0, "easili": 0, "accomplish": 0, "through": [0, 3, 7, 8, 17, 28, 33, 34], "command": 0, "script": [0, 24], "visual": [0, 16, 17, 24], "flow": [0, 17], "program": [0, 20], "vdfp": 0, "plugin": 0, "popular": 0, "cloud": 0, "streamlit": 0, "variou": 0, "perform": [0, 2, 3, 6, 26, 31], "task": [0, 3, 26], "seamlessli": 0, "custom": 0, "emb": 0, "own": 0, "hous": 0, "plu": [0, 9, 15], "includ": [0, 3, 5, 7, 9, 10, 13, 15, 16, 17, 19, 20, 24, 26, 27, 28, 30, 31, 33, 34], "sever": [0, 16, 31], "industri": 0, "standard": [0, 9, 16], "method": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34], "transport": 0, "ifc": [0, 17, 31], "obj": [0, 31], "brep": [0, 17, 24, 31], "hbjson": [0, 20], "csv": [0, 3, 17, 21, 26], "serial": [0, 17], "servic": 0, "speckl": [0, 1, 2], "philosophi": 0, "licens": 0, "agplv3": 0, "vision": 0, "minim": [0, 17, 21, 26], "increment": 0, "cost": [0, 17], "ensur": [0, 3, 5, 19, 21, 33], "return": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34], "invest": 0, "outright": 0, "noth": 0, "ever": 0, "trap": 0, "expens": 0, "subscript": 0, "share": [0, 13, 17, 31, 33], "app": 0, "eas": 0, "give": [0, 31], "choos": [0, 19], "between": [0, 3, 14, 16, 17, 19, 24, 26, 28, 31, 32, 33, 34], "local": [0, 7, 17, 26], "option": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "peac": 0, "mind": 0, "focu": 0, "what": [0, 31], "matter": 0, "most": [0, 10, 15, 16, 17, 24, 31], "join": [0, 2, 17, 31], "revolut": 0, "try": [0, 8], "todai": 0, "see": [0, 3, 4, 7, 8, 9, 10, 11, 16, 17, 20, 24, 27, 28, 30, 31, 33, 34], "differ": [0, 2, 6, 16, 17, 28, 31, 34], "yourself": 0, "pip": 0, "upgrad": 0, "depend": [0, 7, 16, 28, 33, 34], "follow": [0, 3, 5, 7, 8, 14, 15, 16, 17, 19, 22, 26, 31, 32, 34], "automat": [0, 5, 16, 17, 31], "from": [0, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 28, 30, 31, 32, 33, 34], "expand": [0, 8], "view": [0, 16, 17], "numpi": [0, 24, 31], "http": [0, 3, 7, 8, 9, 10, 14, 16, 17, 20, 24, 28, 30, 31, 33, 34], "org": [0, 3, 7, 8, 9, 10, 16, 17, 28, 30, 31, 33, 34], "1": [0, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 34], "24": [0, 7, 17], "0": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34], "scipi": [0, 17], "10": [0, 3, 7, 8, 16, 17, 24, 26, 28, 30, 31, 33, 34], "plotli": [0, 1, 2, 3, 10, 17, 26, 27, 31], "com": [0, 3, 7, 10, 14, 16, 17, 20, 24, 28, 30, 31, 34], "5": [0, 3, 5, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 23, 24, 26, 28, 30, 31, 33, 34], "11": [0, 8], "ifcopenshel": 0, "7": [0, 7, 8, 16, 19, 31, 33, 34], "9": [0, 8, 16, 17, 26, 31], "ipfshttpclient": 0, "pypi": [0, 15, 19], "web3": 0, "web3pi": 0, "readthedoc": [0, 17], "io": [0, 17], "en": [0, 3, 7, 8, 9, 10, 16, 17, 28, 30, 31, 33, 34], "stabl": [0, 17], "30": [0, 3, 20, 30, 31], "openstudio": [0, 15], "net": [0, 17, 31], "4": [0, 3, 5, 7, 8, 9, 10, 16, 17, 19, 24, 31, 33, 34], "topologic_cor": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 27, 28, 30, 31, 33, 34], "6": [0, 3, 5, 6, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "lbt": 0, "ladybug": [0, 20], "25": [0, 7, 15, 16, 17, 18, 20, 24, 28, 31, 34], "161": 0, "honeybe": [0, 1, 2], "12": [0, 3, 8, 17, 31], "energi": [0, 15], "91": [0, 17, 31], "49": 0, "json": [0, 17, 20, 21, 24, 31], "doc": [0, 10, 16, 31], "html": [0, 16, 17, 31], "2": [0, 3, 5, 7, 8, 9, 14, 16, 17, 19, 21, 24, 25, 28, 31, 33, 34], "py2neo": 0, "2021": 0, "pyvisgraph": [0, 2, 17], "github": [0, 7, 14, 16, 17, 20, 28, 34], "taipanrex": 0, "specklepi": 0, "specklesystem": 0, "panda": [0, 24], "pydata": 0, "8": [0, 3, 7, 8, 15, 16, 17, 24, 26, 30, 31, 33, 34], "dgl": [0, 1, 2, 17, 24], "dmlc": 0, "favourit": 0, "editor": 0, "jupyt": [0, 17, 24], "notebook": [0, 17, 24, 26, 31], "recommend": 0, "type": [0, 2, 3, 7, 9, 10, 11, 13, 15, 17, 20, 23, 24, 26, 31, 32, 33, 34], "import": [0, 6, 17, 20, 24, 31], "found": [0, 3, 7, 9, 13, 14, 15, 16, 17, 20, 21, 23, 24, 26, 28, 31, 33, 34], "If": [0, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "wish": [0, 3, 9, 15, 17, 19], "actual": [0, 3, 9, 16, 17, 24, 26, 31], "jabi": 0, "w": [0, 11, 15, 31], "2024": 0, "doi": 0, "5281": 0, "zenodo": 0, "11555172": 0, "To": [0, 19, 23], "one": [0, 3, 4, 5, 8, 9, 13, 14, 16, 17, 18, 19, 20, 26, 28, 31, 33, 34], "paper": 0, "defin": [0, 3, 11, 14, 16, 17, 19, 21, 25, 26, 28, 31, 32, 33, 34], "chatzivasileiadi": 0, "A": [0, 3, 5, 6, 7, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 24, 26, 28, 30, 31, 32, 33, 34], "explor": [0, 19], "reason": 0, "semant": [0, 17, 27], "In": [0, 3, 17, 24, 32, 34], "eloi": 0, "d": [0, 7, 16, 19, 33, 34], "leit": 0, "viana": 0, "f": 0, "morai": 0, "j": [0, 17, 31], "vieira": 0, "vaz": 0, "ed": 0, "formal": 0, "pp": 0, "277": 0, "285": 0, "springer": 0, "intern": [0, 3, 7, 8, 16, 17, 19, 28, 31, 33, 34], "publish": 0, "1007": 0, "978": 0, "030": 0, "57509": 0, "0_25": 0, "Or": 0, "bib": 0, "format": [0, 10, 17, 23, 24, 31], "refer": [0, 7, 16, 31], "manag": [0, 2, 17, 21, 31], "misc": 0, "jabi2025": 0, "author": [0, 16, 31], "wassim": 0, "11555173": 0, "titl": [0, 3, 17, 24, 26, 27, 31], "url": [0, 23], "year": [0, 30], "2025": 0, "inbook": 0, "jabi2021": 0, "abstract": 0, "conceptu": 0, "framework": 0, "concept": 0, "architect": 0, "reflect": 0, "befor": [0, 3, 6, 7, 8, 23, 31], "complex": [0, 16, 17], "set": [0, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "we": 0, "summar": 0, "below": [0, 17, 31, 32], "relat": [0, 17], "work": [0, 7, 15, 16, 17, 19, 28, 31, 34], "late": 0, "1980": 0, "describ": [0, 31], "class": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34], "discuss": 0, "also": [0, 7, 16, 17, 26, 31, 34], "report": [0, 3, 15], "usabl": 0, "workshop": 0, "wa": [0, 3, 7, 16, 17, 24, 28, 31, 34], "conduct": [0, 13, 19, 31], "valid": [0, 3, 15, 17, 21, 26], "evalu": [0, 3, 6, 9], "methodologi": 0, "collect": [0, 3], "qualit": 0, "illustr": 0, "fundament": 0, "shift": 0, "pursu": 0, "fidel": 0, "form": [0, 7, 9, 16, 17, 20, 25, 28, 31, 33, 34], "intent": 0, "aikaterini": 0, "citi": 0, "cham": 0, "sara": 0, "david": 0, "franklim": 0, "jorg": 0, "isbn": 0, "journal": 0, "page": 0, "link": 0, "cardiff": 0, "univers": 0, "ucl": 0, "packag": [0, 1, 17], "index": [0, 2, 5, 14, 17, 19, 24, 31, 33], "modul": [0, 1], "search": [0, 5, 13, 17, 19, 24, 31, 33, 34], "submodul": 1, "ann": [1, 2], "apertur": [1, 2, 7, 8, 11, 15, 17, 20, 31], "bvh": [1, 2, 33], "aabb": [1, 2, 5], "csg": [1, 2], "cell": [1, 2, 5, 8, 9, 15, 17, 19, 20, 28, 31, 33], "cellcomplex": [1, 2, 7, 9, 15, 17, 20, 31, 33], "cluster": [1, 2, 7, 8, 14, 16, 17, 18, 19, 20, 27, 28, 31, 33, 34], "color": [1, 2, 3, 9, 15, 17, 24, 26, 31], "context": [1, 2, 4, 17, 20, 31], "dictionari": [1, 2, 3, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "energymodel": [1, 2], "face": [1, 2, 5, 7, 8, 9, 13, 14, 15, 17, 18, 20, 24, 28, 30, 31, 33, 34], "graphqueueitem": [1, 2, 17], "mergingprocess": [1, 2, 17, 31], "workerprocess": [1, 2, 17, 31], "workerprocesspool": [1, 2, 17, 31], "grid": [1, 2, 7, 17, 20, 24, 26, 28, 34], "helper": [1, 2], "kuzu": [1, 2], "matrix": [1, 2, 3, 6, 9, 14, 16, 17, 24, 26, 27, 31, 32, 33], "neo4j": [1, 2], "polyskel": [1, 2, 7, 16, 28, 34], "subtre": [1, 2, 17, 25], "bisector": [1, 2, 16, 25, 34], "distanc": [1, 2, 5, 7, 14, 16, 17, 18, 22, 25, 28, 31, 33, 34], "normal": [1, 2, 7, 14, 16, 17, 19, 25, 26, 31, 32, 33, 34], "skeleton": [1, 2, 7, 16, 25, 28, 34], "pyg": [1, 2], "customgraphdataset": [1, 2, 26], "shapegrammar": [1, 2], "shell": [1, 2, 7, 8, 9, 13, 16, 17, 20, 30, 31, 33], "sun": [1, 2], "queueitem": [1, 2, 31], "sinkitem": [1, 2, 31], "vector": [1, 2, 5, 7, 8, 9, 14, 16, 17, 22, 24, 28, 30, 31, 33, 34], "vertex": [1, 2, 5, 6, 7, 8, 9, 14, 16, 17, 18, 21, 23, 24, 25, 28, 30, 31, 32, 34], "wire": [1, 2, 7, 8, 9, 14, 16, 17, 28, 30, 31, 33], "version": [1, 2, 15, 16, 17, 19, 26, 28, 31, 34], "content": [1, 11, 16, 17, 31], "datasetbycsvpath": [2, 3, 26], "datasetbysamplenam": [2, 3], "datasetsamplenam": [2, 3], "datasetsplit": [2, 3, 26], "figur": [2, 3, 17, 24, 26, 27, 30, 31], "hyperparamet": [2, 3, 26], "hyperparametersbysamplenam": [2, 3], "initi": [2, 3, 6, 8, 16, 17, 21, 26, 31, 34], "metric": [2, 3, 16, 17], "modeldata": [2, 3, 26], "save": [2, 3, 15, 17, 26, 28], "test": [2, 3, 17, 24, 26, 34], "train": [2, 3, 17, 24, 26], "bytopologycontext": [2, 4], "center": [2, 5, 7, 8, 9, 14, 16, 17, 24, 28, 30, 31, 34], "contains_point": [2, 5], "extent": [2, 5, 14, 16], "from_point": [2, 5], "maxx": [2, 5], "maxi": [2, 5], "maxz": [2, 5], "minx": [2, 5], "mini": [2, 3, 5], "minz": [2, 5], "overlap": [2, 5, 17, 31], "ray_intersect": [2, 5], "union": [2, 5, 6, 17, 31], "bytopologi": [2, 5, 9, 15, 17], "clash": [2, 5], "depth": [2, 5, 7, 8, 17, 31], "nearest": [2, 5, 7, 8, 16, 17, 33, 34], "queryaabb": [2, 5], "raycast": [2, 5], "addoperationvertex": [2, 6], "addtopologyvertex": [2, 6], "init": [2, 6], "invok": [2, 6], "area": [2, 7, 13, 16, 17, 19, 31, 34], "box": [2, 5, 7, 8, 14, 17, 31, 34], "byfac": [2, 7, 8, 28], "byoffset": [2, 7, 16, 34], "byshel": [2, 7, 16], "bythickenedfac": [2, 7], "bythickenedshel": [2, 7], "bywir": [2, 7, 8, 16, 28], "bywiresclust": [2, 7, 8, 16, 28], "ch": [2, 7, 16], "cshape": [2, 7, 16, 34], "capsul": [2, 7], "compact": [2, 7, 16, 17], "cone": [2, 7], "containmentstatu": [2, 7], "crossshap": [2, 7, 16, 34], "cube": [2, 7, 8, 16], "cylind": [2, 7], "decompos": [2, 7, 8], "dodecahedron": [2, 7], "egg": [2, 7], "externalboundari": [2, 7, 8, 9, 14, 16, 28, 31, 33, 34], "hyperboloid": [2, 7], "ishap": [2, 7, 16, 34], "icosahedron": [2, 7], "internalboundari": [2, 7, 16, 28], "internalvertex": [2, 7, 16, 31], "isonboundari": [2, 7, 28], "lshape": [2, 7, 16, 34], "octahedron": [2, 7, 8], "paraboloid": [2, 7, 28], "pipe": [2, 7], "prism": [2, 7, 8], "rh": [2, 7, 16], "removecollinearedg": [2, 7, 8, 16, 28, 31, 34], "roof": [2, 7, 16, 28, 34], "sh": [2, 7, 16], "sphere": [2, 7, 8, 17], "surfacearea": [2, 7], "tshape": [2, 7, 16, 34], "tetrahedron": [2, 7, 8], "toru": [2, 7, 8], "torus_old": [2, 7], "tube": [2, 7], "vertic": [2, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 23, 24, 28, 30, 31, 32, 33, 34], "wedg": [2, 7], "bycel": [2, 8], "bycellsclust": [2, 8], "bydisjointedfac": [2, 8], "byfacesclust": [2, 8, 28], "delaunai": [2, 8, 16, 28, 31], "externalfac": [2, 8], "internalfac": [2, 8], "nonmanifoldfac": [2, 8], "voronoi": [2, 8, 28], "byformula": [2, 9], "dbscan": [2, 9], "freecel": [2, 9], "freeedg": [2, 9], "freefac": [2, 9], "freeshel": [2, 9], "freetopologi": [2, 9, 33], "freevertic": [2, 9], "freewir": [2, 9], "highesttyp": [2, 9, 31], "k_mean": [2, 9], "mergecel": [2, 9], "mysticros": [2, 9], "tripod": [2, 9], "addhex": [2, 10], "anytohex": [2, 10], "averag": [2, 10, 16, 17, 19, 32, 33], "bycssnamedcolor": [2, 10], "byhex": [2, 10], "byvalueinrang": [2, 10, 17], "cmyktohex": [2, 10], "cssnamedcolor": [2, 10], "plotlycolor": [2, 10], "rgbtohex": [2, 10], "bytopologyparamet": [2, 11], "adjacencydictionari": [2, 13, 17], "bykeyvalu": [2, 13], "bykeysvalu": [2, 13], "bymergeddictionari": [2, 13], "bypythondictionari": [2, 13], "copi": [2, 13, 20, 31], "filter": [2, 13, 17, 21, 26, 31], "kei": [2, 3, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "listattributevalu": [2, 13], "pythondictionari": [2, 13], "removekei": [2, 13], "setvalueatkei": [2, 13], "setvaluesatkei": [2, 13], "valueatkei": [2, 13], "valu": [2, 3, 5, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 23, 24, 26, 27, 31, 32, 33, 34], "valuesatkei": [2, 13], "align2d": [2, 14], "angl": [2, 7, 8, 14, 15, 16, 17, 24, 28, 30, 31, 32, 34], "bisect": [2, 14, 32], "byfacenorm": [2, 14], "byoffset2d": [2, 14], "byorigindirectionlength": [2, 14], "bystartvertexendvertex": [2, 14], "byvertic": [2, 14, 16, 32, 34], "byverticesclust": [2, 14, 16, 34], "direct": [2, 5, 6, 7, 8, 9, 14, 15, 16, 17, 24, 25, 28, 30, 31, 32, 33, 34], "endvertex": [2, 14, 34], "equation2d": [2, 14], "extendtoedg": [2, 14], "intersect2d": [2, 14], "iscollinear": [2, 14, 32], "iscoplanar": [2, 14, 16], "isparallel": [2, 14, 32], "length": [2, 5, 7, 8, 13, 14, 16, 17, 19, 24, 26, 28, 31, 32, 33, 34], "normaledg": [2, 14, 16], "parameteratvertex": [2, 14], "revers": [2, 7, 14, 16, 17, 19, 32, 34], "setlength": [2, 14], "startvertex": [2, 14, 34], "trim": [2, 14, 16, 19], "trimbyedg": [2, 14], "vertexbydist": [2, 14, 34], "vertexbyparamet": [2, 14, 16, 34], "byosmpath": [2, 15], "columnnam": [2, 15], "defaultconstructionset": [2, 15], "defaultscheduleset": [2, 15], "exporttogbxml": [2, 15], "exporttoosm": [2, 15], "gbxmlstring": [2, 15], "queri": [2, 5, 13, 15, 16, 21, 23, 31, 33, 34], "reportnam": [2, 15], "rownam": [2, 15], "run": [2, 3, 15, 16, 17, 19, 21, 23, 24, 31, 33, 34], "spacecolor": [2, 15], "spacedictionari": [2, 15], "spacetypenam": [2, 15], "spacetyp": [2, 15, 17], "sqlfile": [2, 15], "tablenam": [2, 15], "unit": [2, 8, 15, 16, 24, 31, 33], "addinternalboundari": [2, 16], "addinternalboundariesclust": [2, 16], "boundingrectangl": [2, 16, 34], "byedg": [2, 16, 34], "byedgesclust": [2, 16, 34], "byoffsetarea": [2, 16, 34], "bythickenedwir": [2, 16, 28], "circl": [2, 7, 9, 16, 17, 28, 30, 34], "compassangl": [2, 16, 32], "einstein": [2, 16, 34], "ellips": [2, 16, 17, 34], "exteriorangl": [2, 16, 34], "facingtoward": [2, 16], "fillet": [2, 7, 16, 34], "harmon": [2, 16], "interiorangl": [2, 16, 34], "invert": [2, 16, 22, 34], "isconvex": [2, 16], "isovist": [2, 16], "medialaxi": [2, 16], "northarrow": [2, 16], "planar": [2, 7, 16, 20, 28, 31, 33, 34], "planeequ": [2, 16, 33], "rectangl": [2, 16, 28, 31, 34], "rectanglebyplaneequ": [2, 16], "ring": [2, 16, 28, 30], "squar": [2, 3, 7, 16, 26, 28, 34], "squircl": [2, 16, 34], "star": [2, 16, 34], "thirdvertex": [2, 16], "trapezoid": [2, 16, 34], "triangul": [2, 7, 8, 16, 28, 31], "trimbywir": [2, 16], "vertexparamet": [2, 16], "accessibilitycentr": [2, 17], "addedg": [2, 17], "addedgebyindex": [2, 17], "addvertex": [2, 17], "addvertic": [2, 17], "adjacencylist": [2, 17], "adjacencymatrix": [2, 17], "adjacencymatrixcsvstr": [2, 17], "adjacencymatrixfigur": [2, 17], "adjacentedg": [2, 17], "adjacentvertic": [2, 17], "adjacentverticesbycompassdirect": [2, 17], "adjacentverticesbyvector": [2, 17], "allpath": [2, 17], "averageclusteringcoeffici": [2, 17], "botgraph": [2, 17], "botstr": [2, 17], "betweennesscentr": [2, 17], "betweennesspartit": [2, 17], "bridg": [2, 17], "byadjacencymatrix": [2, 17], "byadjacencymatrixcsvpath": [2, 17], "bybotgraph": [2, 17], "bybotpath": [2, 17], "bycsvpath": [2, 17, 21], "bydgcnnfil": [2, 17], "bydgcnnpath": [2, 17], "bydgcnnstr": [2, 17], "bydictionari": [2, 17], "byifcfil": [2, 17, 31], "byifcpath": [2, 17, 31], "byjsondictionari": [2, 17, 31], "byjsonfil": [2, 17, 31], "byjsonpath": [2, 17, 31], "bymeshdata": [2, 17, 31], "bynetworkxgraph": [2, 17], "byspatialrelationship": [2, 17], "byverticesedg": [2, 17], "choic": [2, 17], "chromaticnumb": [2, 17], "closenesscentr": [2, 17], "commun": [2, 17], "communitypartit": [2, 17], "compar": [2, 7, 17, 19], "complement": [2, 17], "connectedcompon": [2, 17], "containsedg": [2, 17], "containsvertex": [2, 17], "contractedg": [2, 17], "cutvertic": [2, 17], "degreecentr": [2, 17], "degreematrix": [2, 17], "degreesequ": [2, 17], "densiti": [2, 9, 16, 17], "depthmap": [2, 17], "diamet": [2, 17, 31], "eigenvectorcentr": [2, 17], "exporttoadjacencymatrixcsv": [2, 17], "exporttobot": [2, 17], "exporttocsv": [2, 17], "exporttogexf": [2, 17], "exporttographvizgraph": [2, 17], "exporttojson": [2, 17, 31], "exporttojsonld": [2, 17], "fiedlervector": [2, 17], "fiedlervectorpartit": [2, 17], "globalclusteringcoeffici": [2, 17], "graphvizgraph": [2, 17], "guid": [2, 17, 19, 31], "hassediagram": [2, 17], "hopperkernel": [2, 17], "impos": [2, 6, 17, 31], "imprint": [2, 6, 17, 31], "incomingedg": [2, 17, 33], "incomingvertic": [2, 17], "inducedsubgraph": [2, 17], "intersect": [2, 5, 6, 7, 8, 14, 17, 31, 34], "isbipartit": [2, 17], "iscomplet": [2, 17], "isconnect": [2, 17], "isempti": [2, 17], "iserdoesgallai": [2, 17], "isisomorph": [2, 17], "istre": [2, 17], "isolatedvertic": [2, 17], "jsondata": [2, 17], "jsonlddata": [2, 17], "jsonldstr": [2, 17], "jsonstr": [2, 17, 31], "khopssubgraph": [2, 17], "kernel": [2, 17], "laplacian": [2, 17], "leav": [2, 6, 17], "linegraph": [2, 17], "localclusteringcoeffici": [2, 17], "longestpath": [2, 17], "maximumdelta": [2, 17], "maximumflow": [2, 17], "merg": [2, 6, 8, 9, 13, 16, 17, 19, 28, 31], "mergevertic": [2, 17], "meshdata": [2, 17, 31], "metricdist": [2, 17], "minimumdelta": [2, 17], "minimumspanningtre": [2, 17], "navigationgraph": [2, 17], "nearestvertex": [2, 17, 33], "networkxgraph": [2, 17], "order": [2, 6, 7, 17, 19, 22, 24, 25, 26, 31, 32, 33], "outgoingedg": [2, 17, 33], "outgoingvertic": [2, 17], "pagerank": [2, 17], "partit": [2, 8, 17, 28], "path": [2, 3, 15, 17, 20, 21, 24, 26, 30, 31, 34], "quotient": [2, 17], "removeedg": [2, 17, 31], "removeisolatededg": [2, 17], "removeisolatedvertic": [2, 17], "removevertex": [2, 17], "reshap": [2, 17], "setdictionari": [2, 17, 31], "shortestpath": [2, 17], "show": [2, 17, 24, 26, 31], "size": [2, 7, 8, 9, 16, 17, 19, 24, 26, 28, 31, 34], "subgraphmatch": [2, 17], "subgraph": [2, 17], "symmetricdiffer": [2, 17, 31], "tietz": [2, 17], "topologicaldist": [2, 17], "tree": [2, 5, 17, 33], "vertexdegre": [2, 17], "visibilitygraph": [2, 17], "wlfeatur": [2, 17], "wlkernel": [2, 17], "weightedjaccardsimilar": [2, 17], "xor": [2, 6, 17, 31], "wait_messag": [2, 17, 31], "startprocess": [2, 17, 31], "stopprocess": [2, 17, 31], "edgesbydist": [2, 18], "edgesbyparamet": [2, 18], "verticesbydist": [2, 18], "verticesbyparamet": [2, 18], "binandaverag": [2, 19], "checkvers": [2, 19], "closestmatch": [2, 19], "clusterbykei": [2, 19, 31], "flatten": [2, 19, 31], "grow": [2, 19], "iter": [2, 5, 9, 16, 17, 19, 32, 33, 34], "makeuniqu": [2, 19], "maximumindic": [2, 19], "mergebythreshold": [2, 19], "minimumindic": [2, 19], "posit": [2, 5, 7, 8, 15, 16, 17, 19, 30, 31, 32, 33, 34], "removeeven": [2, 19], "removeodd": [2, 19], "repeat": [2, 19, 34], "sort": [2, 17, 19, 31, 33], "transpos": [2, 19, 22, 31], "deletegraph": [2, 21], "emptydatabas": [2, 21], "ensureschema": [2, 21], "graphbyid": [2, 21], "graphsbyqueri": [2, 21], "listgraph": [2, 21], "upsertgraph": [2, 21], "byhbjsondictionari": [2, 20], "byhbjsonpath": [2, 20], "byhbjsonstr": [2, 20], "constructionsetbyidentifi": [2, 20], "constructionset": [2, 20], "exporttohbjson": [2, 20], "modelbytopologi": [2, 20], "programtypebyidentifi": [2, 20], "programtyp": [2, 20], "string": [2, 9, 10, 13, 15, 16, 17, 19, 20, 21, 23, 24, 26, 27, 31, 32, 33, 34], "add": [2, 6, 10, 16, 17, 20, 22, 24, 27, 31, 32], "bycoordinatesystem": [2, 22], "byrot": [2, 22], "byscal": [2, 22], "bytransl": [2, 22], "byvector": [2, 22], "byvectors_old": [2, 22], "eigenvaluesandvector": [2, 22], "ident": [2, 14, 17, 22, 31, 33], "multipli": [2, 22, 32, 33], "subtract": [2, 22, 31, 32], "bygraph": [2, 23], "byparamet": [2, 23], "exporttograph": [2, 23], "reset": [2, 21, 23], "setgraph": [2, 23], "addcolorbar": [2, 24], "colorscal": [2, 3, 10, 17, 24, 31], "databydgl": [2, 24], "databygraph": [2, 24], "databytopologi": [2, 24], "exporttoimag": [2, 24], "figurebyconfusionmatrix": [2, 24], "figurebycorrel": [2, 24], "figurebydata": [2, 24], "figurebydatafram": [2, 24], "figurebyjsonfil": [2, 24], "figurebyjsonpath": [2, 24], "figurebymatrix": [2, 24], "figurebypiechart": [2, 24], "figurebytopologi": [2, 24], "figureexporttojson": [2, 24], "figureexporttopdf": [2, 24], "figureexporttopng": [2, 24], "figureexporttosvg": [2, 24], "render": [2, 17, 24, 26, 31], "setcamera": [2, 24], "edgedata": [2, 24], "vertexdata": [2, 24], "height": [2, 3, 7, 8, 15, 17, 24, 25, 26, 28, 31, 34], "sink": [2, 17, 25, 31], "process_al": [2, 26], "accuraci": [2, 3, 24, 26], "confusionmatrix": [2, 26], "datasetgraphlabel": [2, 26], "mse": [2, 3, 26], "model": [2, 3, 15, 20, 26], "modelclassifi": [2, 26], "modelload": [2, 26], "modelpredict": [2, 26], "modelsav": [2, 26], "modeltest": [2, 26], "modeltrain": [2, 26], "optim": [2, 16, 17, 26, 31, 34], "addrul": [2, 27], "applicablerul": [2, 27], "applyrul": [2, 27], "clusterbyinputoutput": [2, 27], "clusterbyrul": [2, 27], "figurebyinputoutput": [2, 27], "figurebyrul": [2, 27], "operationbytitl": [2, 27], "operationtitl": [2, 27], "bydisjointfac": [2, 28], "hyperbolicparaboloidcirculardomain": [2, 28], "hyperbolicparaboloidrectangulardomain": [2, 28], "internaledg": [2, 28], "isclos": [2, 28, 34], "mobiusstrip": [2, 28], "selfmerg": [2, 28, 31], "altitud": [2, 30, 32], "autumnequinox": [2, 30], "azimuth": [2, 30, 32], "diagram": [2, 17, 30], "pathbyd": [2, 30], "pathbyhour": [2, 30], "springequinox": [2, 30], "summersolstic": [2, 30], "sunris": [2, 30], "sunset": [2, 30], "verticesbyd": [2, 30], "verticesbyhour": [2, 30], "wintersolstic": [2, 30], "id": [2, 17, 20, 21, 31], "sinkkei": [2, 31], "sinkvalu": [2, 31], "sink_str": [2, 31], "addapertur": [2, 31], "addcont": [2, 31], "adddictionari": [2, 31], "adjacenttopologi": [2, 17, 31], "analyz": [2, 5, 31], "aperturetopologi": [2, 31], "brepstr": [2, 31], "boundingbox": [2, 31], "bybimfil": [2, 31], "bybimpath": [2, 31], "bybimstr": [2, 31], "bybrepfil": [2, 31], "bybreppath": [2, 31], "bybrepstr": [2, 31], "bydxffil": [2, 31], "bydxfpath": [2, 31], "bygeometri": [2, 31], "byjsonstr": [2, 31], "byobjfil": [2, 31], "byobjpath": [2, 31], "byobjstr": [2, 31], "byocctshap": [2, 31], "bypdffil": [2, 31], "bypdfpath": [2, 31], "byxyzfil": [2, 31], "byxyzpath": [2, 31], "canonicalmatrix": [2, 31], "centerofmass": [2, 31], "centroid": [2, 5, 6, 9, 14, 16, 17, 28, 31, 33, 34], "cleanup": [2, 31], "clusterfac": [2, 31], "convexhul": [2, 31, 34], "degre": [2, 7, 8, 14, 15, 16, 17, 20, 28, 31, 32, 33, 34], "divid": [2, 26, 30, 31], "explod": [2, 31], "exporttobim": [2, 31], "exporttobrep": [2, 31], "exporttodxf": [2, 31], "exporttoobj": [2, 31], "fix": [2, 17, 31], "inherit": [2, 31], "isinst": [2, 31], "isplanar": [2, 31], "issam": [2, 17, 31, 32], "issimilar": [2, 31, 34], "isvertexcongru": [2, 31], "largestfac": [2, 31], "longestedg": [2, 31], "mergeal": [2, 31], "move": [2, 31], "nonplanarfac": [2, 31], "objstr": [2, 31], "occtshap": [2, 31], "openedg": [2, 31], "openfac": [2, 31], "openvertic": [2, 31], "orient": [2, 7, 22, 31, 34], "place": [2, 3, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 28, 30, 31, 32, 33, 34], "principalax": [2, 31], "removecont": [2, 31], "removecoplanarfac": [2, 17, 31], "removefac": [2, 31], "removefacesbyselector": [2, 31], "removevertic": [2, 17, 31], "replacevertic": [2, 31], "rotat": [2, 14, 16, 17, 22, 28, 31, 34], "rotatebyeulerangl": [2, 31], "rotatebyquaternion": [2, 31], "scale": [2, 3, 6, 10, 17, 22, 24, 31], "selectsubtopologi": [2, 31], "setsnapshot": [2, 31], "sharededg": [2, 31], "sharedfac": [2, 31], "sharedtopologi": [2, 13, 31], "sharedvertic": [2, 31], "sharedwir": [2, 31], "shortestedg": [2, 31], "slice": [2, 6, 31], "smallestfac": [2, 31], "snapshot": [2, 31], "sortbyselector": [2, 31], "spatialrelationship": [2, 31], "spin": [2, 31], "subcombin": [2, 31], "subtopologi": [2, 9, 13, 17, 31, 33], "supertopologi": [2, 17, 31, 33], "symdif": [2, 31], "taper": [2, 31], "transferdictionari": [2, 8, 9, 16, 17, 28, 31, 33, 34], "transferdictionariesbyselector": [2, 31], "translat": [2, 22, 31], "translatebydirectiondist": [2, 31], "twist": [2, 7, 28, 31], "typeasstr": [2, 31], "typeid": [2, 31], "uuid": [2, 21, 31], "unflatten": [2, 31], "view3d": [2, 31], "azimuthaltitud": [2, 32], "byazimuthaltitud": [2, 32], "bycoordin": [2, 32, 33], "compassdirect": [2, 17, 32], "coordin": [2, 16, 17, 21, 22, 23, 31, 32, 33], "cross": [2, 3, 7, 16, 17, 26, 30, 31, 32, 34], "dot": [2, 17, 24, 32], "down": [2, 32], "east": [2, 16, 32], "isantiparallel": [2, 32], "magnitud": [2, 32], "north": [2, 15, 16, 30, 32], "northeast": [2, 32], "northwest": [2, 32], "setmagnitud": [2, 32], "south": [2, 32], "southeast": [2, 32], "southwest": [2, 32], "sum": [2, 32], "transformationmatrix": [2, 32], "up": [2, 5, 7, 8, 9, 14, 16, 17, 20, 21, 24, 28, 31, 32, 34], "west": [2, 32], "xaxi": [2, 17, 24, 31, 32], "yaxi": [2, 16, 17, 24, 31, 32], "zaxi": [2, 17, 24, 31, 32], "aligncoordin": [2, 33], "arecollinear": [2, 33], "arecoplanar": [2, 33], "areipsilater": [2, 33], "areipsilateralclust": [2, 33], "areonsamesid": [2, 33], "areonsamesideclust": [2, 33], "clockwise2d": [2, 33], "counterclockwise2d": [2, 33], "enclosingcel": [2, 33], "fuse": [2, 33], "interpolatevalu": [2, 33], "iscoincid": [2, 33], "isextern": [2, 33], "isintern": [2, 33], "isperipher": [2, 33], "origin": [2, 5, 7, 8, 9, 14, 16, 17, 18, 22, 28, 30, 31, 32, 33, 34], "perpendiculardist": [2, 33], "point": [2, 5, 7, 9, 14, 16, 17, 20, 21, 24, 26, 30, 31, 32, 33, 34], "separ": [2, 13, 17, 19, 20, 28, 31, 33], "x": [2, 3, 5, 6, 7, 9, 14, 16, 17, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34], "y": [2, 3, 5, 6, 7, 9, 10, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34], "z": [2, 5, 6, 7, 8, 9, 14, 15, 16, 17, 19, 21, 22, 23, 24, 28, 30, 31, 32, 33, 34], "arc": [2, 16, 17, 24, 28, 34], "arcbyedg": [2, 34], "close": [2, 5, 7, 10, 16, 17, 20, 28, 31, 33, 34], "concavehul": [2, 34], "cycl": [2, 34], "ellipseal": [2, 34], "interpol": [2, 16, 33, 34], "ismanifold": [2, 34], "miter": [2, 34], "orientedg": [2, 34], "spiral": [2, 34], "split": [2, 3, 26, 34], "startendvertic": [2, 34], "vertexdist": [2, 34], "object": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34], "static": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 30, 31, 32, 33, 34], "tasktyp": 3, "descript": [3, 7, 8, 9, 13, 16, 27, 28, 34], "dataset": [3, 21, 26], "accord": [3, 13, 17, 19, 23, 26, 31, 33], "input": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "file": [3, 15, 17, 20, 24, 26, 31], "paramet": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "str": [3, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 26, 27, 28, 31, 32, 33, 34], "The": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "folder": [3, 15, 17, 21, 26], "contain": [3, 7, 8, 9, 10, 13, 16, 17, 18, 19, 21, 24, 26, 31, 32, 33, 34], "necessari": [3, 26, 34], "yml": [3, 26], "regress": [3, 26], "default": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "keep": 3, "scikit": 3, "bunch": 3, "descr": 3, "sklearn": 3, "util": 3, "_bunch": 3, "name": [3, 10, 15, 16, 17, 19, 20, 23, 24, 26, 31, 34], "sampl": [3, 16, 24], "breast_canc": 3, "california_h": 3, "digit": [3, 24], "iri": [3, 17], "wine": 3, "sci": 3, "kit": 3, "list": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34], "testratio": 3, "randomst": [3, 26], "42": [3, 26], "ratio": [3, 15, 17, 24, 26, 31, 34], "target": [3, 8, 14, 17, 19, 22, 24, 31], "float": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "reserv": [3, 17], "unseen": 3, "int": [3, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "us": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34], "reproduc": [3, 26], "result": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 30, 31, 32, 33, 34], "when": [3, 16, 17, 20, 31, 34], "integ": [3, 10, 13, 16, 17, 21, 30, 31, 34], "shuffl": [3, 19, 26], "mean": [3, 9, 10, 13, 16, 17, 23, 24, 26, 27, 31, 34], "everi": [3, 17], "time": [3, 5, 9, 16, 17, 30, 31, 33], "code": [3, 7, 9, 10, 14, 16, 17, 24, 28, 31, 34], "get": [3, 15, 23, 31], "just": [3, 17], "randomli": 3, "pick": 3, "number": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34], "specifi": [3, 7, 9, 10, 13, 16, 17, 18, 19, 21, 24, 26, 28, 31, 32, 33, 34], "none": [3, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34], "random": [3, 17, 19, 26], "x_train": 3, "x_test": 3, "y_train": 3, "y_test": 3, "width": [3, 7, 8, 16, 17, 24, 26, 28, 31, 34], "900": [3, 17], "600": [3, 24], "templat": [3, 15], "viridi": [3, 10, 17, 24, 31], "colorsampl": [3, 24], "For": [3, 6, 9, 10, 16, 17, 19, 24, 31, 34], "confus": [3, 9, 24, 26, 31], "loss": [3, 24, 26], "mae": [3, 26], "desir": [3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "pixel": [3, 17, 24, 26, 31], "scatter": [3, 24, 26], "plot": 3, "ggplot2": 3, "seaborn": 3, "simple_whit": 3, "plotly_whit": 3, "plotly_dark": 3, "present": [3, 17, 26], "xgridoff": 3, "ygridoff": 3, "gridon": 3, "e": [3, 7, 9, 10, 16, 17, 19, 20, 21, 24, 26, 31, 32, 33, 34], "g": [3, 7, 9, 10, 16, 17, 19, 20, 21, 24, 26, 31, 32, 33], "plasma": [3, 10, 17, 24, 31], "full": [3, 10, 17, 24, 31, 34], "builtin": [3, 10, 17, 24, 31], "discret": [3, 24], "displai": [3, 17, 24, 26, 31], "correspond": [3, 6, 9, 13, 17], "untitl": [3, 24, 27], "validationratio": 3, "hiddenlay": 3, "learningr": 3, "001": [3, 7, 16, 17, 26, 28, 31, 34], "epoch": [3, 24, 26], "batchsiz": 3, "patienc": [3, 8], "earlystop": 3, "true": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "crossvalidationtyp": 3, "holdout": [3, 26], "kfold": 3, "interv": [3, 30], "mantissa": [3, 5, 6, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "either": [3, 9, 14, 17, 31], "case": [3, 7, 8, 9, 13, 14, 16, 17, 24, 26, 28, 31, 32, 33, 34], "insensit": [3, 7, 8, 9, 13, 14, 16, 17, 24, 26, 28, 31, 32, 33, 34], "supervis": 3, "where": [3, 5, 9, 10, 16, 17, 19, 21, 28, 31, 32, 33, 34], "categor": [3, 17, 23], "label": [3, 13, 17, 21, 23, 24, 26, 31], "continu": [3, 19, 34], "numer": [3, 5, 9, 13, 17, 19, 23, 24, 26, 31, 33], "70": 3, "80": [3, 17, 26, 28], "left": [3, 7, 16, 17, 19, 24, 26, 28, 31, 34], "over": [3, 5, 15, 17], "after": [3, 10, 21, 22], "20": [3, 15, 17, 20, 24, 31], "hidden": [3, 26], "layer": [3, 26], "each": [3, 5, 6, 7, 9, 10, 14, 15, 16, 17, 19, 21, 24, 25, 26, 30, 31, 33, 34], "have": [3, 7, 8, 15, 17, 18, 19, 20, 26, 31, 33, 34], "3hidden": 3, "first": [3, 6, 7, 14, 16, 17, 19, 21, 22, 31, 32, 33, 34], "16": [3, 7, 8, 9, 16, 17, 26, 28, 31, 34], "second": [3, 6, 14, 16, 17, 22, 31, 32, 33, 34], "last": [3, 7, 14, 16, 19, 31, 32, 34], "rate": [3, 26], "wikipedia": [3, 7, 8, 9, 16, 17, 28, 30, 31, 33, 34], "wiki": [3, 7, 8, 9, 16, 17, 20, 28, 30, 31, 33, 34], "learning_r": 3, "neural_network_": 3, "machine_learn": 3, "propag": [3, 17], "network": [3, 26], "updat": [3, 17, 24], "instead": [3, 16, 17, 21, 24, 26, 28, 34], "singl": [3, 5, 17, 28, 31, 33], "stochast": 3, "gradient": [3, 26], "descent": [3, 26], "entir": [3, 15, 31], "batch": [3, 26], "determin": [3, 7, 8, 16, 17, 19, 32, 34], "improv": [3, 17, 26], "stop": [3, 17, 31], "earli": 3, "bool": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "doe": [3, 13, 14, 17, 21, 23, 27, 31], "certain": [3, 16], "k": [3, 9, 10, 13, 17, 26, 31, 34], "fold": [3, 26], "select": [3, 16, 17, 26, 30, 31, 34], "must": [3, 7, 8, 9, 14, 16, 17, 21, 24, 26, 28, 31, 33, 34], "less": [3, 5, 8, 16, 19, 31, 33, 34], "than": [3, 8, 14, 16, 17, 19, 28, 31, 33, 34], "total": [3, 16, 17, 30, 31], "decim": [3, 6, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "round": [3, 6, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 28, 30, 31, 32, 33, 34], "dict": [3, 7, 8, 13, 14, 15, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 33], "task_typ": 3, "test_ratio": 3, "validation_ratio": 3, "hidden_lay": 3, "batch_siz": [3, 26], "early_stop": 3, "random_st": 3, "cross_val_typ": 3, "suggest": [3, 16], "sampledataset": 3, "k_fold": [3, 26], "an": [3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 28, 30, 31, 32, 33, 34], "_annmodel": 3, "state": 3, "pre": [3, 17, 24, 31], "modeliniti": 3, "neural": [3, 26], "given": [3, 15, 16, 17, 19, 27, 31, 32, 34], "recal": 3, "f1": 3, "score": [3, 17], "els": [3, 15, 24], "error": [3, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 34], "absolut": [3, 17, 24, 26, 31, 34], "r": [3, 10, 26], "training_loss": 3, "validation_loss": 3, "training_accuraci": 3, "onli": [3, 8, 9, 13, 16, 17, 19, 26, 30, 31, 32, 33, 34], "validation_accuraci": 3, "accuracyfor": 3, "training_ma": 3, "validation_ma": 3, "training_ms": 3, "validation_ms": 3, "training_r2": 3, "validation_r2": 3, "overwrit": [3, 15, 17, 20, 24, 26, 31], "fals": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34], "ani": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 28, 31, 32, 33, 34], "exist": [3, 13, 17, 20, 21, 23, 24, 26, 31], "overwritten": [3, 17, 26], "otherwis": [3, 7, 8, 9, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 28, 30, 31, 32, 33, 34], "won": [3, 17, 20, 24, 26, 31], "t": [3, 5, 7, 16, 17, 20, 24, 26, 31, 34], "correctli": [3, 17, 26, 34], "four": 3, "confusion_matrix": 3, "belong": [4, 17, 24, 28, 31, 33], "axi": [5, 7, 9, 11, 14, 15, 16, 17, 22, 24, 26, 28, 30, 31, 32, 34], "align": [5, 8, 9, 14, 16, 22, 31, 32, 33, 34], "bound": [5, 8, 16, 21, 28, 31, 34], "tupl": [5, 9, 10, 17, 25, 26, 31, 33], "p": [5, 19], "pt": 5, "pad": 5, "other": [5, 9, 13, 14, 16, 17, 19, 31, 33], "ro": 5, "rd": 5, "rai": [5, 16, 34], "hit": 5, "tmin": 5, "tmax": 5, "param": [5, 21, 26], "b": [5, 6, 7, 10, 16, 17, 19, 28, 31, 33, 34], "basic": [5, 31], "hierarchi": [5, 17], "usag": 5, "prepar": 5, "primit": [5, 33], "etc": [5, 9, 17], "some_topologi": 5, "fromtopologi": 5, "max_leaf_s": 5, "silent": [5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 33, 34], "rough": 5, "candid": 5, "indic": [5, 13, 16, 17, 19, 26, 31], "cand": 5, "ox": 5, "oi": 5, "oz": 5, "dx": 5, "dy": 5, "dz": 5, "coars": 5, "idx": 5, "dist": 5, "item": [5, 13, 14, 15, 17, 19, 31], "maxleafs": [5, 33], "toler": [5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 31, 32, 33, 34], "0001": [5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 31, 32, 33, 34], "individu": [5, 9, 33], "argument": [5, 9], "store": [5, 9, 13, 14, 16, 17, 20, 21, 23, 26, 31, 33, 34], "topolog": [5, 9, 14, 16, 17, 23, 30, 31, 32, 33, 34], "One": [5, 6, 7, 9, 17, 31, 33], "comput": [5, 14, 16, 17, 25, 26, 30, 31, 32, 33, 34], "spatial": [5, 9, 17, 19, 31, 33], "maximum": [5, 7, 8, 9, 10, 16, 17, 19, 23, 24, 28, 31, 33, 34], "leaf": [5, 16, 17, 33], "smaller": [5, 17, 33], "deeper": [5, 33], "finer": [5, 33], "subdivis": [5, 7, 8, 33], "potenti": [5, 33], "slower": [5, 33], "larger": [5, 7, 16, 17, 28, 31, 33, 34], "produc": [5, 31, 33, 34], "shallow": [5, 33], "coarser": [5, 33], "group": [5, 17, 19, 24, 28, 31, 33], "margin": [5, 17, 24, 26, 31], "ad": [5, 6, 9, 13, 16, 17, 23, 24, 26, 28, 31, 32], "all": [5, 6, 8, 10, 16, 17, 19, 20, 21, 23, 31, 32, 34], "side": [5, 7, 8, 9, 16, 17, 24, 28, 30, 31, 33, 34], "help": [5, 17], "account": 5, "slight": [5, 17], "geometr": [5, 7, 9, 16, 17, 26, 31], "inaccuraci": 5, "adjac": [5, 13, 17, 19, 31], "nearli": [5, 33], "touch": [5, 17, 28, 31], "properli": 5, "enclos": [5, 33], "within": [5, 7, 8, 9, 13, 14, 16, 17, 19, 28, 31, 32, 33, 34], "warn": [5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 33, 34], "messag": [5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 33, 34], "suppress": [5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 33, 34], "broadli": 5, "interest": [5, 17], "approxim": [5, 7, 16, 17], "lower": [5, 7, 28, 34], "prune": 5, "query_box": 5, "whose": [5, 17], "possibl": [5, 9, 17, 19, 31, 32], "interesect": 5, "oper": [6, 17, 20, 24, 27, 31], "child": 6, "4x4": [6, 9, 14, 22, 27, 31, 33], "appli": [6, 8, 15, 16, 17, 22, 26, 27, 31, 34], "further": [6, 17, 19], "vertexa": [6, 14, 17, 33, 34], "vertexb": [6, 14, 17, 33], "empti": [6, 7, 16, 17, 21, 23, 31], "travers": 6, "root": [6, 17, 20, 26], "final": [6, 8, 17, 34], "xoffset": 6, "yoffset": 6, "zoffset": 6, "locat": [6, 7, 8, 9, 11, 14, 16, 17, 20, 24, 28, 30, 31, 34], "addit": [6, 7, 9, 10, 17, 22, 24], "offset": [6, 7, 8, 14, 16, 18, 21, 28, 34], "resiz": 6, "usid": [7, 8, 28, 30], "vside": [7, 8, 28, 30], "wside": [7, 8], "placement": [7, 8, 9, 14, 16, 28, 34], "being": [7, 8, 9, 14, 16, 17, 26, 28, 31, 34], "along": [7, 8, 11, 14, 16, 17, 22, 28, 30, 31, 32, 34], "bottom": [7, 8, 16, 17, 24, 26, 28, 31, 34], "lowerleft": [7, 8, 9, 16, 28, 34], "It": [7, 8, 9, 14, 16, 17, 19, 21, 24, 26, 28, 30, 31, 33, 34], "thei": [7, 8, 9, 13, 16, 17, 19, 24, 26, 31, 32, 33, 34], "mai": [7, 17, 19, 20, 24, 26, 31, 34], "fail": [7, 17, 20], "self": [7, 17, 26, 31], "alwai": [7, 16, 31], "check": [7, 15, 17, 19, 26], "succe": 7, "extern": [7, 8, 9, 14, 16, 28, 31, 33, 34], "boundari": [7, 8, 9, 14, 16, 17, 25, 28, 31, 33, 34], "thick": [7, 16, 17, 24, 31, 34], "bothsid": [7, 14], "thicken": [7, 16, 28], "loft": [7, 8, 28], "opposit": 7, "rais": 7, "except": [7, 31], "do": [7, 15, 17, 21, 31], "radiu": [7, 8, 9, 16, 17, 28, 30, 34], "circular": [7, 16, 28], "hollow": [7, 16], "section": [7, 16, 17], "outer": [7, 16, 25, 28, 34], "csh": 7, "top": [7, 8, 16, 17, 20, 24, 26, 31, 34], "upperleft": [7, 16, 34], "lowerright": [7, 16, 34], "upperright": [7, 16, 34], "fliphorizont": [7, 16, 34], "flipvert": [7, 16, 34], "shape": [7, 16, 17, 18, 28, 30, 31, 34], "overal": [7, 16, 17, 31, 34], "hortizont": [7, 16, 34], "arm": [7, 16, 34], "horizont": [7, 8, 15, 16, 17, 20, 30, 32, 34], "flip": [7, 16, 33, 34], "vsidesend": 7, "vsidesmiddl": 7, "hemispher": 7, "end": [7, 9, 13, 14, 15, 16, 17, 28, 30, 31, 32, 33, 34], "segment": [7, 14, 16, 28, 31, 34], "middl": [7, 34], "measur": [7, 8, 16, 17, 26, 32, 34], "known": [7, 21], "spheric": 7, "baseradiu": 7, "topradiu": 7, "dirz": 7, "statu": [7, 17, 31], "relationship": [7, 17, 21, 23, 31], "insid": [7, 16, 28, 31, 33], "outsid": [7, 20], "symmetri": [7, 16, 34], "symmetr": [7, 14, 16, 17, 31, 34], "tiltangl": [7, 8], "logic": [7, 8, 31], "compon": [7, 8, 16, 17, 31, 32], "assum": [7, 8, 9, 10, 14, 16, 17, 19, 28, 31, 32, 33, 34], "threshold": [7, 8, 19, 28], "tilt": [7, 8], "cardin": [7, 8], "verticalfac": 7, "tophorizontalfac": [7, 8], "bottomhorizontalfac": [7, 8], "inclinedfac": 7, "inclin": [7, 8], "verticalapertur": 7, "tophorizontalapertur": [7, 8], "bottomhorizontalapertur": [7, 8], "inclinedapertur": 7, "circumscrib": [7, 8], "longitud": [7, 8, 30], "latitud": [7, 8, 30], "60": [7, 16, 30], "central": [7, 16, 17, 34], "guarante": [7, 16, 31], "l": [7, 16, 31, 34], "manitssa": [7, 8], "focallength": [7, 16, 28, 34], "125": [7, 8, 28], "parabol": [7, 28], "focal": [7, 16, 28, 34], "parabola": [7, 28], "pleas": [7, 9, 16, 17, 31], "note": [7, 16, 17, 19, 31], "spring": [7, 17, 30], "apex": [7, 17, 24, 34], "profil": 7, "startoffset": 7, "endoffset": 7, "endcapa": 7, "endcapb": 7, "centerlin": 7, "xy": [7, 14, 16, 17, 18, 32, 33], "plane": [7, 14, 16, 17, 18, 28, 32, 33, 34], "start": [7, 9, 13, 14, 16, 17, 19, 28, 30, 31, 32, 33, 34], "cap": 7, "invers": [7, 16, 31, 34], "endcap": 7, "been": [7, 17, 19, 22, 33, 34], "ha": [7, 13, 14, 15, 16, 17, 19, 22, 31, 32, 33, 34], "outerfillet": [7, 16], "innerfillet": [7, 16], "rectangluar": [7, 16], "multipl": [7, 16, 17, 22, 28, 31], "factor": [7, 16, 17, 22, 31, 34], "1t": [7, 16], "inner": [7, 16, 25, 28], "5t": [7, 16], "angtoler": [7, 8, 16, 28, 31, 34], "collinear": [7, 8, 14, 16, 28, 31, 32, 34], "angular": [7, 8, 16, 28, 31, 34], "without": [7, 8, 16, 17, 28, 34], "45": [7, 28, 31, 34], "epsilon": [7, 9, 16, 17, 28, 31, 34], "01": [7, 16, 28, 31, 33, 34], "hip": [7, 28, 34], "straight": [7, 14, 16, 17, 24, 25, 28, 31, 32, 33, 34], "contribut": [7, 8, 14, 16, 28, 34], "\u9ad8\u7199\u9e4f": [7, 16, 28, 34], "xipeng": [7, 16, 28, 34], "gao": [7, 16, 28, 34], "gaoxipeng1998": [7, 16, 28, 34], "gmail": [7, 16, 28, 34], "librari": [7, 16, 19, 28, 31, 34], "botffi": [7, 16, 28, 34], "anoth": [7, 16, 28, 31, 33, 34], "better": [7, 16, 28, 31, 34], "supercel": 7, "enclosur": 7, "super": [7, 31, 33], "inputcel": 7, "uv": [7, 16], "triangular": [7, 16, 31, 34], "recurs": [7, 8], "recrus": [7, 8], "majorradiu": [7, 8], "minorradiu": [7, 8], "major": [7, 8, 16, 34], "minor": [7, 8, 16, 34], "around": [7, 8, 9, 14, 16, 17, 31, 34], "hole": [7, 16, 17, 25, 28], "rel": [7, 11, 21], "li": [7, 31, 33], "lowest": [7, 15, 17, 19], "bbox": 7, "comparison": [7, 14, 33], "alia": [7, 16, 17, 25, 31], "transfer": [8, 9, 16, 17, 28, 31, 33, 34], "minoffset": [8, 16, 34], "maxoffset": [8, 16, 34], "mincel": 8, "maxcel": 8, "maxattempt": 8, "100": [8, 9, 17, 21, 24, 26, 31, 33], "exclus": [8, 17, 31, 33], "disjoint": [8, 17, 28, 31], "find": [8, 15, 16, 17, 23, 24, 31, 33, 34], "linput": [8, 27], "ist": 8, "minimum": [8, 9, 10, 16, 17, 19, 23, 24, 31, 33, 34], "cannot": [8, 9, 16, 17, 31, 34], "attempt": [8, 9, 15, 16, 17, 19, 20, 24, 26, 31, 34], "wait": [8, 17, 31], "chang": [8, 26], "inherti": 8, "should": [8, 9, 15, 17, 19, 24, 31], "externalverticalfac": 8, "internalverticalfac": 8, "internalhorizontalfac": 8, "externalinclinedfac": 8, "internalinclinedfac": 8, "externalverticalapertur": 8, "internalverticalapertur": 8, "13": 8, "internalhorizontalapertur": 8, "14": 8, "externalinclinedapertur": 8, "15": [8, 17, 24, 30, 31], "internalinclinedapertur": 8, "delaunay_triangul": [8, 28], "both": [8, 9, 17], "prismat": 8, "voronoi_diagram": [8, 28], "ax": [8, 9, 17, 24, 31, 33], "formula": [9, 17], "xrang": 9, "yrang": 9, "xstring": 9, "ystring": 9, "rang": [9, 10, 13, 16, 17, 19, 31], "2d": [9, 14, 16, 17, 31, 34], "uppercas": 9, "independ": 9, "variabl": [9, 17, 26], "math": 9, "function": [9, 17, 19, 26, 27, 34], "sin": 9, "co": [9, 31, 33], "tan": 9, "sqrt": 9, "ab": [9, 16, 34], "step": [9, 14, 16, 17, 34], "unspecifi": 9, "instanc": [9, 17, 21, 26, 31, 33], "selector": [9, 31], "minsampl": 9, "nois": 9, "provid": [9, 17, 19, 21, 26, 31], "expect": [9, 31], "dimens": [9, 16, 31], "sure": 9, "consid": [9, 14, 16, 17, 27, 32, 33, 34], "part": [9, 16, 28, 34], "sens": 9, "region": [9, 34], "requir": [9, 17, 21], "dens": 9, "clusterx": 9, "free": [9, 31, 33], "higher": [9, 16, 31, 34], "highest": [9, 15, 17, 19, 24, 31, 34], "maxiter": [9, 16, 17, 34], "centroidkei": 9, "k_centroid": 9, "means_clust": 9, "under": [9, 13, 16, 17, 20, 21, 23, 24, 26, 28, 31, 34], "them": [9, 17, 21], "perimet": [9, 16], "mystic": 9, "rose": 9, "ignor": [9, 16, 17, 33], "output": [9, 15, 16, 17, 19, 20, 23, 24, 26, 27, 31, 32, 33, 34], "simplif": [9, 16, 34], "03": [9, 33], "facecolorkei": [9, 24, 31], "facecolor": [9, 24, 31], "xcolor": 9, "red": [9, 10, 15, 17, 24], "ycolor": 9, "green": [9, 10, 15, 17, 24], "zcolor": 9, "blue": [9, 10, 15, 17, 24], "hexadecim": [10, 17], "channel": 10, "wise": [10, 17], "clip": [10, 17, 18, 28], "max": [10, 26], "255": [10, 17, 24, 26, 31], "hex": [10, 17, 24, 26, 31], "ff88ff": 10, "convert": [10, 17, 23, 31], "rgb": [10, 17, 24, 26, 31], "cmyk": [10, 17, 24], "css": [10, 17, 24, 26, 31], "rrggbb": 10, "alpha": [10, 17], "develop": 10, "mozilla": 10, "u": [10, 11, 14, 16, 18, 34], "web": 10, "THe": [10, 31], "transpar": [10, 17, 24, 26, 31], "express": [10, 14, 17], "fulli": [10, 14, 31], "opaqu": [10, 24, 31], "minvalu": [10, 24], "maxvalu": [10, 24], "usealpha": 10, "fourth": 10, "m": [10, 17, 19, 28, 34], "ffffff": 10, "three": [10, 14, 15, 17, 24, 26, 31], "v": [11, 13, 16, 18, 25, 26, 33], "parameter": 11, "byobjectcontext": 11, "staticmethod": [13, 15], "def": [13, 15], "bydgldata": 13, "vlist": 13, "append": [13, 17, 19], "tolist": 13, "len": 13, "subtopologytyp": [13, 31], "labelkei": [13, 17, 23, 24], "weightkei": [13, 17], "includeweight": [13, 17], "weight": [13, 17, 26], "comma": [13, 17, 19, 31], "equival": 13, "searchtyp": [13, 31], "equal": [13, 17, 19, 30, 31, 34], "did": [13, 31], "meet": [13, 14, 31, 34], "criteria": [13, 31], "filteredindic": 13, "otherindic": 13, "listattribut": 13, "attribut": [13, 17, 25, 26, 31], "pair": [13, 17], "defaultvalu": 13, "edgea": 14, "edgeb": 14, "edge1": 14, "edge2": 14, "bracket": 14, "180": [14, 16, 28, 30, 32, 33], "decid": 14, "chosen": [14, 17, 28, 34], "arg": [14, 33], "closest": [14, 16, 19, 33], "sinc": 14, "made": [14, 19, 26, 30, 31], "equat": [14, 16, 28, 31, 33], "slope": 14, "inf": 14, "x_intercept": 14, "intercept": 14, "y_intercept": 14, "half": 14, "strict": [14, 17, 33], "strictli": [14, 33], "necessarili": 14, "fall": [14, 16, 17, 34], "parallel": [14, 16, 17, 31, 32, 34], "gaoxipeng": [14, 28], "coplanar": [14, 16, 17, 28, 31, 33, 34], "perpendicular": [14, 16, 32, 33, 34], "midpoint": 14, "useendvertex": 14, "preserv": [14, 33], "byosmfil": 15, "osm": 15, "openstudiomodelcor": 15, "print": [15, 17], "osmodel": 15, "read": [15, 17, 30, 31], "isnul": 15, "null": 15, "shadingsurfac": 15, "osmodelpath": 15, "weatherfilepath": 15, "designdayfilepath": 15, "floorlevel": [15, 17], "buildingnam": [15, 20], "topologicbuild": 15, "buildingtyp": 15, "northaxi": 15, "glazingratio": 15, "coolingtemp": 15, "heatingtemp": 15, "defaultspacetyp": 15, "189": 15, "2009": 15, "offic": [15, 20], "wholebuild": 15, "lg": 15, "cz4": 15, "spacenamekei": 15, "topologic_nam": [15, 20], "spacetypekei": 15, "topologic_typ": [15, 20], "shade": [15, 20], "asset": 15, "osmtempl": 15, "officebuild": 15, "weather": 15, "epw": 15, "gbr_london": 15, "gatwick": 15, "037760_iwec": 15, "dai": [15, 30], "ddy": 15, "floor": [15, 17], "assign": [15, 17, 23], "counter": [15, 16, 32, 33], "clockwis": [15, 16, 31, 32, 33, 34], "glaze": 15, "window": [15, 17, 20, 31], "exterior": [15, 16, 17, 28, 34], "temperatur": 15, "cool": [15, 20], "system": [15, 17, 22, 31], "activ": 15, "heat": [15, 20], "tabl": [15, 17, 21], "construct": [15, 17, 20, 21, 31], "schedul": 15, "export": [15, 17, 20, 23, 24, 31], "gbxml": 15, "written": [15, 17], "successfulli": [15, 17, 20], "hvacsizingsummari": 15, "reportforstr": 15, "facil": 15, "zone": 15, "sensibl": 15, "calcul": [15, 16, 17, 19, 22, 31, 32], "row": [15, 17, 19, 21, 22], "osbinarypath": 15, "outputfold": 15, "removefil": 15, "binari": [15, 17], "sql": 15, "shadingfac": 15, "sdk": 15, "latest": [15, 19], "facea": 16, "faceb": 16, "zrot": [16, 31, 34], "becom": [16, 31, 34], "so": [16, 17, 19, 31, 33, 34], "reduc": [16, 31, 34], "offsetkei": [16, 34], "stepoffseta": [16, 34], "stepoffsetb": [16, 34], "stepoffsetkeya": [16, 34], "stepoffsetkeyb": [16, 34], "numwork": [16, 17, 31, 34], "interior": [16, 28, 31, 34], "anti": [16, 32, 34], "previou": [16, 23, 34], "transit": [16, 28, 34], "seam": [16, 34], "rather": [16, 17], "shortest": [16, 17, 19, 31, 34], "worker": [16, 17, 31, 34], "caus": [16, 31, 34], "twice": [16, 17, 31, 34], "cpu": [16, 17, 31, 34], "host": [16, 20, 31, 33, 34], "minoffsetkei": [16, 34], "maxoffsetkei": [16, 34], "defaultminoffset": [16, 34], "defaultmaxoffset": [16, 34], "converg": [16, 17, 26, 34], "solut": [16, 34], "offseta": [16, 28, 34], "offsetb": [16, 28, 34], "internalboundariesclust": 16, "fromangl": [16, 28, 34], "toangl": [16, 28, 34], "360": [16, 28, 31, 34], "compactness_measure_of_a_shap": [16, 28], "compass": [16, 17, 30, 32], "fashion": [16, 32, 33, 34], "aperiod": [16, 34], "monotil": [16, 34], "call": [16, 17, 33, 34], "tile": [16, 34], "german": [16, 34], "famou": [16, 34], "physicist": [16, 34], "arxiv": [16, 34], "2303": [16, 34], "10798": [16, 34], "hexagon": [16, 34], "inputmod": [16, 34], "866025": [16, 34], "eccentr": [16, 17, 34], "majoraxislength": [16, 34], "minoraxislength": [16, 34], "32": [16, 26, 28, 34], "includeinternalboundari": 16, "nest": [16, 17, 19, 31, 32], "270": [16, 32], "300": 16, "simpl": [16, 21, 31], "those": [16, 17], "thu": [16, 17, 31], "asvertex": 16, "toward": [16, 30, 32], "treat": [16, 17, 24, 34], "radiuskei": [16, 34], "corner": [16, 28, 34], "fillet_": [16, 34], "mechan": [16, 34], "90": [16, 31, 32], "mirror": [16, 34], "convex": [16, 31, 34], "nput": 16, "obstacl": [16, 17], "fov": 16, "triangl": 16, "viewpoint": [16, 17], "larg": [16, 17, 19, 26], "deriv": [16, 17], "explicitli": 16, "credit": 16, "goe": 16, "websit": 16, "softwar": [16, 19, 32], "observ": 16, "convent": [16, 26, 32], "field": [16, 17, 25, 31], "field_of_view": 16, "accept": [16, 17, 31], "encount": 16, "how": [16, 30, 32, 33], "d_max": 16, "visibl": [16, 17], "longest": [16, 17, 31], "seen": 16, "d_min": 16, "d_avg": 16, "v_max": 16, "furthest": 16, "v_min": 16, "v_d": 16, "distribut": [16, 17], "quantifi": 16, "across": [16, 17, 21], "tell": 16, "whether": [16, 17, 19, 26, 31], "spread": 16, "out": [16, 17, 19, 26, 31], "concentr": [16, 17, 28], "uniform": 16, "balanc": 16, "skew": 16, "sight": 16, "constrain": 16, "v_densiti": 16, "per": [16, 17, 20, 26], "d_f": 16, "fractal": 16, "e_c": 16, "theta": 16, "occlus": 16, "proport": [16, 26], "physic": 16, "drift": 16, "closed_perimet": 16, "occlud": 16, "average_radi": 16, "varianc": 16, "deviat": [16, 17], "radial": [16, 17], "benedikt": 16, "1979": 16, "benediki": 16, "subtend": [16, 17, 24, 34], "resolut": 16, "externalvertic": 16, "internalvertic": 16, "toleavesonli": 16, "medial": 16, "medial_axi": 16, "outputtyp": [16, 32, 33, 34], "xyz": [16, 17, 22, 31, 32, 33, 34], "subset": [16, 17, 26, 31, 34], "permut": [16, 31, 32, 33, 34], "northangl": 16, "arrow": 16, "neg": [16, 17, 26, 31, 32], "mass": [16, 31], "unto": [16, 28, 33, 34], "centroidof": 16, "coeffici": [16, 17], "receiv": [16, 17, 31, 33, 34], "dougla": [16, 28, 34], "peucker": [16, 28, 34], "visvalingam": [16, 34], "whyatt": [16, 34], "reumann": [16, 34], "witkam": [16, 34], "shorter": [16, 19, 28, 34], "discard": [16, 34], "usual": [16, 31], "121": [16, 34], "hybrid": [16, 34], "affect": [16, 17, 34], "radiusa": [16, 28, 34], "radiusb": [16, 28, 34], "third": 16, "creation": [16, 31], "widtha": [16, 34], "widthb": [16, 34], "75": [16, 18, 34], "mode": [16, 17, 21, 31], "meshsiz": [16, 31], "classic": [16, 26, 31], "meshadapt": [16, 31], "frontal": [16, 31], "bamg": [16, 31], "fontal": [16, 31], "quad": [16, 17, 31], "pack": [16, 31], "parallelogram": [16, 31], "gmsh": [16, 31], "info": [16, 31], "texinfo": [16, 31], "veri": [16, 17, 31], "consum": [16, 31], "effect": [16, 17], "accessibility_centr": 17, "colorkei": [17, 24, 31], "ac_color": 17, "access": 17, "walk": 17, "Not": [17, 27, 28], "here": [17, 27], "api": [17, 27], "transfervertexdictionari": 17, "transferedgedictionari": 17, "4th": 17, "6th": 17, "vertexlabelkei": [17, 21, 23, 24, 31], "edgekei": 17, "vertexkei": 17, "adjacency_list": 17, "edgekeyfwd": 17, "edgekeybwd": 17, "bidirkei": 17, "bidirect": [17, 23], "useedgeindex": 17, "useedgelength": 17, "adjacency_matrix": 17, "forward": 17, "overrid": 17, "backward": 17, "suppos": 17, "bidrect": 17, "bidirekei": 17, "convers": [17, 31], "showzero": 17, "zerochar": 17, "zerocolor": 17, "rgba": [17, 24, 26, 31], "valuecolor": 17, "05": [17, 33, 34], "diagonalhighlight": 17, "diagonalcolor": 17, "cellsiz": 17, "fontfamili": 17, "arial": 17, "fontsiz": 17, "fontcolor": 17, "backgroundcolor": [17, 24, 26, 31], "headercolor": 17, "zero": 17, "subtl": 17, "glyph": 17, "zero_char": 17, "blank": 17, "charact": [17, 31], "entri": 17, "show_zero": 17, "ff0000": [17, 24, 26, 31], "hsl": [17, 24, 26, 31], "hsla": [17, 24, 26, 31], "50": [17, 24, 26, 31, 34], "hsv": [17, 24, 26, 31], "hsva": [17, 24, 26, 31], "35": [17, 28], "highlight": 17, "lightli": 17, "diagon": [17, 28], "font": 17, "famili": 17, "text": [17, 21, 31], "background": [17, 24, 26, 31], "header": [17, 21], "graph_obj": [17, 24], "_figur": [17, 24], "timelimit": [17, 31], "limit": [17, 21, 24, 31], "clustering_coeffici": 17, "includeattribut": 17, "includelabel": 17, "includegeometri": 17, "sitelabel": 17, "site_0001": 17, "sitedictionari": 17, "buildinglabel": 17, "building_0001": 17, "buildingdictionari": 17, "storeyprefix": 17, "storei": 17, "typekei": [17, 31], "verticeskei": 17, "edgeskei": 17, "edgelabelkei": [17, 23, 24, 31], "sourcekei": 17, "targetkei": 17, "xkei": 17, "hasx": 17, "ykei": 17, "hasi": 17, "zkei": 17, "hasz": 17, "geometrykei": 17, "walltyp": 17, "slabtyp": 17, "doortyp": 17, "door": [17, 20], "windowtyp": 17, "contenttyp": 17, "namespac": [17, 31], "wassimj": [17, 28], "resourc": [17, 31], "rdf": 17, "bot": 17, "ontologi": 17, "w3c": 17, "lbd": 17, "cg": 17, "wherev": 17, "site": 17, "prefix": [17, 21], "vertex_xxxx": 17, "xxxx": 17, "sequenti": [17, 26], "uniqu": [17, 19], "forc": [17, 19, 23, 33], "edge_xxxx": 17, "look": 17, "rdflib": 17, "turtl": 17, "thde": 17, "ttl": 17, "turtle2": 17, "linebreak": 17, "xml": 17, "pretti": 17, "ld": 17, "There": 17, "syntax": 17, "variant": [17, 31], "ntripl": 17, "nt": 17, "nt11": 17, "n": [17, 19, 31, 33, 34], "tripl": 17, "exactli": [17, 31, 33], "utf8": 17, "n3": 17, "notat": 17, "superset": 17, "cater": 17, "rule": [17, 27], "few": 17, "thing": 17, "trig": 17, "trix": 17, "nquad": 17, "nxcompat": 17, "betweenness_centr": 17, "bc_color": 17, "undirect": 17, "brand": 17, "unweight": 17, "o": [17, 19], "ve": 17, "bf": 17, "dijkstra": 17, "heap": 17, "networkx": 17, "rescal": 17, "aggreg": 17, "retriev": [17, 21, 31, 33], "blind": [17, 24], "friendli": [17, 24], "These": [17, 24, 30, 32], "protanopia": [17, 24], "deuteranopia": [17, 24], "tritanopia": [17, 24], "colorblind": [17, 24], "respect": [17, 24, 26], "graph_partit": 17, "topologicp": 17, "tri": 17, "parit": 17, "bridge_": 17, "graph_theori": [17, 33], "NOT": [17, 21], "weightfwd": 17, "weightbwd": 17, "xmin": [17, 23], "ymin": [17, 23], "zmin": [17, 23], "xmax": [17, 23], "ymax": [17, 23], "zmax": [17, 23], "schema": [17, 20, 21], "includecontext": 17, "graphidhead": [17, 21], "graph_id": [17, 21], "graphlabelhead": [17, 21, 26], "graphfeatureshead": 17, "feat": [17, 26], "graphfeatureskei": 17, "edgesrchead": [17, 21], "src_id": [17, 21], "edgedsthead": [17, 21], "dst_id": [17, 21], "edgelabelhead": [17, 21], "edgetrainmaskhead": 17, "train_mask": 17, "edgevalidatemaskhead": 17, "val_mask": 17, "edgetestmaskhead": 17, "test_mask": 17, "edgefeatureshead": 17, "edgefeatureskei": 17, "nodeidhead": [17, 21], "node_id": [17, 21], "nodelabelhead": [17, 21], "nodetrainmaskhead": 17, "nodevalidatemaskhead": 17, "nodetestmaskhead": 17, "nodefeatureshead": 17, "nodexhead": [17, 21], "nodeyhead": [17, 21], "nodezhead": [17, 21], "nodefeatureskei": 17, "yaml": [17, 21], "destin": [17, 21], "mask": [17, 26], "dgcnn": 17, "graphdictionari": 17, "vertexdictionari": 17, "edgedictionari": 17, "least": [17, 31, 33, 34], "howev": [17, 33], "sensit": [17, 31], "lowercas": 17, "apart": 17, "123": 17, "street": 17, "circul": 17, "live": [17, 21], "room": [17, 20], "dine": 17, "18": 17, "kitchen": 17, "bathroom": 17, "bedroom": 17, "adjacent_to": 17, "identifi": [17, 18, 20, 24, 31, 33], "includetyp": [17, 31], "excludetyp": [17, 31], "includerel": 17, "excluderel": 17, "useinternalvertex": 17, "storebrep": 17, "partial": 17, "bruno": 17, "postl": 17, "exclud": [17, 31], "jsondictionari": [17, 31], "vertexidkei": [17, 21, 31], "edgesourcekei": 17, "edgetargetkei": 17, "edgeidkei": [17, 21], "graphpropskei": 17, "properti": [17, 20, 26], "topologic_graph": 17, "signifi": 17, "nxgraph": 17, "vertexid": 17, "coordskei": 17, "coord": 17, "randomrang": 17, "coveredbi": [17, 31], "cover": [17, 31], "relfwd": 17, "relbwd": 17, "connectskei": 17, "ogc": [17, 31, 33], "iso": [17, 31, 33], "19107": [17, 31], "de": [17, 31, 33], "9im": [17, 31, 33], "rcc": [17, 31], "directapertur": 17, "viasharedtopologi": 17, "viasharedapertur": 17, "toexteriortopologi": 17, "toexteriorapertur": 17, "tocont": 17, "tooutpost": 17, "idkei": 17, "topologic_id": 17, "outpostskei": 17, "outpost": 17, "vertexcategorykei": [17, 23], "categori": [17, 23, 24, 26], "edgecategorykei": [17, 23], "graph_": 17, "discrete_mathemat": 17, "directli": [17, 21], "via": [17, 20, 21], "ch_color": 17, "betweenesscentr": 17, "betwe": 17, "maxcolor": 17, "chromat": 17, "graph_color": 17, "against": [17, 21, 24, 31], "closeness_centr": 17, "cc_color": 17, "avoid": [17, 19, 26], "costli": 17, "onc": 17, "multi": 17, "heapq": 17, "csgraph": 17, "wf_improv": 17, "oldkei": 17, "write": [17, 21], "best": [17, 19, 24], "louvain": 17, "louvain_method": 17, "grapha": 17, "graphb": 17, "weightaccessibilitycentr": 17, "weightattribut": 17, "weightgeometri": 17, "weightbetwennesscentr": 17, "weightclosenesscentr": 17, "weightdegreecentr": 17, "weightdiamet": 17, "weighteigenvectorcentr": 17, "weightglobalclusteringcoeffici": 17, "weighthopp": 17, "weightjaccard": 17, "weightpagerank": 17, "weightstructur": 17, "weightweisfeilerlehman": 17, "edgeweightkei": 17, "wlkei": 17, "hopperkei": 17, "maxhop": 17, "decai": 17, "similar": [17, 31, 34], "attributr": 17, "weisfeil": 17, "lehman": 17, "weisfeiler_leman_graph_isomorphism_test": 17, "jaccard": 17, "www": 17, "statologi": 17, "eigenvector": [17, 31], "global": [17, 19], "hopper": 17, "weifeil": 17, "wl": 17, "hop": 17, "dissimilar": 17, "betwenness_centr": 17, "degree_centr": 17, "eigenvector_centr": 17, "global_clustering_coeffici": 17, "weisfeiler_lehman": 17, "complement_graph": 17, "connet": 17, "unconnect": 17, "verticesa": [17, 31], "verticesb": [17, 31], "island": 17, "cn_color": 17, "spacesyntax": 17, "onlin": 17, "term": [17, 26], "ther": [17, 31], "contract": 17, "replac": [17, 27, 31, 33], "edge_contract": 17, "topollog": 17, "dc_color": 17, "degree_matrix": 17, "sequenc": 17, "mathworld": 17, "wolfram": 17, "dense_graph": 17, "map": [17, 19, 22, 31, 34], "overview": [17, 31], "analysi": [17, 31], "disconnect": 17, "finit": 17, "unless": 17, "usecentroid": 17, "boolean_oper": [17, 31], "loc": 17, "boolean": [17, 19, 24, 26, 31], "distance_": 17, "sortbi": 17, "endpoint": 17, "membership": 17, "special": 17, "isil": 17, "recreat": [17, 21], "eigen_vector_centr": 17, "evc_color": 17, "futur": 17, "power": 17, "graphlabel": 17, "graphfeatur": 17, "defaultedgelabel": [17, 23], "edgemaskkei": 17, "edgetrainratio": 17, "edgevalidateratio": 17, "edgetestratio": 17, "nodelabelkei": 17, "defaultnodelabel": 17, "nodemaskkei": 17, "nodetrainratio": 17, "nodevalidateratio": 17, "nodetestratio": 17, "contin": 17, "456": 17, "011": 17, "56": 17, "defauli": 17, "dicitonari": 17, "foud": 17, "graphwidth": 17, "graphlength": 17, "graphheight": 17, "defaultvertexcolor": 17, "black": [17, 24, 31], "defaultvertexs": 17, "vertexcolorkei": [17, 24, 31], "vertexsizekei": [17, 24, 31], "defaultedgecolor": 17, "defaultedgeweight": 17, "defaultedgetyp": 17, "edgecolorkei": [17, 24, 31], "exchang": 17, "gexf": 17, "devic": 17, "svg_inlin": 17, "devicekei": 17, "scalekei": 17, "directedkei": 17, "layout": 17, "layoutkei": 17, "rankdir": 17, "tb": 17, "rankdirkei": 17, "bgcolor": 17, "white": [17, 31], "bgcolorkei": 17, "fontnam": 17, "fontnamekei": 17, "fontsizekei": 17, "vertexsep": 17, "vertexsepkei": 17, "ranksep": 17, "ranksepkei": 17, "spline": [17, 31], "splineskei": 17, "showgraphlabel": 17, "graphlabelkei": 17, "graphlabelloc": 17, "graphlabellockei": 17, "showvertexlabel": [17, 24, 31], "vertexlabelprefix": 17, "vertexwidth": 17, "vertexwidthkei": 17, "vertexheight": 17, "vertexheightkei": 17, "vertexfixeds": 17, "vertexfixedsizekei": 17, "vertexshap": 17, "vertexshapekei": 17, "vertexstyl": 17, "fill": [17, 19], "vertexstylekei": 17, "vertexfillcolor": 17, "lightgrai": [17, 24, 26], "vertexfillcolorkei": 17, "vertexcolor": [17, 24, 31], "vertexfontcolor": 17, "vertexfontcolorkei": 17, "showedgelabel": [17, 24, 31], "edgelabelprefix": 17, "edgecolor": [17, 24, 31], "edgewidth": [17, 24, 31], "edgewidthkei": [17, 24, 31], "edgestyl": 17, "edgestylekei": 17, "edgearrowhead": 17, "edgearrowheadkei": 17, "edgefontcolor": 17, "edgefontcolorkei": 17, "graphviz": 17, "gv": 17, "pdf": [17, 24, 31], "png": [17, 24], "flag": [17, 24, 31], "engin": 17, "circo": 17, "fdp": 17, "neato": 17, "osag": 17, "sfdp": 17, "rank": [17, 24], "lr": [17, 26], "right": [17, 19, 24, 26, 28, 31], "rl": 17, "bt": 17, "polylin": 17, "whole": 17, "style": 17, "dash": [17, 24, 31], "border": [17, 24, 31], "arrowhead": [17, 24, 31], "propertieskei": 17, "indent": 17, "sortkei": 17, "ouptut": [17, 24, 31], "success": [17, 19, 20, 21, 24, 31], "unsucces": [17, 31], "categorykei": 17, "fiedler": 17, "algebraic_connect": 17, "smallest": [17, 31], "eigenvalu": 17, "instal": 17, "topdown": 17, "mindist": [17, 33], "vertextypekei": 17, "hass": 17, "hasse_diagram": 17, "inclus": 17, "some": [17, 26, 31], "omit": 17, "type_index": 17, "hess": 17, "frontier": 17, "basi": 17, "rbf": 17, "delta": 17, "vishwanathan": 17, "et": 17, "al": 17, "2010": 17, "cosin": 17, "incom": [17, 33], "coincid": [17, 33], "unidrect": 17, "isol": 17, "in_color": 17, "raw": 17, "wasserman": 17, "faust": 17, "bipartit": 17, "bipartite_graph": 17, "complete_graph": 17, "isomorph": 17, "satisfi": 17, "erd\u0151": 17, "gallai": 17, "theorem": 17, "erd": 17, "c5": 17, "e2": [17, 28], "93gallai_theorem": 17, "prevent": 17, "indefinit": 17, "particularli": 17, "geo": 17, "lcategoryabel": 17, "neighborhood": 17, "seed": [17, 19, 26], "kwarg": [17, 33], "conveni": 17, "dispatch": 17, "invalid": [17, 33], "unsupport": 17, "common": [17, 31], "alias": 17, "laplacian_matrix": 17, "line_graph": 17, "lcc": 17, "costkei": 17, "maxim": [17, 26], "longest_path": 17, "maxmatch": 17, "supergraph": 17, "descend": 17, "residualkei": 17, "residu": 17, "maximum_flow_problem": 17, "capac": 17, "targetvertex": 17, "reconnect": 17, "delet": [17, 21, 23, 31], "span": 17, "minimum_spanning_tre": 17, "navig": 17, "veritc": 17, "outgo": [17, 33], "85": 17, "page_rank": 17, "pr_color": 17, "neighbor": [17, 19, 34], "resolv": [17, 28], "handl": [17, 31], "dangl": 17, "cach": 17, "l1": 17, "eigen": 17, "vertexs": [17, 24, 31], "vertexgroupkei": [17, 24, 31], "vertexgroup": [17, 24, 31], "minvertexgroup": 17, "maxvertexgroup": 17, "edgeweight": 17, "showneighbour": 17, "selectmenu": 17, "filtermenu": 17, "pyvi": 17, "bug": 17, "hi": 17, "showneighbor": 17, "shown": [17, 24, 31], "hover": 17, "menu": 17, "inlin": 17, "browser": [17, 24], "tab": [17, 31], "topologytyp": [17, 31, 33], "grouplabelkei": 17, "groupcountkei": 17, "count": 17, "induc": 17, "sub": [17, 23, 31, 33], "member": [17, 19], "distinct": [17, 21, 31], "quotient_graph": 17, "group_label": 17, "lookup": 17, "back": 17, "That": 17, "rootvertex": 17, "spring_3d": 17, "fruchterman": 17, "reingold": 17, "tillford": 17, "cirumfer": 17, "segement": 17, "speher": 17, "raidu": 17, "cubic": 17, "constant": [17, 28], "attract": 17, "repuls": [17, 33], "solv": 17, "cluster_2d": 17, "cluster_3d": 17, "consider": 17, "whatev": 17, "minimis": 17, "pathlimit": 17, "sagitta": [17, 24, 31, 34], "vertexmingroup": [17, 24, 31], "vertexmaxgroup": [17, 24, 31], "showvertic": [17, 24, 31], "showvertexlegend": [17, 24, 31], "edgegroupkei": [17, 24, 31], "edgegroup": [17, 24, 31], "edgemingroup": [17, 24, 31], "edgemaxgroup": [17, 24, 31], "showedg": [17, 24, 31], "showedgelegend": [17, 24, 31], "950": [17, 24, 26, 31], "500": [17, 24, 26, 31], "axiss": [17, 24, 31], "marginleft": [17, 24, 26, 31], "marginright": [17, 24, 26, 31], "margintop": [17, 24, 26, 31], "marginbottom": [17, 24, 26, 31], "camera": [17, 24, 31], "perspect": [17, 24, 31], "toplogic_cor": 17, "mathemat": [17, 24, 34], "chord": [17, 24, 34], "drawn": [17, 24, 31], "permenant": [17, 24, 31], "screen": [17, 24, 31], "legend": [17, 24, 31], "discov": [17, 24, 31], "suitabl": [17, 24, 31], "orthograph": [17, 24, 31], "vertexmatch": 17, "callabl": 17, "vertex_match": 17, "sub_vertex": 17, "super_vertex": 17, "cutvertex": 17, "cutedg": 17, "cut_": 17, "OR": 17, "mobiu": 17, "strip": [17, 28], "27s_graph": 17, "degree_": [17, 33], "viewpointsa": 17, "viewpointsb": 17, "feature_id": 17, "perfect": [17, 31], "message_queu": [17, 31], "authkei": [17, 31], "daemon": [17, 31], "exitcod": [17, 31], "exit": [17, 31], "yet": [17, 31], "pid": [17, 31], "sentinel": [17, 31], "descriptor": [17, 31], "unix": [17, 31], "termin": [17, 31], "start_index": 17, "overridden": [17, 31], "num_work": [17, 31], "uorigin": 18, "vorigin": 18, "urang": 18, "vrang": 18, "paratm": 18, "dir": 18, "lista": 19, "bin": 19, "consult": 19, "seed_idx": 19, "group_siz": 19, "visited_glob": 19, "breadth": 19, "strategi": 19, "reus": 19, "visit": 19, "growth": 19, "until": 19, "reach": 19, "expans": 19, "grown": 19, "alreadi": 19, "previous": 19, "intend": 19, "gener": [19, 20, 21, 31], "subgroup": 19, "vari": 19, "due": 19, "diversifi": 19, "sublist": 19, "extra": 19, "yield": [19, 31, 34], "duplic": [19, 33], "ascend": 19, "would": 19, "insert": [19, 21], "odd": 19, "otherlist": 19, "reverseflag": 19, "subsequ": 19, "lastli": 19, "particular": 19, "swap": 19, "includeroom": 20, "includefac": 20, "includeshad": 20, "includeapertur": 20, "includedoor": 20, "includeorphanedroom": 20, "includeorphanedfac": 20, "includeorphanedshad": 20, "includeorphanedapertur": 20, "includeorphaneddoor": 20, "tool": [20, 31], "pars": 20, "standalon": 20, "context_geometri": 20, "orphaned_shad": 20, "orphaned_apertur": 20, "orphaned_door": 20, "never": 20, "orphanedroom": 20, "clustser": 20, "orphanedfac": 20, "orphanedshad": 20, "parent": 20, "orphanedapertur": 20, "orphaneddoor": 20, "verbatim": 20, "built": 20, "hbconstructionset": 20, "hb": 20, "hbmodel": 20, "tpbuild": 20, "tpshadingfacesclust": 20, "generic_build": 20, "defaultprogramidentifi": 20, "defaultconstructionsetidentifi": 20, "coolingsetpoint": 20, "heatingsetpoint": 20, "humidifyingsetpoint": 20, "dehumidifyingsetpoint": 20, "55": 20, "roomnamekei": 20, "roomtypekei": 20, "aperturetypekei": 20, "addsensorgrid": 20, "tpshadingfaceclust": 20, "hvac": 20, "celsiu": 20, "humidifi": 20, "percentag": [20, 31], "sensor": 20, "identifii": 20, "hbprogram": 20, "graphidprefix": 21, "meta": [21, 26], "upsert": 21, "k\u00f9zu": 21, "py": 21, "primari": 21, "num_nod": 21, "int64": 21, "num_edg": 21, "prop": 21, "doubl": 21, "TO": 21, "ensure_schema": 21, "exec": 21, "materi": [21, 31], "g0": 21, "graphs_upsert": 21, "thread": 21, "underli": 21, "graphid": 21, "graphcard": 21, "dropschema": 21, "recreateschema": 21, "db_path": 21, "soft": 21, "clear": 21, "hard": 21, "drop_schema": 21, "drop": 21, "re": 21, "execut": 21, "cypher": [21, 23], "reconstruct": 21, "pass": [21, 33], "metadata": 21, "pagin": 21, "substr": [21, 31, 32, 33], "props_contain": 21, "props_equ": 21, "min_nod": 21, "max_nod": 21, "min_edg": 21, "max_edg": 21, "skip": [21, 26], "remain": [21, 31], "card": 21, "graphidkei": 21, "prior": 21, "mata": 22, "matb": 22, "matric": 22, "4x3": 22, "anglex": 22, "anglei": 22, "anglez": 22, "scalex": 22, "scalei": 22, "scalez": 22, "translatex": 22, "translatei": 22, "translatez": 22, "vectora": [22, 32], "vectorb": [22, 32], "orientationa": 22, "orientationb": 22, "adjust": [22, 26, 33], "defaultvertexlabel": 23, "defaultvertexcategori": 23, "connected_to": 23, "defaultedgecategori": 23, "neo4jgraph": 23, "_sync": 23, "driver": 23, "boltdriv": 23, "neo4jdriv": 23, "defaultvertexlabel_xxx": 23, "dfefault": 23, "defaultedgelabel_xxx": 23, "defaul": 23, "usernam": 23, "password": 23, "server": 23, "log": [23, 26], "relationshipkei": 23, "deleteal": 23, "topologicgraphvertex": 23, "bi": 23, "drection": 23, "ntick": 24, "xposit": 24, "outlinewidth": 24, "subtitl": [24, 31], "bar": [24, 26], "tick": [24, 31], "outlin": [24, 31], "frame": [24, 31], "datafram": 24, "pd": 24, "arrows": [24, 31], "arrowsizekei": [24, 31], "vertexbordercolor": [24, 31], "vertexborderwidth": [24, 31], "vertexbordercolorkei": [24, 31], "vertexborderwidthkei": [24, 31], "vertexlegendlabel": [24, 31], "vertexlegendrank": 24, "vertexlegendgroup": 24, "edgedash": [24, 31], "edgedashkei": [24, 31], "edgelegendlabel": [24, 31], "edgelegendrank": 24, "edgelegendgroup": 24, "draw": [24, 31], "showfac": [24, 31], "faceopac": [24, 31], "faceopacitykei": [24, 31], "fafafa": [24, 31], "facelabelkei": [24, 31], "facegroupkei": [24, 31], "facegroup": [24, 31], "facemingroup": [24, 31], "facemaxgroup": [24, 31], "showfacelegend": [24, 31], "facelegendlabel": [24, 31], "facelegendrank": 24, "facelegendgroup": 24, "intensitykei": [24, 31], "intens": [24, 31, 33], "isn": [24, 31], "opac": [24, 31], "bhave": [24, 31], "mingroup": [24, 31], "maxgroup": [24, 31], "idenitfi": [24, 31], "1920": 24, "1080": 24, "imag": 24, "jpg": 24, "jpeg": 24, "svg": 24, "webp": 24, "sucessfulli": 24, "xtitl": [24, 26], "ytitl": [24, 26], "showscal": [24, 31], "40": [24, 26], "arrai": [24, 31], "minmum": 24, "correl": 24, "dotcolor": 24, "linecolor": 24, "800": 24, "theme": 24, "scheme": 24, "dark": 24, "light": 24, "xspace": [24, 26], "yspace": [24, 26], "usemark": [24, 26], "charttyp": [24, 26], "gridcolor": [24, 26], "df": 24, "data_label": 24, "chart": [24, 26], "marker": [24, 26], "xcategori": 24, "ycategori": 24, "grai": 24, "cbvalu": [24, 31], "cbtick": [24, 31], "cbx": [24, 31], "cbwidth": [24, 31], "cboutlinewidth": [24, 31], "cbtitl": [24, 31], "cbsubtitl": [24, 31], "cbunit": [24, 31], "colorbar": [24, 31], "1200": 24, "environ": 24, "vscode": 24, "studio": 24, "colab": 24, "googl": 24, "ifram": 24, "jupyterlab": 24, "anyth": 24, "widthkei": 24, "dashkei": 24, "groupkei": [24, 28], "legendlabel": 24, "legendgroup": 24, "legendrank": 24, "showlegend": 24, "sizekei": 24, "bordercolor": 24, "borderwidth": 24, "bordercolorkei": 24, "borderwidthkei": 24, "v1": 25, "v2": 25, "v3": 25, "polygon": [25, 31], "ccw": 25, "cw": 25, "data_list": 26, "node_level": 26, "graph_level": 26, "node_attr_kei": 26, "edge_attr_kei": 26, "has_download": 26, "download": 26, "has_process": 26, "num_class": 26, "num_edge_featur": 26, "num_featur": 26, "num_node_featur": 26, "processed_dir": 26, "processed_file_nam": 26, "processed_path": 26, "filepath": 26, "raw_dir": 26, "raw_file_nam": 26, "raw_path": 26, "correct": 26, "wrong": 26, "numberofgraphclass": 26, "nodeattrkei": 26, "edgeattrkei": 26, "nodeonehotencod": 26, "nodefeaturescategori": 26, "edgeonehotencod": 26, "edgefeaturescategori": 26, "addselfloop": 26, "pytorch": 26, "customdataset": 26, "model_typ": 26, "cv_type": 26, "hl_width": 26, "conv_layer_typ": 26, "sageconv": 26, "pool": 26, "avgpool": 26, "use_gpu": 26, "loss_funct": 26, "entropi": 26, "input_typ": 26, "regressor": 26, "classifierholdout": 26, "neuron": 26, "convolut": 26, "graphconv": 26, "ginconv": 26, "tagconv": 26, "dgn": 26, "maxpool": 26, "sumpool": 26, "gpu": 26, "likelihood": 26, "hparam": 26, "trainingdataset": 26, "validationdataset": 26, "testingdataset": 26, "portion": 26, "hyper": 26, "pygdataset": 26, "probabl": 26, "cv": 26, "hl": 26, "conv": 26, "min": 26, "torch": 26, "nn": 26, "adam": 26, "amsgrad": 26, "beta": 26, "999": 26, "ep": 26, "1e": 26, "06": [26, 33], "weightdecai": 26, "rho": 26, "lr_decai": 26, "extens": 26, "abrupt": 26, "smooth": 26, "momentum": 26, "minima": 26, "saddl": 26, "denomin": 26, "stabil": 26, "000001": 26, "our": 26, "l2": 26, "penalti": 26, "regular": 26, "techniqu": 26, "mape": 26, "r2": 26, "rmse": 26, "plolti": 26, "grammar": 27, "tranform": [27, 31], "request": [27, 31], "maximumgap": 28, "mergejunct": 28, "still": 28, "experiment": [28, 31], "resembl": 28, "ribbon": 28, "gap": 28, "junction": 28, "subdivid": 28, "aid": 28, "36": [28, 30, 34], "hyperbol": 28, "domain": 28, "parabolid": 28, "llvertex": 28, "lrvertex": 28, "ulvertex": 28, "urvertex": 28, "rectangular": 28, "upper": [28, 34], "On": 28, "m\u00f6biu": 28, "c3": 28, "b6bius_strip": 28, "optioal": [28, 34], "simplifyboundari": 28, "ramer": 28, "93dougla": 28, "93peucker_algorithm": 28, "issu": 28, "optimis": 28, "date": [30, 31], "datetim": 30, "autumn": 30, "equinox": 30, "september_equinox": 30, "summer": 30, "solstic": 30, "minuteinterv": 30, "dayinterv": 30, "hyperfinearchitectur": 30, "minut": 30, "hourli": 30, "world": [30, 31], "orbit": 30, "othwerwis": [30, 31, 34], "incldu": 30, "date_path": 30, "winter": 30, "hourly_path": 30, "hour": 30, "ground": 30, "starttim": 30, "endtim": 30, "startdai": 30, "enddai": 30, "365": 30, "vernal": 30, "march_equinox": 30, "summer_solstic": 30, "winter_solstic": 30, "so_dict": 31, "seem": 31, "subtpologi": 31, "hosttopologi": [31, 33], "xrot": 31, "yrot": 31, "guidkei": 31, "defaultcolor": 31, "defaulttyp": 31, "authorkei": 31, "datekei": 31, "dotbimpi": 31, "dotbim": 31, "dd": 31, "mm": 31, "yyyi": 31, "carri": 31, "dxf": 31, "capabl": 31, "record": 31, "lengthunit": 31, "ifc_fil": 31, "could": [31, 32, 33], "mani": 31, "indexesd": 31, "vertex_dict": 31, "edge_dict": 31, "face_dict": 31, "cell_dict": 31, "coorespod": 31, "objfil": 31, "mtlfile": 31, "defaultopac": 31, "transposeax": 31, "textur": 31, "mtl": 31, "objpath": 31, "mtlstring": 31, "occt": 31, "dev": 31, "opencascad": 31, "occt_user_guides__modeling_data": 31, "topods_shap": 31, "inoput": 31, "edge_color": 31, "edge_width": 31, "face_color": 31, "face_opac": 31, "curv": 31, "quadrilater": 31, "frameidkei": 31, "conform": 31, "sepat": 31, "No": [31, 34], "word": 31, "vertex_label": 31, "67": 31, "61": 31, "47": 31, "93": 31, "22": 31, "canon": 31, "princip": 31, "pca": 31, "covari": 31, "erron": 31, "increas": [31, 34], "center_of_mass": 31, "clean": 31, "memori": 31, "consumpt": 31, "WITH": 31, "care": 31, "hull": [31, 34], "deep": 31, "slow": 31, "immedi": [31, 33], "topologya": 31, "topologyb": 31, "trandict": 31, "operand": 31, "addnestingdepth": 31, "divis": 31, "typefilt": 31, "view_draw": 31, "explos": 31, "restrict": 31, "occt_brep_format": 31, "autocad_dxf": 31, "r2010": 31, "namekei": 31, "opacitykei": 31, "256": 31, "wavefront": 31, "topologiesb": 31, "topologiesa": 31, "elig": 31, "timeout": 31, "ptional": 31, "similarity_": 31, "congruent": 31, "largest": 31, "nonplanar": 31, "dira": 31, "dirb": 31, "origina": 31, "originb": 31, "old": 31, "movement": 31, "prinicip": 31, "contentlist": 31, "rebuild": 31, "roll": 31, "pitch": 31, "yaw": 31, "euler": 31, "aircraft_principal_ax": 31, "quaternion": 31, "timestamp": 31, "showfigur": 31, "unsort": 31, "often": 31, "weaker": 31, "ly": 31, "unknown": 31, "solid_of_revolut": 31, "spun": 31, "minsiz": 31, "maxsiz": 31, "maxcombin": 31, "combin": [31, 32], "prone": 31, "combinatori": 31, "user": 31, "minu": 31, "ratiorang": 31, "linear": 31, "inward": 31, "outward": 31, "traingul": 31, "tranvertic": 31, "tranedg": 31, "tranfac": 31, "trancel": 31, "toplogi": 31, "topologgi": 31, "anglerang": 31, "v5": 31, "namescap": 31, "send": 31, "3dviewer": 31, "themselv": 31, "abov": 32, "coodin": 32, "up_noertheast": 32, "up_north": 32, "up_northeast": 32, "up_east": 32, "up_southeast": 32, "up_south": 32, "up_southwest": 32, "up_west": 32, "up_northwest": 32, "down_north": 32, "down_northeast": 32, "down_east": 32, "down_southeast": 32, "down_south": 32, "down_southwest": 32, "down_west": 32, "down_northwest": 32, "much": 32, "therefor": 32, "blender": 32, "xlist": 33, "ylist": 33, "zlist": 33, "xepsilon": 33, "yepsilon": 33, "zepsilon": 33, "counterclockwis": 33, "includecentroid": 33, "trivial": 33, "itself": 33, "retain": 33, "closer": 33, "now": 33, "modifi": 33, "hold": 33, "peripher": 33, "said": 33, "02": 33, "04": 33, "07": 33, "08": 33, "09": 33, "usekdtre": 33, "kdtree": 33, "infinit": 33, "cz": 33, "strongli": 33, "repel": 33, "middlevertex": 34, "head": 34, "tail": 34, "concav": 34, "moreira": 34, "santo": 34, "neighbour": 34, "FOR": 34, "THE": 34, "OF": 34, "occupi": 34, "BY": 34, "grapp": 34, "2007": 34, "confer": 34, "graphic": 34, "theori": 34, "smoother": 34, "decreas": 34, "maxvertic": 34, "circuit": 34, "foci": 34, "yidan": 34, "xue": 34, "wirea": 34, "wireb": 34, "intermedi": 34, "contour": 34, "raster": 34, "zigzag": 34, "toolpath": 34, "modif": 34, "were": 34, "altern": 34, "appear": 34, "turn": 34, "circumfer": 34}, "objects": {"": [[2, 0, 0, "-", "topologicpy"]], "topologicpy": [[3, 0, 0, "-", "ANN"], [4, 0, 0, "-", "Aperture"], [5, 0, 0, "-", "BVH"], [6, 0, 0, "-", "CSG"], [7, 0, 0, "-", "Cell"], [8, 0, 0, "-", "CellComplex"], [9, 0, 0, "-", "Cluster"], [10, 0, 0, "-", "Color"], [11, 0, 0, "-", "Context"], [13, 0, 0, "-", "Dictionary"], [14, 0, 0, "-", "Edge"], [15, 0, 0, "-", "EnergyModel"], [16, 0, 0, "-", "Face"], [17, 0, 0, "-", "Graph"], [18, 0, 0, "-", "Grid"], [19, 0, 0, "-", "Helper"], [20, 0, 0, "-", "Honeybee"], [21, 0, 0, "-", "Kuzu"], [22, 0, 0, "-", "Matrix"], [23, 0, 0, "-", "Neo4j"], [24, 0, 0, "-", "Plotly"], [25, 0, 0, "-", "Polyskel"], [26, 0, 0, "-", "PyG"], [27, 0, 0, "-", "ShapeGrammar"], [28, 0, 0, "-", "Shell"], [30, 0, 0, "-", "Sun"], [31, 0, 0, "-", "Topology"], [32, 0, 0, "-", "Vector"], [33, 0, 0, "-", "Vertex"], [34, 0, 0, "-", "Wire"], [35, 0, 0, "-", "version"]], "topologicpy.ANN": [[3, 1, 1, "", "ANN"]], "topologicpy.ANN.ANN": [[3, 2, 1, "", "DatasetByCSVPath"], [3, 2, 1, "", "DatasetBySampleName"], [3, 2, 1, "", "DatasetSampleNames"], [3, 2, 1, "", "DatasetSplit"], [3, 2, 1, "", "Figures"], [3, 2, 1, "", "Hyperparameters"], [3, 2, 1, "", "HyperparametersBySampleName"], [3, 2, 1, "", "Initialize"], [3, 2, 1, "", "Load"], [3, 2, 1, "", "Metrics"], [3, 2, 1, "", "ModelData"], [3, 2, 1, "", "Save"], [3, 2, 1, "", "Test"], [3, 2, 1, "", "Train"]], "topologicpy.Aperture": [[4, 1, 1, "", "Aperture"]], "topologicpy.Aperture.Aperture": [[4, 2, 1, "", "ByTopologyContext"], [4, 2, 1, "", "Topology"]], "topologicpy.BVH": [[5, 1, 1, "", "AABB"], [5, 1, 1, "", "BVH"]], "topologicpy.BVH.AABB": [[5, 2, 1, "", "center"], [5, 2, 1, "", "contains_point"], [5, 2, 1, "", "extent"], [5, 2, 1, "", "from_points"], [5, 3, 1, "", "maxx"], [5, 3, 1, "", "maxy"], [5, 3, 1, "", "maxz"], [5, 3, 1, "", "minx"], [5, 3, 1, "", "miny"], [5, 3, 1, "", "minz"], [5, 2, 1, "", "overlaps"], [5, 2, 1, "", "ray_intersect"], [5, 2, 1, "", "union"]], "topologicpy.BVH.BVH": [[5, 2, 1, "", "ByTopologies"], [5, 2, 1, "", "Clashes"], [5, 2, 1, "", "Depth"], [5, 2, 1, "", "Nearest"], [5, 2, 1, "", "QueryAABB"], [5, 2, 1, "", "Raycast"]], "topologicpy.CSG": [[6, 1, 1, "", "CSG"]], "topologicpy.CSG.CSG": [[6, 2, 1, "", "AddOperationVertex"], [6, 2, 1, "", "AddTopologyVertex"], [6, 2, 1, "", "Connect"], [6, 2, 1, "", "Init"], [6, 2, 1, "", "Invoke"], [6, 2, 1, "", "Topologies"]], "topologicpy.Cell": [[7, 1, 1, "", "Cell"]], "topologicpy.Cell.Cell": [[7, 2, 1, "", "Area"], [7, 2, 1, "", "Box"], [7, 2, 1, "", "ByFaces"], [7, 2, 1, "", "ByOffset"], [7, 2, 1, "", "ByShell"], [7, 2, 1, "", "ByShells"], [7, 2, 1, "", "ByThickenedFace"], [7, 2, 1, "", "ByThickenedShell"], [7, 2, 1, "", "ByWires"], [7, 2, 1, "", "ByWiresCluster"], [7, 2, 1, "", "CHS"], [7, 2, 1, "", "CShape"], [7, 2, 1, "", "Capsule"], [7, 2, 1, "", "Compactness"], [7, 2, 1, "", "Cone"], [7, 2, 1, "", "ContainmentStatus"], [7, 2, 1, "", "CrossShape"], [7, 2, 1, "", "Cube"], [7, 2, 1, "", "Cylinder"], [7, 2, 1, "", "Decompose"], [7, 2, 1, "", "Dodecahedron"], [7, 2, 1, "", "Edges"], [7, 2, 1, "", "Egg"], [7, 2, 1, "", "ExternalBoundary"], [7, 2, 1, "", "Faces"], [7, 2, 1, "", "Hyperboloid"], [7, 2, 1, "", "IShape"], [7, 2, 1, "", "Icosahedron"], [7, 2, 1, "", "InternalBoundaries"], [7, 2, 1, "", "InternalVertex"], [7, 2, 1, "", "IsOnBoundary"], [7, 2, 1, "", "LShape"], [7, 2, 1, "", "Octahedron"], [7, 2, 1, "", "Paraboloid"], [7, 2, 1, "", "Pipe"], [7, 2, 1, "", "Prism"], [7, 2, 1, "", "RHS"], [7, 2, 1, "", "RemoveCollinearEdges"], [7, 2, 1, "", "Roof"], [7, 2, 1, "", "SHS"], [7, 2, 1, "", "Sets"], [7, 2, 1, "", "Shells"], [7, 2, 1, "", "Sphere"], [7, 2, 1, "", "SurfaceArea"], [7, 2, 1, "", "TShape"], [7, 2, 1, "", "Tetrahedron"], [7, 2, 1, "", "Torus"], [7, 2, 1, "", "Torus_old"], [7, 2, 1, "", "Tube"], [7, 2, 1, "", "Vertices"], [7, 2, 1, "", "Volume"], [7, 2, 1, "", "Wedge"], [7, 2, 1, "", "Wires"]], "topologicpy.CellComplex": [[8, 1, 1, "", "CellComplex"]], "topologicpy.CellComplex.CellComplex": [[8, 2, 1, "", "Box"], [8, 2, 1, "", "ByCells"], [8, 2, 1, "", "ByCellsCluster"], [8, 2, 1, "", "ByDisjointedFaces"], [8, 2, 1, "", "ByFaces"], [8, 2, 1, "", "ByFacesCluster"], [8, 2, 1, "", "ByWires"], [8, 2, 1, "", "ByWiresCluster"], [8, 2, 1, "", "Cells"], [8, 2, 1, "", "Cube"], [8, 2, 1, "", "Decompose"], [8, 2, 1, "", "Delaunay"], [8, 2, 1, "", "Edges"], [8, 2, 1, "", "ExternalBoundary"], [8, 2, 1, "", "ExternalFaces"], [8, 2, 1, "", "Faces"], [8, 2, 1, "", "InternalFaces"], [8, 2, 1, "", "NonManifoldFaces"], [8, 2, 1, "", "Octahedron"], [8, 2, 1, "", "Prism"], [8, 2, 1, "", "RemoveCollinearEdges"], [8, 2, 1, "", "Shells"], [8, 2, 1, "", "Tetrahedron"], [8, 2, 1, "", "Torus"], [8, 2, 1, "", "Vertices"], [8, 2, 1, "", "Volume"], [8, 2, 1, "", "Voronoi"], [8, 2, 1, "", "Wires"]], "topologicpy.Cluster": [[9, 1, 1, "", "Cluster"]], "topologicpy.Cluster.Cluster": [[9, 2, 1, "", "ByFormula"], [9, 2, 1, "", "ByTopologies"], [9, 2, 1, "", "CellComplexes"], [9, 2, 1, "", "Cells"], [9, 2, 1, "", "DBSCAN"], [9, 2, 1, "", "Edges"], [9, 2, 1, "", "ExternalBoundary"], [9, 2, 1, "", "Faces"], [9, 2, 1, "", "FreeCells"], [9, 2, 1, "", "FreeEdges"], [9, 2, 1, "", "FreeFaces"], [9, 2, 1, "", "FreeShells"], [9, 2, 1, "", "FreeTopologies"], [9, 2, 1, "", "FreeVertices"], [9, 2, 1, "", "FreeWires"], [9, 2, 1, "", "HighestType"], [9, 2, 1, "", "K_Means"], [9, 2, 1, "", "MergeCells"], [9, 2, 1, "", "MysticRose"], [9, 2, 1, "", "Shells"], [9, 2, 1, "", "Simplify"], [9, 2, 1, "", "Tripod"], [9, 2, 1, "", "Vertices"], [9, 2, 1, "", "Wires"]], "topologicpy.Color": [[10, 1, 1, "", "Color"]], "topologicpy.Color.Color": [[10, 2, 1, "", "AddHex"], [10, 2, 1, "", "AnyToHex"], [10, 2, 1, "", "Average"], [10, 2, 1, "", "ByCSSNamedColor"], [10, 2, 1, "", "ByHEX"], [10, 2, 1, "", "ByValueInRange"], [10, 2, 1, "", "CMYKToHex"], [10, 2, 1, "", "CSSNamedColor"], [10, 2, 1, "", "CSSNamedColors"], [10, 2, 1, "", "PlotlyColor"], [10, 2, 1, "", "RGBToHex"]], "topologicpy.Context": [[11, 1, 1, "", "Context"]], "topologicpy.Context.Context": [[11, 2, 1, "", "ByTopologyParameters"], [11, 2, 1, "", "Topology"]], "topologicpy.Dictionary": [[13, 1, 1, "", "Dictionary"]], "topologicpy.Dictionary.Dictionary": [[13, 2, 1, "", "AdjacencyDictionary"], [13, 2, 1, "", "ByKeyValue"], [13, 2, 1, "", "ByKeysValues"], [13, 2, 1, "", "ByMergedDictionaries"], [13, 2, 1, "", "ByPythonDictionary"], [13, 2, 1, "", "Copy"], [13, 2, 1, "", "Filter"], [13, 2, 1, "", "Keys"], [13, 2, 1, "", "ListAttributeValues"], [13, 2, 1, "", "PythonDictionary"], [13, 2, 1, "", "RemoveKey"], [13, 2, 1, "", "SetValueAtKey"], [13, 2, 1, "", "SetValuesAtKeys"], [13, 2, 1, "", "ValueAtKey"], [13, 2, 1, "", "Values"], [13, 2, 1, "", "ValuesAtKeys"]], "topologicpy.Edge": [[14, 1, 1, "", "Edge"]], "topologicpy.Edge.Edge": [[14, 2, 1, "", "Align2D"], [14, 2, 1, "", "Angle"], [14, 2, 1, "", "Bisect"], [14, 2, 1, "", "ByFaceNormal"], [14, 2, 1, "", "ByOffset2D"], [14, 2, 1, "", "ByOriginDirectionLength"], [14, 2, 1, "", "ByStartVertexEndVertex"], [14, 2, 1, "", "ByVertices"], [14, 2, 1, "", "ByVerticesCluster"], [14, 2, 1, "", "Connection"], [14, 2, 1, "", "Direction"], [14, 2, 1, "", "EndVertex"], [14, 2, 1, "", "Equation2D"], [14, 2, 1, "", "Extend"], [14, 2, 1, "", "ExtendToEdge"], [14, 2, 1, "", "ExternalBoundary"], [14, 2, 1, "", "Index"], [14, 2, 1, "", "Intersect2D"], [14, 2, 1, "", "IsCollinear"], [14, 2, 1, "", "IsCoplanar"], [14, 2, 1, "", "IsParallel"], [14, 2, 1, "", "Length"], [14, 2, 1, "", "Line"], [14, 2, 1, "", "Normal"], [14, 2, 1, "", "NormalEdge"], [14, 2, 1, "", "Normalize"], [14, 2, 1, "", "ParameterAtVertex"], [14, 2, 1, "", "Reverse"], [14, 2, 1, "", "SetLength"], [14, 2, 1, "", "StartVertex"], [14, 2, 1, "", "Trim"], [14, 2, 1, "", "TrimByEdge"], [14, 2, 1, "", "VertexByDistance"], [14, 2, 1, "", "VertexByParameter"], [14, 2, 1, "", "Vertices"]], "topologicpy.EnergyModel": [[15, 1, 1, "", "EnergyModel"]], "topologicpy.EnergyModel.EnergyModel": [[15, 2, 1, "", "ByOSMPath"], [15, 2, 1, "", "ByTopology"], [15, 2, 1, "", "ColumnNames"], [15, 2, 1, "", "DefaultConstructionSets"], [15, 2, 1, "", "DefaultScheduleSets"], [15, 2, 1, "", "ExportToGBXML"], [15, 2, 1, "", "ExportToOSM"], [15, 2, 1, "", "GBXMLString"], [15, 2, 1, "", "Query"], [15, 2, 1, "", "ReportNames"], [15, 2, 1, "", "RowNames"], [15, 2, 1, "", "Run"], [15, 2, 1, "", "SpaceColors"], [15, 2, 1, "", "SpaceDictionaries"], [15, 2, 1, "", "SpaceTypeNames"], [15, 2, 1, "", "SpaceTypes"], [15, 2, 1, "", "SqlFile"], [15, 2, 1, "", "TableNames"], [15, 2, 1, "", "Topologies"], [15, 2, 1, "", "Units"], [15, 2, 1, "", "Version"]], "topologicpy.Face": [[16, 1, 1, "", "Face"]], "topologicpy.Face.Face": [[16, 2, 1, "", "AddInternalBoundaries"], [16, 2, 1, "", "AddInternalBoundariesCluster"], [16, 2, 1, "", "Angle"], [16, 2, 1, "", "Area"], [16, 2, 1, "", "BoundingRectangle"], [16, 2, 1, "", "ByEdges"], [16, 2, 1, "", "ByEdgesCluster"], [16, 2, 1, "", "ByOffset"], [16, 2, 1, "", "ByOffsetArea"], [16, 2, 1, "", "ByShell"], [16, 2, 1, "", "ByThickenedWire"], [16, 2, 1, "", "ByVertices"], [16, 2, 1, "", "ByVerticesCluster"], [16, 2, 1, "", "ByWire"], [16, 2, 1, "", "ByWires"], [16, 2, 1, "", "ByWiresCluster"], [16, 2, 1, "", "CHS"], [16, 2, 1, "", "CShape"], [16, 2, 1, "", "Circle"], [16, 2, 1, "", "Compactness"], [16, 2, 1, "", "CompassAngle"], [16, 2, 1, "", "CrossShape"], [16, 2, 1, "", "Edges"], [16, 2, 1, "", "Einstein"], [16, 2, 1, "", "Ellipse"], [16, 2, 1, "", "ExteriorAngles"], [16, 2, 1, "", "ExternalBoundary"], [16, 2, 1, "", "FacingToward"], [16, 2, 1, "", "Fillet"], [16, 2, 1, "", "Harmonize"], [16, 2, 1, "", "IShape"], [16, 2, 1, "", "InteriorAngles"], [16, 2, 1, "", "InternalBoundaries"], [16, 2, 1, "", "InternalVertex"], [16, 2, 1, "", "Invert"], [16, 2, 1, "", "IsConvex"], [16, 2, 1, "", "IsCoplanar"], [16, 2, 1, "", "Isovist"], [16, 2, 1, "", "LShape"], [16, 2, 1, "", "MedialAxis"], [16, 2, 1, "", "Normal"], [16, 2, 1, "", "NormalEdge"], [16, 2, 1, "", "NorthArrow"], [16, 2, 1, "", "Planarize"], [16, 2, 1, "", "PlaneEquation"], [16, 2, 1, "", "Project"], [16, 2, 1, "", "RHS"], [16, 2, 1, "", "Rectangle"], [16, 2, 1, "", "RectangleByPlaneEquation"], [16, 2, 1, "", "RemoveCollinearEdges"], [16, 2, 1, "", "Ring"], [16, 2, 1, "", "SHS"], [16, 2, 1, "", "Simplify"], [16, 2, 1, "", "Skeleton"], [16, 2, 1, "", "Square"], [16, 2, 1, "", "Squircle"], [16, 2, 1, "", "Star"], [16, 2, 1, "", "TShape"], [16, 2, 1, "", "ThirdVertex"], [16, 2, 1, "", "Trapezoid"], [16, 2, 1, "", "Triangulate"], [16, 2, 1, "", "TrimByWire"], [16, 2, 1, "", "VertexByParameters"], [16, 2, 1, "", "VertexParameters"], [16, 2, 1, "", "Vertices"], [16, 2, 1, "", "Wire"], [16, 2, 1, "", "Wires"]], "topologicpy.Graph": [[17, 1, 1, "", "Graph"], [17, 1, 1, "", "GraphQueueItem"], [17, 1, 1, "", "MergingProcess"], [17, 1, 1, "", "WorkerProcess"], [17, 1, 1, "", "WorkerProcessPool"]], "topologicpy.Graph.Graph": [[17, 2, 1, "", "AccessibilityCentrality"], [17, 2, 1, "", "AddEdge"], [17, 2, 1, "", "AddEdgeByIndex"], [17, 2, 1, "", "AddVertex"], [17, 2, 1, "", "AddVertices"], [17, 2, 1, "", "AdjacencyDictionary"], [17, 2, 1, "", "AdjacencyList"], [17, 2, 1, "", "AdjacencyMatrix"], [17, 2, 1, "", "AdjacencyMatrixCSVString"], [17, 2, 1, "", "AdjacencyMatrixFigure"], [17, 2, 1, "", "AdjacentEdges"], [17, 2, 1, "", "AdjacentVertices"], [17, 2, 1, "", "AdjacentVerticesByCompassDirection"], [17, 2, 1, "", "AdjacentVerticesByVector"], [17, 2, 1, "", "AllPaths"], [17, 2, 1, "", "AverageClusteringCoefficient"], [17, 2, 1, "", "BOTGraph"], [17, 2, 1, "", "BOTString"], [17, 2, 1, "", "BetweennessCentrality"], [17, 2, 1, "", "BetweennessPartition"], [17, 2, 1, "", "Bridges"], [17, 2, 1, "", "ByAdjacencyMatrix"], [17, 2, 1, "", "ByAdjacencyMatrixCSVPath"], [17, 2, 1, "", "ByBOTGraph"], [17, 2, 1, "", "ByBOTPath"], [17, 2, 1, "", "ByCSVPath"], [17, 2, 1, "", "ByDGCNNFile"], [17, 2, 1, "", "ByDGCNNPath"], [17, 2, 1, "", "ByDGCNNString"], [17, 2, 1, "", "ByDictionaries"], [17, 2, 1, "", "ByIFCFile"], [17, 2, 1, "", "ByIFCPath"], [17, 2, 1, "", "ByJSONDictionary"], [17, 2, 1, "", "ByJSONFile"], [17, 2, 1, "", "ByJSONPath"], [17, 2, 1, "", "ByMeshData"], [17, 2, 1, "", "ByNetworkXGraph"], [17, 2, 1, "", "BySpatialRelationships"], [17, 2, 1, "", "ByTopology"], [17, 2, 1, "", "ByVerticesEdges"], [17, 2, 1, "", "Choice"], [17, 2, 1, "", "ChromaticNumber"], [17, 2, 1, "", "ClosenessCentrality"], [17, 2, 1, "", "Color"], [17, 2, 1, "", "Community"], [17, 2, 1, "", "CommunityPartition"], [17, 2, 1, "", "Compare"], [17, 2, 1, "", "Complement"], [17, 2, 1, "", "Complete"], [17, 2, 1, "", "Connect"], [17, 2, 1, "", "ConnectedComponents"], [17, 2, 1, "", "Connectivity"], [17, 2, 1, "", "ContainsEdge"], [17, 2, 1, "", "ContainsVertex"], [17, 2, 1, "", "ContractEdge"], [17, 2, 1, "", "CutVertices"], [17, 2, 1, "", "DegreeCentrality"], [17, 2, 1, "", "DegreeMatrix"], [17, 2, 1, "", "DegreeSequence"], [17, 2, 1, "", "Density"], [17, 2, 1, "", "Depth"], [17, 2, 1, "", "DepthMap"], [17, 2, 1, "", "Diameter"], [17, 2, 1, "", "Dictionary"], [17, 2, 1, "", "Difference"], [17, 2, 1, "", "Distance"], [17, 2, 1, "", "Edge"], [17, 2, 1, "", "Edges"], [17, 2, 1, "", "EigenVectorCentrality"], [17, 2, 1, "", "ExportToAdjacencyMatrixCSV"], [17, 2, 1, "", "ExportToBOT"], [17, 2, 1, "", "ExportToCSV"], [17, 2, 1, "", "ExportToGEXF"], [17, 2, 1, "", "ExportToGraphVizGraph"], [17, 2, 1, "", "ExportToJSON"], [17, 2, 1, "", "ExportToJSONLD"], [17, 2, 1, "", "FiedlerVector"], [17, 2, 1, "", "FiedlerVectorPartition"], [17, 2, 1, "", "GlobalClusteringCoefficient"], [17, 2, 1, "", "GraphVizGraph"], [17, 2, 1, "", "Guid"], [17, 2, 1, "", "HasseDiagram"], [17, 2, 1, "", "HopperKernel"], [17, 2, 1, "", "Impose"], [17, 2, 1, "", "Imprint"], [17, 2, 1, "", "IncomingEdges"], [17, 2, 1, "", "IncomingVertices"], [17, 2, 1, "", "InducedSubgraph"], [17, 2, 1, "", "Integration"], [17, 2, 1, "", "Intersect"], [17, 2, 1, "", "IsBipartite"], [17, 2, 1, "", "IsComplete"], [17, 2, 1, "", "IsConnected"], [17, 2, 1, "", "IsEmpty"], [17, 2, 1, "", "IsErdoesGallai"], [17, 2, 1, "", "IsIsomorphic"], [17, 2, 1, "", "IsTree"], [17, 2, 1, "", "IsolatedVertices"], [17, 2, 1, "", "JSONData"], [17, 2, 1, "", "JSONLDData"], [17, 2, 1, "", "JSONLDString"], [17, 2, 1, "", "JSONString"], [17, 2, 1, "", "KHopsSubgraph"], [17, 2, 1, "", "Kernel"], [17, 2, 1, "", "Laplacian"], [17, 2, 1, "", "Leaves"], [17, 2, 1, "", "LineGraph"], [17, 2, 1, "", "LocalClusteringCoefficient"], [17, 2, 1, "", "LongestPath"], [17, 2, 1, "", "Match"], [17, 2, 1, "", "MaximumDelta"], [17, 2, 1, "", "MaximumFlow"], [17, 2, 1, "", "Merge"], [17, 2, 1, "", "MergeVertices"], [17, 2, 1, "", "MeshData"], [17, 2, 1, "", "MetricDistance"], [17, 2, 1, "", "MinimumDelta"], [17, 2, 1, "", "MinimumSpanningTree"], [17, 2, 1, "", "NavigationGraph"], [17, 2, 1, "", "NearestVertex"], [17, 2, 1, "", "NetworkXGraph"], [17, 2, 1, "", "Order"], [17, 2, 1, "", "OutgoingEdges"], [17, 2, 1, "", "OutgoingVertices"], [17, 2, 1, "", "PageRank"], [17, 2, 1, "", "Partition"], [17, 2, 1, "", "Path"], [17, 2, 1, "", "PyvisGraph"], [17, 2, 1, "", "Quotient"], [17, 2, 1, "", "RemoveEdge"], [17, 2, 1, "", "RemoveIsolatedEdges"], [17, 2, 1, "", "RemoveIsolatedVertices"], [17, 2, 1, "", "RemoveVertex"], [17, 2, 1, "", "Reshape"], [17, 2, 1, "", "SetDictionary"], [17, 2, 1, "", "ShortestPath"], [17, 2, 1, "", "ShortestPaths"], [17, 2, 1, "", "Show"], [17, 2, 1, "", "Size"], [17, 2, 1, "", "SubGraphMatches"], [17, 2, 1, "", "Subgraph"], [17, 2, 1, "", "SymmetricDifference"], [17, 2, 1, "", "Tietze"], [17, 2, 1, "", "TopologicalDistance"], [17, 2, 1, "", "Topology"], [17, 2, 1, "", "Tree"], [17, 2, 1, "", "Union"], [17, 2, 1, "", "VertexDegree"], [17, 2, 1, "", "Vertices"], [17, 2, 1, "", "VisibilityGraph"], [17, 2, 1, "", "WLFeatures"], [17, 2, 1, "", "WLKernel"], [17, 2, 1, "", "WeightedJaccardSimilarity"], [17, 2, 1, "", "XOR"]], "topologicpy.Graph.GraphQueueItem": [[17, 3, 1, "", "edges"]], "topologicpy.Graph.MergingProcess": [[17, 2, 1, "", "wait_message"]], "topologicpy.Graph.WorkerProcess": [[17, 2, 1, "", "run"]], "topologicpy.Graph.WorkerProcessPool": [[17, 2, 1, "", "join"], [17, 2, 1, "", "startProcesses"], [17, 2, 1, "", "stopProcesses"]], "topologicpy.Grid": [[18, 1, 1, "", "Grid"]], "topologicpy.Grid.Grid": [[18, 2, 1, "", "EdgesByDistances"], [18, 2, 1, "", "EdgesByParameters"], [18, 2, 1, "", "VerticesByDistances"], [18, 2, 1, "", "VerticesByParameters"]], "topologicpy.Helper": [[19, 1, 1, "", "Helper"]], "topologicpy.Helper.Helper": [[19, 2, 1, "", "BinAndAverage"], [19, 2, 1, "", "CheckVersion"], [19, 2, 1, "", "ClosestMatch"], [19, 2, 1, "", "ClusterByKeys"], [19, 2, 1, "", "Flatten"], [19, 2, 1, "", "Grow"], [19, 2, 1, "", "Iterate"], [19, 2, 1, "", "MakeUnique"], [19, 2, 1, "", "MaximumIndices"], [19, 2, 1, "", "MergeByThreshold"], [19, 2, 1, "", "MinimumIndices"], [19, 2, 1, "", "Normalize"], [19, 2, 1, "", "Position"], [19, 2, 1, "", "RemoveEven"], [19, 2, 1, "", "RemoveOdd"], [19, 2, 1, "", "Repeat"], [19, 2, 1, "", "Sort"], [19, 2, 1, "", "Transpose"], [19, 2, 1, "", "Trim"], [19, 2, 1, "", "Version"]], "topologicpy.Honeybee": [[20, 1, 1, "", "Honeybee"]], "topologicpy.Honeybee.Honeybee": [[20, 2, 1, "", "ByHBJSONDictionary"], [20, 2, 1, "", "ByHBJSONPath"], [20, 2, 1, "", "ByHBJSONString"], [20, 2, 1, "", "ConstructionSetByIdentifier"], [20, 2, 1, "", "ConstructionSets"], [20, 2, 1, "", "ExportToHBJSON"], [20, 2, 1, "", "ModelByTopology"], [20, 2, 1, "", "ProgramTypeByIdentifier"], [20, 2, 1, "", "ProgramTypes"], [20, 2, 1, "", "String"]], "topologicpy.Kuzu": [[21, 1, 1, "", "Kuzu"]], "topologicpy.Kuzu.Kuzu": [[21, 2, 1, "", "ByCSVPath"], [21, 2, 1, "", "Connection"], [21, 2, 1, "", "Database"], [21, 2, 1, "", "DeleteGraph"], [21, 2, 1, "", "EmptyDatabase"], [21, 2, 1, "", "EnsureSchema"], [21, 2, 1, "", "GraphByID"], [21, 2, 1, "", "GraphsByQuery"], [21, 2, 1, "", "ListGraphs"], [21, 2, 1, "", "Manager"], [21, 2, 1, "", "UpsertGraph"]], "topologicpy.Matrix": [[22, 1, 1, "", "Matrix"]], "topologicpy.Matrix.Matrix": [[22, 2, 1, "", "Add"], [22, 2, 1, "", "ByCoordinateSystems"], [22, 2, 1, "", "ByRotation"], [22, 2, 1, "", "ByScaling"], [22, 2, 1, "", "ByTranslation"], [22, 2, 1, "", "ByVectors"], [22, 2, 1, "", "ByVectors_old"], [22, 2, 1, "", "EigenvaluesAndVectors"], [22, 2, 1, "", "Identity"], [22, 2, 1, "", "Invert"], [22, 2, 1, "", "Multiply"], [22, 2, 1, "", "Subtract"], [22, 2, 1, "", "Transpose"]], "topologicpy.Neo4j": [[23, 1, 1, "", "Neo4j"]], "topologicpy.Neo4j.Neo4j": [[23, 2, 1, "", "ByGraph"], [23, 2, 1, "", "ByParameters"], [23, 2, 1, "", "ExportToGraph"], [23, 2, 1, "", "Reset"], [23, 2, 1, "", "SetGraph"]], "topologicpy.Plotly": [[24, 1, 1, "", "Plotly"]], "topologicpy.Plotly.Plotly": [[24, 2, 1, "", "AddColorBar"], [24, 2, 1, "", "ColorScale"], [24, 2, 1, "", "Colors"], [24, 2, 1, "", "DataByDGL"], [24, 2, 1, "", "DataByGraph"], [24, 2, 1, "", "DataByTopology"], [24, 2, 1, "", "ExportToImage"], [24, 2, 1, "", "FigureByConfusionMatrix"], [24, 2, 1, "", "FigureByCorrelation"], [24, 2, 1, "", "FigureByData"], [24, 2, 1, "", "FigureByDataFrame"], [24, 2, 1, "", "FigureByJSONFile"], [24, 2, 1, "", "FigureByJSONPath"], [24, 2, 1, "", "FigureByMatrix"], [24, 2, 1, "", "FigureByPieChart"], [24, 2, 1, "", "FigureByTopology"], [24, 2, 1, "", "FigureExportToJSON"], [24, 2, 1, "", "FigureExportToPDF"], [24, 2, 1, "", "FigureExportToPNG"], [24, 2, 1, "", "FigureExportToSVG"], [24, 2, 1, "", "Renderer"], [24, 2, 1, "", "Renderers"], [24, 2, 1, "", "SetCamera"], [24, 2, 1, "", "Show"], [24, 2, 1, "", "edgeData"], [24, 2, 1, "", "vertexData"]], "topologicpy.Polyskel": [[25, 1, 1, "", "Subtree"], [25, 4, 1, "", "bisector"], [25, 4, 1, "", "distance"], [25, 4, 1, "", "normalize"], [25, 4, 1, "", "skeletonize"]], "topologicpy.Polyskel.Subtree": [[25, 3, 1, "", "height"], [25, 3, 1, "", "sinks"], [25, 3, 1, "", "source"]], "topologicpy.PyG": [[26, 1, 1, "", "CustomGraphDataset"], [26, 1, 1, "", "PyG"]], "topologicpy.PyG.CustomGraphDataset": [[26, 2, 1, "", "process_all"]], "topologicpy.PyG.PyG": [[26, 2, 1, "", "Accuracy"], [26, 2, 1, "", "ConfusionMatrix"], [26, 2, 1, "", "DatasetByCSVPath"], [26, 2, 1, "", "DatasetGraphLabels"], [26, 2, 1, "", "DatasetSplit"], [26, 2, 1, "", "Hyperparameters"], [26, 2, 1, "", "MSE"], [26, 2, 1, "", "Model"], [26, 2, 1, "", "ModelClassify"], [26, 2, 1, "", "ModelData"], [26, 2, 1, "", "ModelLoad"], [26, 2, 1, "", "ModelPredict"], [26, 2, 1, "", "ModelSave"], [26, 2, 1, "", "ModelTest"], [26, 2, 1, "", "ModelTrain"], [26, 2, 1, "", "Optimizer"], [26, 2, 1, "", "Performance"], [26, 2, 1, "", "Show"]], "topologicpy.ShapeGrammar": [[27, 1, 1, "", "ShapeGrammar"]], "topologicpy.ShapeGrammar.ShapeGrammar": [[27, 2, 1, "", "AddRule"], [27, 2, 1, "", "ApplicableRules"], [27, 2, 1, "", "ApplyRule"], [27, 2, 1, "", "ClusterByInputOutput"], [27, 2, 1, "", "ClusterByRule"], [27, 2, 1, "", "FigureByInputOutput"], [27, 2, 1, "", "FigureByRule"], [27, 2, 1, "", "OperationByTitle"], [27, 2, 1, "", "OperationTitles"]], "topologicpy.Shell": [[28, 1, 1, "", "Shell"]], "topologicpy.Shell.Shell": [[28, 2, 1, "", "ByDisjointFaces"], [28, 2, 1, "", "ByFaces"], [28, 2, 1, "", "ByFacesCluster"], [28, 2, 1, "", "ByThickenedWire"], [28, 2, 1, "", "ByWires"], [28, 2, 1, "", "ByWiresCluster"], [28, 2, 1, "", "Circle"], [28, 2, 1, "", "Delaunay"], [28, 2, 1, "", "Edges"], [28, 2, 1, "", "ExternalBoundary"], [28, 2, 1, "", "Faces"], [28, 2, 1, "", "HyperbolicParaboloidCircularDomain"], [28, 2, 1, "", "HyperbolicParaboloidRectangularDomain"], [28, 2, 1, "", "InternalBoundaries"], [28, 2, 1, "", "InternalEdges"], [28, 2, 1, "", "IsClosed"], [28, 2, 1, "", "IsOnBoundary"], [28, 2, 1, "", "MobiusStrip"], [28, 2, 1, "", "Paraboloid"], [28, 2, 1, "", "Pie"], [28, 2, 1, "", "Planarize"], [28, 2, 1, "", "Rectangle"], [28, 2, 1, "", "RemoveCollinearEdges"], [28, 2, 1, "", "Roof"], [28, 2, 1, "", "SelfMerge"], [28, 2, 1, "", "Simplify"], [28, 2, 1, "", "Skeleton"], [28, 2, 1, "", "Square"], [28, 2, 1, "", "Vertices"], [28, 2, 1, "", "Voronoi"], [28, 2, 1, "", "Wires"]], "topologicpy.Sun": [[30, 1, 1, "", "Sun"]], "topologicpy.Sun.Sun": [[30, 2, 1, "", "Altitude"], [30, 2, 1, "", "AutumnEquinox"], [30, 2, 1, "", "Azimuth"], [30, 2, 1, "", "Diagram"], [30, 2, 1, "", "Edge"], [30, 2, 1, "", "PathByDate"], [30, 2, 1, "", "PathByHour"], [30, 2, 1, "", "Position"], [30, 2, 1, "", "SpringEquinox"], [30, 2, 1, "", "SummerSolstice"], [30, 2, 1, "", "Sunrise"], [30, 2, 1, "", "Sunset"], [30, 2, 1, "", "Vector"], [30, 2, 1, "", "Vertex"], [30, 2, 1, "", "VerticesByDate"], [30, 2, 1, "", "VerticesByHour"], [30, 2, 1, "", "WinterSolstice"]], "topologicpy.Topology": [[31, 1, 1, "", "MergingProcess"], [31, 1, 1, "", "QueueItem"], [31, 1, 1, "", "SinkItem"], [31, 1, 1, "", "Topology"], [31, 1, 1, "", "WorkerProcess"], [31, 1, 1, "", "WorkerProcessPool"]], "topologicpy.Topology.MergingProcess": [[31, 2, 1, "", "wait_message"]], "topologicpy.Topology.QueueItem": [[31, 3, 1, "", "ID"], [31, 3, 1, "", "sinkKeys"], [31, 3, 1, "", "sinkValues"]], "topologicpy.Topology.SinkItem": [[31, 3, 1, "", "ID"], [31, 3, 1, "", "sink_str"]], "topologicpy.Topology.Topology": [[31, 2, 1, "", "AddApertures"], [31, 2, 1, "", "AddContent"], [31, 2, 1, "", "AddDictionary"], [31, 2, 1, "", "AdjacentTopologies"], [31, 2, 1, "", "Analyze"], [31, 2, 1, "", "ApertureTopologies"], [31, 2, 1, "", "Apertures"], [31, 2, 1, "", "BREPString"], [31, 2, 1, "", "BoundingBox"], [31, 2, 1, "", "ByBIMFile"], [31, 2, 1, "", "ByBIMPath"], [31, 2, 1, "", "ByBIMString"], [31, 2, 1, "", "ByBREPFile"], [31, 2, 1, "", "ByBREPPath"], [31, 2, 1, "", "ByBREPString"], [31, 2, 1, "", "ByDXFFile"], [31, 2, 1, "", "ByDXFPath"], [31, 2, 1, "", "ByGeometry"], [31, 2, 1, "", "ByIFCFile"], [31, 2, 1, "", "ByIFCPath"], [31, 2, 1, "", "ByJSONDictionary"], [31, 2, 1, "", "ByJSONFile"], [31, 2, 1, "", "ByJSONPath"], [31, 2, 1, "", "ByJSONString"], [31, 2, 1, "", "ByMeshData"], [31, 2, 1, "", "ByOBJFile"], [31, 2, 1, "", "ByOBJPath"], [31, 2, 1, "", "ByOBJString"], [31, 2, 1, "", "ByOCCTShape"], [31, 2, 1, "", "ByPDFFile"], [31, 2, 1, "", "ByPDFPath"], [31, 2, 1, "", "ByXYZFile"], [31, 2, 1, "", "ByXYZPath"], [31, 2, 1, "", "CanonicalMatrix"], [31, 2, 1, "", "CellComplexes"], [31, 2, 1, "", "Cells"], [31, 2, 1, "", "CenterOfMass"], [31, 2, 1, "", "Centroid"], [31, 2, 1, "", "Cleanup"], [31, 2, 1, "", "ClusterByKeys"], [31, 2, 1, "", "ClusterFaces"], [31, 2, 1, "", "Clusters"], [31, 2, 1, "", "Contents"], [31, 2, 1, "", "Contexts"], [31, 2, 1, "", "ConvexHull"], [31, 2, 1, "", "Copy"], [31, 2, 1, "", "Degree"], [31, 2, 1, "", "Diameter"], [31, 2, 1, "", "Dictionary"], [31, 2, 1, "", "Difference"], [31, 2, 1, "", "Dimensionality"], [31, 2, 1, "", "Divide"], [31, 2, 1, "", "Edges"], [31, 2, 1, "", "Explode"], [31, 2, 1, "", "ExportToBIM"], [31, 2, 1, "", "ExportToBREP"], [31, 2, 1, "", "ExportToDXF"], [31, 2, 1, "", "ExportToJSON"], [31, 2, 1, "", "ExportToOBJ"], [31, 2, 1, "", "ExternalBoundary"], [31, 2, 1, "", "Faces"], [31, 2, 1, "", "Filter"], [31, 2, 1, "", "Fix"], [31, 2, 1, "", "Flatten"], [31, 2, 1, "", "Geometry"], [31, 2, 1, "", "HighestType"], [31, 2, 1, "", "Impose"], [31, 2, 1, "", "Imprint"], [31, 2, 1, "", "Inherit"], [31, 2, 1, "", "InternalVertex"], [31, 2, 1, "", "Intersect"], [31, 2, 1, "", "IsInstance"], [31, 2, 1, "", "IsPlanar"], [31, 2, 1, "", "IsSame"], [31, 2, 1, "", "IsSimilar"], [31, 2, 1, "", "IsVertexCongruent"], [31, 2, 1, "", "JSONString"], [31, 2, 1, "", "LargestFaces"], [31, 2, 1, "", "LongestEdges"], [31, 2, 1, "", "Merge"], [31, 2, 1, "", "MergeAll"], [31, 2, 1, "", "MeshData"], [31, 2, 1, "", "Move"], [31, 2, 1, "", "NonPlanarFaces"], [31, 2, 1, "", "OBJString"], [31, 2, 1, "", "OCCTShape"], [31, 2, 1, "", "OpenEdges"], [31, 2, 1, "", "OpenFaces"], [31, 2, 1, "", "OpenVertices"], [31, 2, 1, "", "Orient"], [31, 2, 1, "", "Place"], [31, 2, 1, "", "PrincipalAxes"], [31, 2, 1, "", "RemoveCollinearEdges"], [31, 2, 1, "", "RemoveContent"], [31, 2, 1, "", "RemoveCoplanarFaces"], [31, 2, 1, "", "RemoveEdges"], [31, 2, 1, "", "RemoveFaces"], [31, 2, 1, "", "RemoveFacesBySelectors"], [31, 2, 1, "", "RemoveVertices"], [31, 2, 1, "", "ReplaceVertices"], [31, 2, 1, "", "Rotate"], [31, 2, 1, "", "RotateByEulerAngles"], [31, 2, 1, "", "RotateByQuaternion"], [31, 2, 1, "", "Scale"], [31, 2, 1, "", "SelectSubTopology"], [31, 2, 1, "", "SelfMerge"], [31, 2, 1, "", "SetDictionary"], [31, 2, 1, "", "SetSnapshot"], [31, 2, 1, "", "SharedEdges"], [31, 2, 1, "", "SharedFaces"], [31, 2, 1, "", "SharedTopologies"], [31, 2, 1, "", "SharedVertices"], [31, 2, 1, "", "SharedWires"], [31, 2, 1, "", "Shells"], [31, 2, 1, "", "ShortestEdges"], [31, 2, 1, "", "Show"], [31, 2, 1, "", "Slice"], [31, 2, 1, "", "SmallestFaces"], [31, 2, 1, "", "Snapshots"], [31, 2, 1, "", "SortBySelectors"], [31, 2, 1, "", "SpatialRelationship"], [31, 2, 1, "", "Spin"], [31, 2, 1, "", "SubCombinations"], [31, 2, 1, "", "SubTopologies"], [31, 2, 1, "", "SuperTopologies"], [31, 2, 1, "", "SymDif"], [31, 2, 1, "", "SymmetricDifference"], [31, 2, 1, "", "Taper"], [31, 2, 1, "", "TransferDictionaries"], [31, 2, 1, "", "TransferDictionariesBySelectors"], [31, 2, 1, "", "Transform"], [31, 2, 1, "", "Translate"], [31, 2, 1, "", "TranslateByDirectionDistance"], [31, 2, 1, "", "Triangulate"], [31, 2, 1, "", "Twist"], [31, 2, 1, "", "Type"], [31, 2, 1, "", "TypeAsString"], [31, 2, 1, "", "TypeID"], [31, 2, 1, "", "UUID"], [31, 2, 1, "", "Unflatten"], [31, 2, 1, "", "Union"], [31, 2, 1, "", "Vertices"], [31, 2, 1, "", "View3D"], [31, 2, 1, "", "Wires"], [31, 2, 1, "", "XOR"]], "topologicpy.Topology.WorkerProcess": [[31, 2, 1, "", "run"]], "topologicpy.Topology.WorkerProcessPool": [[31, 2, 1, "", "join"], [31, 2, 1, "", "startProcesses"], [31, 2, 1, "", "stopProcesses"]], "topologicpy.Vector": [[32, 1, 1, "", "Vector"]], "topologicpy.Vector.Vector": [[32, 2, 1, "", "Add"], [32, 2, 1, "", "Angle"], [32, 2, 1, "", "Average"], [32, 2, 1, "", "AzimuthAltitude"], [32, 2, 1, "", "Bisect"], [32, 2, 1, "", "ByAzimuthAltitude"], [32, 2, 1, "", "ByCoordinates"], [32, 2, 1, "", "ByVertices"], [32, 2, 1, "", "CompassAngle"], [32, 2, 1, "", "CompassDirection"], [32, 2, 1, "", "CompassDirections"], [32, 2, 1, "", "Coordinates"], [32, 2, 1, "", "Cross"], [32, 2, 1, "", "Dot"], [32, 2, 1, "", "Down"], [32, 2, 1, "", "East"], [32, 2, 1, "", "IsAntiParallel"], [32, 2, 1, "", "IsCollinear"], [32, 2, 1, "", "IsParallel"], [32, 2, 1, "", "IsSame"], [32, 2, 1, "", "Length"], [32, 2, 1, "", "Magnitude"], [32, 2, 1, "", "Multiply"], [32, 2, 1, "", "Normalize"], [32, 2, 1, "", "North"], [32, 2, 1, "", "NorthEast"], [32, 2, 1, "", "NorthWest"], [32, 2, 1, "", "Reverse"], [32, 2, 1, "", "SetMagnitude"], [32, 2, 1, "", "South"], [32, 2, 1, "", "SouthEast"], [32, 2, 1, "", "SouthWest"], [32, 2, 1, "", "Subtract"], [32, 2, 1, "", "Sum"], [32, 2, 1, "", "TransformationMatrix"], [32, 2, 1, "", "Up"], [32, 2, 1, "", "West"], [32, 2, 1, "", "XAxis"], [32, 2, 1, "", "YAxis"], [32, 2, 1, "", "ZAxis"]], "topologicpy.Vertex": [[33, 1, 1, "", "Vertex"]], "topologicpy.Vertex.Vertex": [[33, 2, 1, "", "AlignCoordinates"], [33, 2, 1, "", "AreCollinear"], [33, 2, 1, "", "AreCoplanar"], [33, 2, 1, "", "AreIpsilateral"], [33, 2, 1, "", "AreIpsilateralCluster"], [33, 2, 1, "", "AreOnSameSide"], [33, 2, 1, "", "AreOnSameSideCluster"], [33, 2, 1, "", "ByCoordinates"], [33, 2, 1, "", "Centroid"], [33, 2, 1, "", "Clockwise2D"], [33, 2, 1, "", "Coordinates"], [33, 2, 1, "", "CounterClockwise2D"], [33, 2, 1, "", "Degree"], [33, 2, 1, "", "Distance"], [33, 2, 1, "", "EnclosingCells"], [33, 2, 1, "", "ExternalBoundary"], [33, 2, 1, "", "Fuse"], [33, 2, 1, "", "IncomingEdges"], [33, 2, 1, "", "Index"], [33, 2, 1, "", "InterpolateValue"], [33, 2, 1, "", "IsCoincident"], [33, 2, 1, "", "IsExternal"], [33, 2, 1, "", "IsInternal"], [33, 2, 1, "", "IsPeripheral"], [33, 2, 1, "", "NearestVertex"], [33, 2, 1, "", "Normal"], [33, 2, 1, "", "Origin"], [33, 2, 1, "", "OutgoingEdges"], [33, 2, 1, "", "PerpendicularDistance"], [33, 2, 1, "", "PlaneEquation"], [33, 2, 1, "", "Point"], [33, 2, 1, "", "Project"], [33, 2, 1, "", "Separate"], [33, 2, 1, "", "Transform"], [33, 2, 1, "", "X"], [33, 2, 1, "", "Y"], [33, 2, 1, "", "Z"]], "topologicpy.Wire": [[34, 1, 1, "", "Wire"]], "topologicpy.Wire.Wire": [[34, 2, 1, "", "Arc"], [34, 2, 1, "", "ArcByEdge"], [34, 2, 1, "", "BoundingRectangle"], [34, 2, 1, "", "ByEdges"], [34, 2, 1, "", "ByEdgesCluster"], [34, 2, 1, "", "ByOffset"], [34, 2, 1, "", "ByOffsetArea"], [34, 2, 1, "", "ByVertices"], [34, 2, 1, "", "ByVerticesCluster"], [34, 2, 1, "", "CShape"], [34, 2, 1, "", "Circle"], [34, 2, 1, "", "Close"], [34, 2, 1, "", "ConcaveHull"], [34, 2, 1, "", "ConvexHull"], [34, 2, 1, "", "CrossShape"], [34, 2, 1, "", "Cycles"], [34, 2, 1, "", "Edges"], [34, 2, 1, "", "Einstein"], [34, 2, 1, "", "Ellipse"], [34, 2, 1, "", "EllipseAll"], [34, 2, 1, "", "EndVertex"], [34, 2, 1, "", "ExteriorAngles"], [34, 2, 1, "", "ExternalBoundary"], [34, 2, 1, "", "Fillet"], [34, 2, 1, "", "IShape"], [34, 2, 1, "", "InteriorAngles"], [34, 2, 1, "", "Interpolate"], [34, 2, 1, "", "Invert"], [34, 2, 1, "", "IsClosed"], [34, 2, 1, "", "IsManifold"], [34, 2, 1, "", "IsSimilar"], [34, 2, 1, "", "LShape"], [34, 2, 1, "", "Length"], [34, 2, 1, "", "Line"], [34, 2, 1, "", "Miter"], [34, 2, 1, "", "Normal"], [34, 2, 1, "", "OrientEdges"], [34, 2, 1, "", "Planarize"], [34, 2, 1, "", "Project"], [34, 2, 1, "", "Rectangle"], [34, 2, 1, "", "RemoveCollinearEdges"], [34, 2, 1, "", "Representation"], [34, 2, 1, "", "Reverse"], [34, 2, 1, "", "Roof"], [34, 2, 1, "", "Simplify"], [34, 2, 1, "", "Skeleton"], [34, 2, 1, "", "Spiral"], [34, 2, 1, "", "Split"], [34, 2, 1, "", "Square"], [34, 2, 1, "", "Squircle"], [34, 2, 1, "", "Star"], [34, 2, 1, "", "StartEndVertices"], [34, 2, 1, "", "StartVertex"], [34, 2, 1, "", "TShape"], [34, 2, 1, "", "Trapezoid"], [34, 2, 1, "", "VertexByDistance"], [34, 2, 1, "", "VertexByParameter"], [34, 2, 1, "", "VertexDistance"], [34, 2, 1, "", "Vertices"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"topologicpi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "an": 0, "ai": 0, "power": 0, "spatial": 0, "model": 0, "analysi": 0, "softwar": 0, "librari": 0, "architectur": 0, "engin": 0, "construct": 0, "introduct": 0, "instal": 0, "prerequisit": 0, "how": 0, "start": 0, "us": 0, "topolog": 0, "api": 0, "document": 0, "cite": 0, "content": [0, 2], "indic": 0, "tabl": 0, "packag": 2, "submodul": 2, "modul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "ann": 3, "apertur": 4, "bvh": 5, "csg": 6, "cell": 7, "cellcomplex": 8, "cluster": 9, "color": 10, "context": 11, "dgl": 12, "dictionari": 13, "edg": 14, "energymodel": 15, "face": 16, "graph": 17, "grid": 18, "helper": 19, "honeybe": 20, "kuzu": 21, "matrix": 22, "neo4j": 23, "plotli": 24, "polyskel": 25, "pyg": 26, "shapegrammar": 27, "shell": 28, "speckl": 29, "sun": 30, "topologi": 31, "vector": 32, "vertex": 33, "wire": 34, "version": 35}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"topologicpy": [[0, "topologicpy"], [1, "topologicpy"]], "An AI-Powered Spatial Modelling and Analysis Software Library for Architecture, Engineering, and Construction": [[0, "an-ai-powered-spatial-modelling-and-analysis-software-library-for-architecture-engineering-and-construction"]], "Introduction": [[0, "introduction"]], "Installation": [[0, "installation"]], "Prerequisites": [[0, "prerequisites"]], "How to start using Topologic": [[0, "how-to-start-using-topologic"]], "API Documentation": [[0, "api-documentation"]], "How to cite topologicpy": [[0, "how-to-cite-topologicpy"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "topologicpy package": [[2, "topologicpy-package"]], "Submodules": [[2, "submodules"]], "Module contents": [[2, "module-topologicpy"]], "topologicpy.ANN module": [[3, "module-topologicpy.ANN"]], "topologicpy.Aperture module": [[4, "module-topologicpy.Aperture"]], "topologicpy.BVH module": [[5, "module-topologicpy.BVH"]], "topologicpy.CSG module": [[6, "module-topologicpy.CSG"]], "topologicpy.Cell module": [[7, "module-topologicpy.Cell"]], "topologicpy.CellComplex module": [[8, "module-topologicpy.CellComplex"]], "topologicpy.Cluster module": [[9, "module-topologicpy.Cluster"]], "topologicpy.Color module": [[10, "module-topologicpy.Color"]], "topologicpy.Context module": [[11, "module-topologicpy.Context"]], "topologicpy.DGL module": [[12, "topologicpy-dgl-module"]], "topologicpy.Dictionary module": [[13, "module-topologicpy.Dictionary"]], "topologicpy.Edge module": [[14, "module-topologicpy.Edge"]], "topologicpy.EnergyModel module": [[15, "module-topologicpy.EnergyModel"]], "topologicpy.Face module": [[16, "module-topologicpy.Face"]], "topologicpy.Graph module": [[17, "module-topologicpy.Graph"]], "topologicpy.Grid module": [[18, "module-topologicpy.Grid"]], "topologicpy.Helper module": [[19, "module-topologicpy.Helper"]], "topologicpy.Honeybee module": [[20, "module-topologicpy.Honeybee"]], "topologicpy.Kuzu module": [[21, "module-topologicpy.Kuzu"]], "topologicpy.Matrix module": [[22, "module-topologicpy.Matrix"]], "topologicpy.Neo4j module": [[23, "module-topologicpy.Neo4j"]], "topologicpy.Plotly module": [[24, "module-topologicpy.Plotly"]], "topologicpy.Polyskel module": [[25, "module-topologicpy.Polyskel"]], "topologicpy.PyG module": [[26, "module-topologicpy.PyG"]], "topologicpy.ShapeGrammar module": [[27, "module-topologicpy.ShapeGrammar"]], "topologicpy.Shell module": [[28, "module-topologicpy.Shell"]], "topologicpy.Speckle module": [[29, "topologicpy-speckle-module"]], "topologicpy.Sun module": [[30, "module-topologicpy.Sun"]], "topologicpy.Topology module": [[31, "module-topologicpy.Topology"]], "topologicpy.Vector module": [[32, "module-topologicpy.Vector"]], "topologicpy.Vertex module": [[33, "module-topologicpy.Vertex"]], "topologicpy.Wire module": [[34, "module-topologicpy.Wire"]], "topologicpy.version module": [[35, "module-topologicpy.version"]]}, "indexentries": {"module": [[2, "module-topologicpy"], [3, "module-topologicpy.ANN"], [4, "module-topologicpy.Aperture"], [5, "module-topologicpy.BVH"], [6, "module-topologicpy.CSG"], [7, "module-topologicpy.Cell"], [8, "module-topologicpy.CellComplex"], [9, "module-topologicpy.Cluster"], [10, "module-topologicpy.Color"], [11, "module-topologicpy.Context"], [13, "module-topologicpy.Dictionary"], [14, "module-topologicpy.Edge"], [15, "module-topologicpy.EnergyModel"], [16, "module-topologicpy.Face"], [17, "module-topologicpy.Graph"], [18, "module-topologicpy.Grid"], [19, "module-topologicpy.Helper"], [20, "module-topologicpy.Honeybee"], [21, "module-topologicpy.Kuzu"], [22, "module-topologicpy.Matrix"], [23, "module-topologicpy.Neo4j"], [24, "module-topologicpy.Plotly"], [25, "module-topologicpy.Polyskel"], [26, "module-topologicpy.PyG"], [27, "module-topologicpy.ShapeGrammar"], [28, "module-topologicpy.Shell"], [30, "module-topologicpy.Sun"], [31, "module-topologicpy.Topology"], [32, "module-topologicpy.Vector"], [33, "module-topologicpy.Vertex"], [34, "module-topologicpy.Wire"], [35, "module-topologicpy.version"]], "topologicpy": [[2, "module-topologicpy"]], "ann (class in topologicpy.ann)": [[3, "topologicpy.ANN.ANN"]], "datasetbycsvpath() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetByCSVPath"]], "datasetbysamplename() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetBySampleName"]], "datasetsamplenames() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetSampleNames"]], "datasetsplit() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetSplit"]], "figures() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Figures"]], "hyperparameters() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Hyperparameters"]], "hyperparametersbysamplename() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.HyperparametersBySampleName"]], "initialize() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Initialize"]], "load() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Load"]], "metrics() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Metrics"]], "modeldata() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.ModelData"]], "save() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Save"]], "test() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Test"]], "train() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Train"]], "topologicpy.ann": [[3, "module-topologicpy.ANN"]], "aperture (class in topologicpy.aperture)": [[4, "topologicpy.Aperture.Aperture"]], "bytopologycontext() (topologicpy.aperture.aperture static method)": [[4, "topologicpy.Aperture.Aperture.ByTopologyContext"]], "topology() (topologicpy.aperture.aperture static method)": [[4, "topologicpy.Aperture.Aperture.Topology"]], "topologicpy.aperture": [[4, "module-topologicpy.Aperture"]], "aabb (class in topologicpy.bvh)": [[5, "topologicpy.BVH.AABB"]], "bvh (class in topologicpy.bvh)": [[5, "topologicpy.BVH.BVH"]], "bytopologies() (topologicpy.bvh.bvh static method)": [[5, "topologicpy.BVH.BVH.ByTopologies"]], "clashes() (topologicpy.bvh.bvh static method)": [[5, "topologicpy.BVH.BVH.Clashes"]], "depth() (topologicpy.bvh.bvh static method)": [[5, "topologicpy.BVH.BVH.Depth"]], "nearest() (topologicpy.bvh.bvh static method)": [[5, "topologicpy.BVH.BVH.Nearest"]], "queryaabb() (topologicpy.bvh.bvh static method)": [[5, "topologicpy.BVH.BVH.QueryAABB"]], "raycast() (topologicpy.bvh.bvh static method)": [[5, "topologicpy.BVH.BVH.Raycast"]], "center() (topologicpy.bvh.aabb method)": [[5, "topologicpy.BVH.AABB.center"]], "contains_point() (topologicpy.bvh.aabb method)": [[5, "topologicpy.BVH.AABB.contains_point"]], "extent() (topologicpy.bvh.aabb method)": [[5, "topologicpy.BVH.AABB.extent"]], "from_points() (topologicpy.bvh.aabb static method)": [[5, "topologicpy.BVH.AABB.from_points"]], "maxx (topologicpy.bvh.aabb attribute)": [[5, "topologicpy.BVH.AABB.maxx"]], "maxy (topologicpy.bvh.aabb attribute)": [[5, "topologicpy.BVH.AABB.maxy"]], "maxz (topologicpy.bvh.aabb attribute)": [[5, "topologicpy.BVH.AABB.maxz"]], "minx (topologicpy.bvh.aabb attribute)": [[5, "topologicpy.BVH.AABB.minx"]], "miny (topologicpy.bvh.aabb attribute)": [[5, "topologicpy.BVH.AABB.miny"]], "minz (topologicpy.bvh.aabb attribute)": [[5, "topologicpy.BVH.AABB.minz"]], "overlaps() (topologicpy.bvh.aabb method)": [[5, "topologicpy.BVH.AABB.overlaps"]], "ray_intersect() (topologicpy.bvh.aabb method)": [[5, "topologicpy.BVH.AABB.ray_intersect"]], "topologicpy.bvh": [[5, "module-topologicpy.BVH"]], "union() (topologicpy.bvh.aabb static method)": [[5, "topologicpy.BVH.AABB.union"]], "addoperationvertex() (topologicpy.csg.csg static method)": [[6, "topologicpy.CSG.CSG.AddOperationVertex"]], "addtopologyvertex() (topologicpy.csg.csg static method)": [[6, "topologicpy.CSG.CSG.AddTopologyVertex"]], "csg (class in topologicpy.csg)": [[6, "topologicpy.CSG.CSG"]], "connect() (topologicpy.csg.csg static method)": [[6, "topologicpy.CSG.CSG.Connect"]], "init() (topologicpy.csg.csg static method)": [[6, "topologicpy.CSG.CSG.Init"]], "invoke() (topologicpy.csg.csg static method)": [[6, "topologicpy.CSG.CSG.Invoke"]], "topologies() (topologicpy.csg.csg method)": [[6, "topologicpy.CSG.CSG.Topologies"]], "topologicpy.csg": [[6, "module-topologicpy.CSG"]], "area() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Area"]], "box() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Box"]], "byfaces() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ByFaces"]], "byoffset() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ByOffset"]], "byshell() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ByShell"]], "byshells() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ByShells"]], "bythickenedface() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ByThickenedFace"]], "bythickenedshell() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ByThickenedShell"]], "bywires() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ByWires"]], "bywirescluster() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ByWiresCluster"]], "chs() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.CHS"]], "cshape() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.CShape"]], "capsule() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Capsule"]], "cell (class in topologicpy.cell)": [[7, "topologicpy.Cell.Cell"]], "compactness() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Compactness"]], "cone() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Cone"]], "containmentstatus() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ContainmentStatus"]], "crossshape() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.CrossShape"]], "cube() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Cube"]], "cylinder() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Cylinder"]], "decompose() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Decompose"]], "dodecahedron() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Dodecahedron"]], "edges() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Edges"]], "egg() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Egg"]], "externalboundary() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.ExternalBoundary"]], "faces() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Faces"]], "hyperboloid() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Hyperboloid"]], "ishape() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.IShape"]], "icosahedron() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Icosahedron"]], "internalboundaries() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.InternalBoundaries"]], "internalvertex() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.InternalVertex"]], "isonboundary() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.IsOnBoundary"]], "lshape() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.LShape"]], "octahedron() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Octahedron"]], "paraboloid() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Paraboloid"]], "pipe() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Pipe"]], "prism() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Prism"]], "rhs() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.RHS"]], "removecollinearedges() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.RemoveCollinearEdges"]], "roof() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Roof"]], "shs() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.SHS"]], "sets() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Sets"]], "shells() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Shells"]], "sphere() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Sphere"]], "surfacearea() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.SurfaceArea"]], "tshape() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.TShape"]], "tetrahedron() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Tetrahedron"]], "torus() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Torus"]], "torus_old() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Torus_old"]], "tube() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Tube"]], "vertices() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Vertices"]], "volume() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Volume"]], "wedge() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Wedge"]], "wires() (topologicpy.cell.cell static method)": [[7, "topologicpy.Cell.Cell.Wires"]], "topologicpy.cell": [[7, "module-topologicpy.Cell"]], "box() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Box"]], "bycells() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.ByCells"]], "bycellscluster() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.ByCellsCluster"]], "bydisjointedfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.ByDisjointedFaces"]], "byfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.ByFaces"]], "byfacescluster() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.ByFacesCluster"]], "bywires() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.ByWires"]], "bywirescluster() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.ByWiresCluster"]], "cellcomplex (class in topologicpy.cellcomplex)": [[8, "topologicpy.CellComplex.CellComplex"]], "cells() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Cells"]], "cube() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Cube"]], "decompose() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Decompose"]], "delaunay() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Delaunay"]], "edges() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Edges"]], "externalboundary() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.ExternalBoundary"]], "externalfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.ExternalFaces"]], "faces() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Faces"]], "internalfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.InternalFaces"]], "nonmanifoldfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.NonManifoldFaces"]], "octahedron() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Octahedron"]], "prism() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Prism"]], "removecollinearedges() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.RemoveCollinearEdges"]], "shells() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Shells"]], "tetrahedron() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Tetrahedron"]], "torus() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Torus"]], "vertices() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Vertices"]], "volume() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Volume"]], "voronoi() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Voronoi"]], "wires() (topologicpy.cellcomplex.cellcomplex static method)": [[8, "topologicpy.CellComplex.CellComplex.Wires"]], "topologicpy.cellcomplex": [[8, "module-topologicpy.CellComplex"]], "byformula() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.ByFormula"]], "bytopologies() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.ByTopologies"]], "cellcomplexes() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.CellComplexes"]], "cells() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.Cells"]], "cluster (class in topologicpy.cluster)": [[9, "topologicpy.Cluster.Cluster"]], "dbscan() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.DBSCAN"]], "edges() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.Edges"]], "externalboundary() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.ExternalBoundary"]], "faces() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.Faces"]], "freecells() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.FreeCells"]], "freeedges() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.FreeEdges"]], "freefaces() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.FreeFaces"]], "freeshells() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.FreeShells"]], "freetopologies() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.FreeTopologies"]], "freevertices() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.FreeVertices"]], "freewires() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.FreeWires"]], "highesttype() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.HighestType"]], "k_means() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.K_Means"]], "mergecells() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.MergeCells"]], "mysticrose() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.MysticRose"]], "shells() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.Shells"]], "simplify() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.Simplify"]], "tripod() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.Tripod"]], "vertices() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.Vertices"]], "wires() (topologicpy.cluster.cluster static method)": [[9, "topologicpy.Cluster.Cluster.Wires"]], "topologicpy.cluster": [[9, "module-topologicpy.Cluster"]], "addhex() (topologicpy.color.color method)": [[10, "topologicpy.Color.Color.AddHex"]], "anytohex() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.AnyToHex"]], "average() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.Average"]], "bycssnamedcolor() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.ByCSSNamedColor"]], "byhex() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.ByHEX"]], "byvalueinrange() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.ByValueInRange"]], "cmyktohex() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.CMYKToHex"]], "cssnamedcolor() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.CSSNamedColor"]], "cssnamedcolors() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.CSSNamedColors"]], "color (class in topologicpy.color)": [[10, "topologicpy.Color.Color"]], "plotlycolor() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.PlotlyColor"]], "rgbtohex() (topologicpy.color.color static method)": [[10, "topologicpy.Color.Color.RGBToHex"]], "topologicpy.color": [[10, "module-topologicpy.Color"]], "bytopologyparameters() (topologicpy.context.context static method)": [[11, "topologicpy.Context.Context.ByTopologyParameters"]], "context (class in topologicpy.context)": [[11, "topologicpy.Context.Context"]], "topology() (topologicpy.context.context static method)": [[11, "topologicpy.Context.Context.Topology"]], "topologicpy.context": [[11, "module-topologicpy.Context"]], "adjacencydictionary() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.AdjacencyDictionary"]], "bykeyvalue() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.ByKeyValue"]], "bykeysvalues() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.ByKeysValues"]], "bymergeddictionaries() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.ByMergedDictionaries"]], "bypythondictionary() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.ByPythonDictionary"]], "copy() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.Copy"]], "dictionary (class in topologicpy.dictionary)": [[13, "topologicpy.Dictionary.Dictionary"]], "filter() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.Filter"]], "keys() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.Keys"]], "listattributevalues() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.ListAttributeValues"]], "pythondictionary() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.PythonDictionary"]], "removekey() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.RemoveKey"]], "setvalueatkey() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.SetValueAtKey"]], "setvaluesatkeys() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.SetValuesAtKeys"]], "valueatkey() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.ValueAtKey"]], "values() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.Values"]], "valuesatkeys() (topologicpy.dictionary.dictionary static method)": [[13, "topologicpy.Dictionary.Dictionary.ValuesAtKeys"]], "topologicpy.dictionary": [[13, "module-topologicpy.Dictionary"]], "align2d() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Align2D"]], "angle() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Angle"]], "bisect() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Bisect"]], "byfacenormal() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.ByFaceNormal"]], "byoffset2d() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.ByOffset2D"]], "byorigindirectionlength() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.ByOriginDirectionLength"]], "bystartvertexendvertex() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.ByStartVertexEndVertex"]], "byvertices() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.ByVertices"]], "byverticescluster() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.ByVerticesCluster"]], "connection() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Connection"]], "direction() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Direction"]], "edge (class in topologicpy.edge)": [[14, "topologicpy.Edge.Edge"]], "endvertex() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.EndVertex"]], "equation2d() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Equation2D"]], "extend() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Extend"]], "extendtoedge() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.ExtendToEdge"]], "externalboundary() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.ExternalBoundary"]], "index() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Index"]], "intersect2d() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Intersect2D"]], "iscollinear() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.IsCollinear"]], "iscoplanar() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.IsCoplanar"]], "isparallel() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.IsParallel"]], "length() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Length"]], "line() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Line"]], "normal() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Normal"]], "normaledge() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.NormalEdge"]], "normalize() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Normalize"]], "parameteratvertex() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.ParameterAtVertex"]], "reverse() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Reverse"]], "setlength() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.SetLength"]], "startvertex() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.StartVertex"]], "trim() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Trim"]], "trimbyedge() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.TrimByEdge"]], "vertexbydistance() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.VertexByDistance"]], "vertexbyparameter() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.VertexByParameter"]], "vertices() (topologicpy.edge.edge static method)": [[14, "topologicpy.Edge.Edge.Vertices"]], "topologicpy.edge": [[14, "module-topologicpy.Edge"]], "byosmpath() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.ByOSMPath"]], "bytopology() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.ByTopology"]], "columnnames() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.ColumnNames"]], "defaultconstructionsets() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.DefaultConstructionSets"]], "defaultschedulesets() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.DefaultScheduleSets"]], "energymodel (class in topologicpy.energymodel)": [[15, "topologicpy.EnergyModel.EnergyModel"]], "exporttogbxml() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.ExportToGBXML"]], "exporttoosm() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.ExportToOSM"]], "gbxmlstring() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.GBXMLString"]], "query() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.Query"]], "reportnames() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.ReportNames"]], "rownames() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.RowNames"]], "run() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.Run"]], "spacecolors() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.SpaceColors"]], "spacedictionaries() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.SpaceDictionaries"]], "spacetypenames() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.SpaceTypeNames"]], "spacetypes() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.SpaceTypes"]], "sqlfile() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.SqlFile"]], "tablenames() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.TableNames"]], "topologies() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.Topologies"]], "units() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.Units"]], "version() (topologicpy.energymodel.energymodel static method)": [[15, "topologicpy.EnergyModel.EnergyModel.Version"]], "topologicpy.energymodel": [[15, "module-topologicpy.EnergyModel"]], "addinternalboundaries() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.AddInternalBoundaries"]], "addinternalboundariescluster() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.AddInternalBoundariesCluster"]], "angle() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Angle"]], "area() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Area"]], "boundingrectangle() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.BoundingRectangle"]], "byedges() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByEdges"]], "byedgescluster() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByEdgesCluster"]], "byoffset() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByOffset"]], "byoffsetarea() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByOffsetArea"]], "byshell() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByShell"]], "bythickenedwire() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByThickenedWire"]], "byvertices() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByVertices"]], "byverticescluster() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByVerticesCluster"]], "bywire() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByWire"]], "bywires() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByWires"]], "bywirescluster() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ByWiresCluster"]], "chs() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.CHS"]], "cshape() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.CShape"]], "circle() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Circle"]], "compactness() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Compactness"]], "compassangle() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.CompassAngle"]], "crossshape() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.CrossShape"]], "edges() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Edges"]], "einstein() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Einstein"]], "ellipse() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Ellipse"]], "exteriorangles() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ExteriorAngles"]], "externalboundary() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ExternalBoundary"]], "face (class in topologicpy.face)": [[16, "topologicpy.Face.Face"]], "facingtoward() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.FacingToward"]], "fillet() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Fillet"]], "harmonize() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Harmonize"]], "ishape() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.IShape"]], "interiorangles() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.InteriorAngles"]], "internalboundaries() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.InternalBoundaries"]], "internalvertex() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.InternalVertex"]], "invert() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Invert"]], "isconvex() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.IsConvex"]], "iscoplanar() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.IsCoplanar"]], "isovist() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Isovist"]], "lshape() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.LShape"]], "medialaxis() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.MedialAxis"]], "normal() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Normal"]], "normaledge() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.NormalEdge"]], "northarrow() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.NorthArrow"]], "planarize() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Planarize"]], "planeequation() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.PlaneEquation"]], "project() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Project"]], "rhs() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.RHS"]], "rectangle() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Rectangle"]], "rectanglebyplaneequation() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.RectangleByPlaneEquation"]], "removecollinearedges() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.RemoveCollinearEdges"]], "ring() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Ring"]], "shs() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.SHS"]], "simplify() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Simplify"]], "skeleton() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Skeleton"]], "square() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Square"]], "squircle() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Squircle"]], "star() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Star"]], "tshape() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.TShape"]], "thirdvertex() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.ThirdVertex"]], "trapezoid() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Trapezoid"]], "triangulate() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Triangulate"]], "trimbywire() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.TrimByWire"]], "vertexbyparameters() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.VertexByParameters"]], "vertexparameters() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.VertexParameters"]], "vertices() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Vertices"]], "wire() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Wire"]], "wires() (topologicpy.face.face static method)": [[16, "topologicpy.Face.Face.Wires"]], "topologicpy.face": [[16, "module-topologicpy.Face"]], "accessibilitycentrality() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AccessibilityCentrality"]], "addedge() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AddEdge"]], "addedgebyindex() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AddEdgeByIndex"]], "addvertex() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AddVertex"]], "addvertices() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AddVertices"]], "adjacencydictionary() (topologicpy.graph.graph method)": [[17, "topologicpy.Graph.Graph.AdjacencyDictionary"]], "adjacencylist() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AdjacencyList"]], "adjacencymatrix() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AdjacencyMatrix"]], "adjacencymatrixcsvstring() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AdjacencyMatrixCSVString"]], "adjacencymatrixfigure() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AdjacencyMatrixFigure"]], "adjacentedges() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AdjacentEdges"]], "adjacentvertices() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AdjacentVertices"]], "adjacentverticesbycompassdirection() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AdjacentVerticesByCompassDirection"]], "adjacentverticesbyvector() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AdjacentVerticesByVector"]], "allpaths() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AllPaths"]], "averageclusteringcoefficient() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.AverageClusteringCoefficient"]], "botgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.BOTGraph"]], "botstring() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.BOTString"]], "betweennesscentrality() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.BetweennessCentrality"]], "betweennesspartition() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.BetweennessPartition"]], "bridges() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Bridges"]], "byadjacencymatrix() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByAdjacencyMatrix"]], "byadjacencymatrixcsvpath() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByAdjacencyMatrixCSVPath"]], "bybotgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByBOTGraph"]], "bybotpath() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByBOTPath"]], "bycsvpath() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByCSVPath"]], "bydgcnnfile() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByDGCNNFile"]], "bydgcnnpath() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByDGCNNPath"]], "bydgcnnstring() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByDGCNNString"]], "bydictionaries() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByDictionaries"]], "byifcfile() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByIFCFile"]], "byifcpath() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByIFCPath"]], "byjsondictionary() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByJSONDictionary"]], "byjsonfile() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByJSONFile"]], "byjsonpath() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByJSONPath"]], "bymeshdata() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByMeshData"]], "bynetworkxgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByNetworkXGraph"]], "byspatialrelationships() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.BySpatialRelationships"]], "bytopology() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByTopology"]], "byverticesedges() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ByVerticesEdges"]], "choice() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Choice"]], "chromaticnumber() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ChromaticNumber"]], "closenesscentrality() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ClosenessCentrality"]], "color() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Color"]], "community() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Community"]], "communitypartition() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.CommunityPartition"]], "compare() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Compare"]], "complement() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Complement"]], "complete() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Complete"]], "connect() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Connect"]], "connectedcomponents() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ConnectedComponents"]], "connectivity() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Connectivity"]], "containsedge() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ContainsEdge"]], "containsvertex() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ContainsVertex"]], "contractedge() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ContractEdge"]], "cutvertices() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.CutVertices"]], "degreecentrality() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.DegreeCentrality"]], "degreematrix() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.DegreeMatrix"]], "degreesequence() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.DegreeSequence"]], "density() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Density"]], "depth() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Depth"]], "depthmap() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.DepthMap"]], "diameter() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Diameter"]], "dictionary() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Dictionary"]], "difference() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Difference"]], "distance() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Distance"]], "edge() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Edge"]], "edges() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Edges"]], "eigenvectorcentrality() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.EigenVectorCentrality"]], "exporttoadjacencymatrixcsv() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ExportToAdjacencyMatrixCSV"]], "exporttobot() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ExportToBOT"]], "exporttocsv() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ExportToCSV"]], "exporttogexf() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ExportToGEXF"]], "exporttographvizgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ExportToGraphVizGraph"]], "exporttojson() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ExportToJSON"]], "exporttojsonld() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ExportToJSONLD"]], "fiedlervector() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.FiedlerVector"]], "fiedlervectorpartition() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.FiedlerVectorPartition"]], "globalclusteringcoefficient() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.GlobalClusteringCoefficient"]], "graph (class in topologicpy.graph)": [[17, "topologicpy.Graph.Graph"]], "graphqueueitem (class in topologicpy.graph)": [[17, "topologicpy.Graph.GraphQueueItem"]], "graphvizgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.GraphVizGraph"]], "guid() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Guid"]], "hassediagram() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.HasseDiagram"]], "hopperkernel() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.HopperKernel"]], "impose() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Impose"]], "imprint() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Imprint"]], "incomingedges() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IncomingEdges"]], "incomingvertices() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IncomingVertices"]], "inducedsubgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.InducedSubgraph"]], "integration() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Integration"]], "intersect() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Intersect"]], "isbipartite() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IsBipartite"]], "iscomplete() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IsComplete"]], "isconnected() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IsConnected"]], "isempty() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IsEmpty"]], "iserdoesgallai() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IsErdoesGallai"]], "isisomorphic() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IsIsomorphic"]], "istree() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IsTree"]], "isolatedvertices() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.IsolatedVertices"]], "jsondata() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.JSONData"]], "jsonlddata() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.JSONLDData"]], "jsonldstring() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.JSONLDString"]], "jsonstring() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.JSONString"]], "khopssubgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.KHopsSubgraph"]], "kernel() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Kernel"]], "laplacian() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Laplacian"]], "leaves() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Leaves"]], "linegraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.LineGraph"]], "localclusteringcoefficient() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.LocalClusteringCoefficient"]], "longestpath() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.LongestPath"]], "match() (topologicpy.graph.graph method)": [[17, "topologicpy.Graph.Graph.Match"]], "maximumdelta() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.MaximumDelta"]], "maximumflow() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.MaximumFlow"]], "merge() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Merge"]], "mergevertices() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.MergeVertices"]], "mergingprocess (class in topologicpy.graph)": [[17, "topologicpy.Graph.MergingProcess"]], "meshdata() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.MeshData"]], "metricdistance() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.MetricDistance"]], "minimumdelta() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.MinimumDelta"]], "minimumspanningtree() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.MinimumSpanningTree"]], "navigationgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.NavigationGraph"]], "nearestvertex() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.NearestVertex"]], "networkxgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.NetworkXGraph"]], "order() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Order"]], "outgoingedges() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.OutgoingEdges"]], "outgoingvertices() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.OutgoingVertices"]], "pagerank() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.PageRank"]], "partition() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Partition"]], "path() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Path"]], "pyvisgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.PyvisGraph"]], "quotient() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Quotient"]], "removeedge() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.RemoveEdge"]], "removeisolatededges() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.RemoveIsolatedEdges"]], "removeisolatedvertices() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.RemoveIsolatedVertices"]], "removevertex() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.RemoveVertex"]], "reshape() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Reshape"]], "setdictionary() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.SetDictionary"]], "shortestpath() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ShortestPath"]], "shortestpaths() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.ShortestPaths"]], "show() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Show"]], "size() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Size"]], "subgraphmatches() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.SubGraphMatches"]], "subgraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Subgraph"]], "symmetricdifference() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.SymmetricDifference"]], "tietze() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Tietze"]], "topologicaldistance() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.TopologicalDistance"]], "topology() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Topology"]], "tree() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Tree"]], "union() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Union"]], "vertexdegree() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.VertexDegree"]], "vertices() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.Vertices"]], "visibilitygraph() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.VisibilityGraph"]], "wlfeatures() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.WLFeatures"]], "wlkernel() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.WLKernel"]], "weightedjaccardsimilarity() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.WeightedJaccardSimilarity"]], "workerprocess (class in topologicpy.graph)": [[17, "topologicpy.Graph.WorkerProcess"]], "workerprocesspool (class in topologicpy.graph)": [[17, "topologicpy.Graph.WorkerProcessPool"]], "xor() (topologicpy.graph.graph static method)": [[17, "topologicpy.Graph.Graph.XOR"]], "edges (topologicpy.graph.graphqueueitem attribute)": [[17, "topologicpy.Graph.GraphQueueItem.edges"]], "join() (topologicpy.graph.workerprocesspool method)": [[17, "topologicpy.Graph.WorkerProcessPool.join"]], "run() (topologicpy.graph.workerprocess method)": [[17, "topologicpy.Graph.WorkerProcess.run"]], "startprocesses() (topologicpy.graph.workerprocesspool method)": [[17, "topologicpy.Graph.WorkerProcessPool.startProcesses"]], "stopprocesses() (topologicpy.graph.workerprocesspool method)": [[17, "topologicpy.Graph.WorkerProcessPool.stopProcesses"]], "topologicpy.graph": [[17, "module-topologicpy.Graph"]], "wait_message() (topologicpy.graph.mergingprocess method)": [[17, "topologicpy.Graph.MergingProcess.wait_message"]], "edgesbydistances() (topologicpy.grid.grid static method)": [[18, "topologicpy.Grid.Grid.EdgesByDistances"]], "edgesbyparameters() (topologicpy.grid.grid static method)": [[18, "topologicpy.Grid.Grid.EdgesByParameters"]], "grid (class in topologicpy.grid)": [[18, "topologicpy.Grid.Grid"]], "verticesbydistances() (topologicpy.grid.grid static method)": [[18, "topologicpy.Grid.Grid.VerticesByDistances"]], "verticesbyparameters() (topologicpy.grid.grid static method)": [[18, "topologicpy.Grid.Grid.VerticesByParameters"]], "topologicpy.grid": [[18, "module-topologicpy.Grid"]], "binandaverage() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.BinAndAverage"]], "checkversion() (topologicpy.helper.helper method)": [[19, "topologicpy.Helper.Helper.CheckVersion"]], "closestmatch() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.ClosestMatch"]], "clusterbykeys() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.ClusterByKeys"]], "flatten() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Flatten"]], "grow() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Grow"]], "helper (class in topologicpy.helper)": [[19, "topologicpy.Helper.Helper"]], "iterate() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Iterate"]], "makeunique() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.MakeUnique"]], "maximumindices() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.MaximumIndices"]], "mergebythreshold() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.MergeByThreshold"]], "minimumindices() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.MinimumIndices"]], "normalize() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Normalize"]], "position() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Position"]], "removeeven() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.RemoveEven"]], "removeodd() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.RemoveOdd"]], "repeat() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Repeat"]], "sort() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Sort"]], "transpose() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Transpose"]], "trim() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Trim"]], "version() (topologicpy.helper.helper static method)": [[19, "topologicpy.Helper.Helper.Version"]], "topologicpy.helper": [[19, "module-topologicpy.Helper"]], "byhbjsondictionary() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.ByHBJSONDictionary"]], "byhbjsonpath() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.ByHBJSONPath"]], "byhbjsonstring() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.ByHBJSONString"]], "constructionsetbyidentifier() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.ConstructionSetByIdentifier"]], "constructionsets() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.ConstructionSets"]], "exporttohbjson() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.ExportToHBJSON"]], "honeybee (class in topologicpy.honeybee)": [[20, "topologicpy.Honeybee.Honeybee"]], "modelbytopology() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.ModelByTopology"]], "programtypebyidentifier() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.ProgramTypeByIdentifier"]], "programtypes() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.ProgramTypes"]], "string() (topologicpy.honeybee.honeybee static method)": [[20, "topologicpy.Honeybee.Honeybee.String"]], "topologicpy.honeybee": [[20, "module-topologicpy.Honeybee"]], "bycsvpath() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.ByCSVPath"]], "connection() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.Connection"]], "database() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.Database"]], "deletegraph() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.DeleteGraph"]], "emptydatabase() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.EmptyDatabase"]], "ensureschema() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.EnsureSchema"]], "graphbyid() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.GraphByID"]], "graphsbyquery() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.GraphsByQuery"]], "kuzu (class in topologicpy.kuzu)": [[21, "topologicpy.Kuzu.Kuzu"]], "listgraphs() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.ListGraphs"]], "manager() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.Manager"]], "upsertgraph() (topologicpy.kuzu.kuzu static method)": [[21, "topologicpy.Kuzu.Kuzu.UpsertGraph"]], "topologicpy.kuzu": [[21, "module-topologicpy.Kuzu"]], "add() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.Add"]], "bycoordinatesystems() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.ByCoordinateSystems"]], "byrotation() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.ByRotation"]], "byscaling() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.ByScaling"]], "bytranslation() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.ByTranslation"]], "byvectors() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.ByVectors"]], "byvectors_old() (topologicpy.matrix.matrix method)": [[22, "topologicpy.Matrix.Matrix.ByVectors_old"]], "eigenvaluesandvectors() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.EigenvaluesAndVectors"]], "identity() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.Identity"]], "invert() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.Invert"]], "matrix (class in topologicpy.matrix)": [[22, "topologicpy.Matrix.Matrix"]], "multiply() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.Multiply"]], "subtract() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.Subtract"]], "transpose() (topologicpy.matrix.matrix static method)": [[22, "topologicpy.Matrix.Matrix.Transpose"]], "topologicpy.matrix": [[22, "module-topologicpy.Matrix"]], "bygraph() (topologicpy.neo4j.neo4j method)": [[23, "topologicpy.Neo4j.Neo4j.ByGraph"]], "byparameters() (topologicpy.neo4j.neo4j static method)": [[23, "topologicpy.Neo4j.Neo4j.ByParameters"]], "exporttograph() (topologicpy.neo4j.neo4j static method)": [[23, "topologicpy.Neo4j.Neo4j.ExportToGraph"]], "neo4j (class in topologicpy.neo4j)": [[23, "topologicpy.Neo4j.Neo4j"]], "reset() (topologicpy.neo4j.neo4j static method)": [[23, "topologicpy.Neo4j.Neo4j.Reset"]], "setgraph() (topologicpy.neo4j.neo4j static method)": [[23, "topologicpy.Neo4j.Neo4j.SetGraph"]], "topologicpy.neo4j": [[23, "module-topologicpy.Neo4j"]], "addcolorbar() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.AddColorBar"]], "colorscale() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.ColorScale"]], "colors() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.Colors"]], "databydgl() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.DataByDGL"]], "databygraph() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.DataByGraph"]], "databytopology() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.DataByTopology"]], "exporttoimage() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.ExportToImage"]], "figurebyconfusionmatrix() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureByConfusionMatrix"]], "figurebycorrelation() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureByCorrelation"]], "figurebydata() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureByData"]], "figurebydataframe() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureByDataFrame"]], "figurebyjsonfile() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureByJSONFile"]], "figurebyjsonpath() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureByJSONPath"]], "figurebymatrix() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureByMatrix"]], "figurebypiechart() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureByPieChart"]], "figurebytopology() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureByTopology"]], "figureexporttojson() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureExportToJSON"]], "figureexporttopdf() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureExportToPDF"]], "figureexporttopng() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureExportToPNG"]], "figureexporttosvg() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.FigureExportToSVG"]], "plotly (class in topologicpy.plotly)": [[24, "topologicpy.Plotly.Plotly"]], "renderer() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.Renderer"]], "renderers() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.Renderers"]], "setcamera() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.SetCamera"]], "show() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.Show"]], "edgedata() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.edgeData"]], "topologicpy.plotly": [[24, "module-topologicpy.Plotly"]], "vertexdata() (topologicpy.plotly.plotly static method)": [[24, "topologicpy.Plotly.Plotly.vertexData"]], "subtree (class in topologicpy.polyskel)": [[25, "topologicpy.Polyskel.Subtree"]], "bisector() (in module topologicpy.polyskel)": [[25, "topologicpy.Polyskel.bisector"]], "distance() (in module topologicpy.polyskel)": [[25, "topologicpy.Polyskel.distance"]], "height (topologicpy.polyskel.subtree attribute)": [[25, "topologicpy.Polyskel.Subtree.height"]], "normalize() (in module topologicpy.polyskel)": [[25, "topologicpy.Polyskel.normalize"]], "sinks (topologicpy.polyskel.subtree attribute)": [[25, "topologicpy.Polyskel.Subtree.sinks"]], "skeletonize() (in module topologicpy.polyskel)": [[25, "topologicpy.Polyskel.skeletonize"]], "source (topologicpy.polyskel.subtree attribute)": [[25, "topologicpy.Polyskel.Subtree.source"]], "topologicpy.polyskel": [[25, "module-topologicpy.Polyskel"]], "accuracy() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.Accuracy"]], "confusionmatrix() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.ConfusionMatrix"]], "customgraphdataset (class in topologicpy.pyg)": [[26, "topologicpy.PyG.CustomGraphDataset"]], "datasetbycsvpath() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.DatasetByCSVPath"]], "datasetgraphlabels() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.DatasetGraphLabels"]], "datasetsplit() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.DatasetSplit"]], "hyperparameters() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.Hyperparameters"]], "mse() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.MSE"]], "model() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.Model"]], "modelclassify() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.ModelClassify"]], "modeldata() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.ModelData"]], "modelload() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.ModelLoad"]], "modelpredict() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.ModelPredict"]], "modelsave() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.ModelSave"]], "modeltest() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.ModelTest"]], "modeltrain() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.ModelTrain"]], "optimizer() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.Optimizer"]], "performance() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.Performance"]], "pyg (class in topologicpy.pyg)": [[26, "topologicpy.PyG.PyG"]], "show() (topologicpy.pyg.pyg static method)": [[26, "topologicpy.PyG.PyG.Show"]], "process_all() (topologicpy.pyg.customgraphdataset method)": [[26, "topologicpy.PyG.CustomGraphDataset.process_all"]], "topologicpy.pyg": [[26, "module-topologicpy.PyG"]], "addrule() (topologicpy.shapegrammar.shapegrammar method)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar.AddRule"]], "applicablerules() (topologicpy.shapegrammar.shapegrammar method)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar.ApplicableRules"]], "applyrule() (topologicpy.shapegrammar.shapegrammar method)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar.ApplyRule"]], "clusterbyinputoutput() (topologicpy.shapegrammar.shapegrammar method)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar.ClusterByInputOutput"]], "clusterbyrule() (topologicpy.shapegrammar.shapegrammar method)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar.ClusterByRule"]], "figurebyinputoutput() (topologicpy.shapegrammar.shapegrammar method)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar.FigureByInputOutput"]], "figurebyrule() (topologicpy.shapegrammar.shapegrammar method)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar.FigureByRule"]], "operationbytitle() (topologicpy.shapegrammar.shapegrammar method)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar.OperationByTitle"]], "operationtitles() (topologicpy.shapegrammar.shapegrammar method)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar.OperationTitles"]], "shapegrammar (class in topologicpy.shapegrammar)": [[27, "topologicpy.ShapeGrammar.ShapeGrammar"]], "topologicpy.shapegrammar": [[27, "module-topologicpy.ShapeGrammar"]], "bydisjointfaces() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.ByDisjointFaces"]], "byfaces() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.ByFaces"]], "byfacescluster() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.ByFacesCluster"]], "bythickenedwire() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.ByThickenedWire"]], "bywires() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.ByWires"]], "bywirescluster() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.ByWiresCluster"]], "circle() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Circle"]], "delaunay() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Delaunay"]], "edges() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Edges"]], "externalboundary() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.ExternalBoundary"]], "faces() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Faces"]], "hyperbolicparaboloidcirculardomain() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.HyperbolicParaboloidCircularDomain"]], "hyperbolicparaboloidrectangulardomain() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.HyperbolicParaboloidRectangularDomain"]], "internalboundaries() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.InternalBoundaries"]], "internaledges() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.InternalEdges"]], "isclosed() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.IsClosed"]], "isonboundary() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.IsOnBoundary"]], "mobiusstrip() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.MobiusStrip"]], "paraboloid() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Paraboloid"]], "pie() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Pie"]], "planarize() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Planarize"]], "rectangle() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Rectangle"]], "removecollinearedges() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.RemoveCollinearEdges"]], "roof() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Roof"]], "selfmerge() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.SelfMerge"]], "shell (class in topologicpy.shell)": [[28, "topologicpy.Shell.Shell"]], "simplify() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Simplify"]], "skeleton() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Skeleton"]], "square() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Square"]], "vertices() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Vertices"]], "voronoi() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Voronoi"]], "wires() (topologicpy.shell.shell static method)": [[28, "topologicpy.Shell.Shell.Wires"]], "topologicpy.shell": [[28, "module-topologicpy.Shell"]], "altitude() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.Altitude"]], "autumnequinox() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.AutumnEquinox"]], "azimuth() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.Azimuth"]], "diagram() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.Diagram"]], "edge() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.Edge"]], "pathbydate() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.PathByDate"]], "pathbyhour() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.PathByHour"]], "position() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.Position"]], "springequinox() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.SpringEquinox"]], "summersolstice() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.SummerSolstice"]], "sun (class in topologicpy.sun)": [[30, "topologicpy.Sun.Sun"]], "sunrise() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.Sunrise"]], "sunset() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.Sunset"]], "vector() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.Vector"]], "vertex() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.Vertex"]], "verticesbydate() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.VerticesByDate"]], "verticesbyhour() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.VerticesByHour"]], "wintersolstice() (topologicpy.sun.sun static method)": [[30, "topologicpy.Sun.Sun.WinterSolstice"]], "topologicpy.sun": [[30, "module-topologicpy.Sun"]], "addapertures() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.AddApertures"]], "addcontent() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.AddContent"]], "adddictionary() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.AddDictionary"]], "adjacenttopologies() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.AdjacentTopologies"]], "analyze() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Analyze"]], "aperturetopologies() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ApertureTopologies"]], "apertures() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Apertures"]], "brepstring() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.BREPString"]], "boundingbox() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.BoundingBox"]], "bybimfile() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByBIMFile"]], "bybimpath() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByBIMPath"]], "bybimstring() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByBIMString"]], "bybrepfile() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByBREPFile"]], "bybreppath() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByBREPPath"]], "bybrepstring() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByBREPString"]], "bydxffile() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByDXFFile"]], "bydxfpath() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByDXFPath"]], "bygeometry() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByGeometry"]], "byifcfile() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByIFCFile"]], "byifcpath() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByIFCPath"]], "byjsondictionary() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByJSONDictionary"]], "byjsonfile() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByJSONFile"]], "byjsonpath() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByJSONPath"]], "byjsonstring() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByJSONString"]], "bymeshdata() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByMeshData"]], "byobjfile() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByOBJFile"]], "byobjpath() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByOBJPath"]], "byobjstring() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByOBJString"]], "byocctshape() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByOCCTShape"]], "bypdffile() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByPDFFile"]], "bypdfpath() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByPDFPath"]], "byxyzfile() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByXYZFile"]], "byxyzpath() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ByXYZPath"]], "canonicalmatrix() (topologicpy.topology.topology method)": [[31, "topologicpy.Topology.Topology.CanonicalMatrix"]], "cellcomplexes() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.CellComplexes"]], "cells() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Cells"]], "centerofmass() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.CenterOfMass"]], "centroid() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Centroid"]], "cleanup() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Cleanup"]], "clusterbykeys() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ClusterByKeys"]], "clusterfaces() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ClusterFaces"]], "clusters() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Clusters"]], "contents() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Contents"]], "contexts() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Contexts"]], "convexhull() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ConvexHull"]], "copy() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Copy"]], "degree() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Degree"]], "diameter() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Diameter"]], "dictionary() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Dictionary"]], "difference() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Difference"]], "dimensionality() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Dimensionality"]], "divide() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Divide"]], "edges() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Edges"]], "explode() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Explode"]], "exporttobim() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ExportToBIM"]], "exporttobrep() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ExportToBREP"]], "exporttodxf() (topologicpy.topology.topology method)": [[31, "topologicpy.Topology.Topology.ExportToDXF"]], "exporttojson() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ExportToJSON"]], "exporttoobj() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ExportToOBJ"]], "externalboundary() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ExternalBoundary"]], "faces() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Faces"]], "filter() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Filter"]], "fix() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Fix"]], "flatten() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Flatten"]], "geometry() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Geometry"]], "highesttype() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.HighestType"]], "id (topologicpy.topology.queueitem attribute)": [[31, "topologicpy.Topology.QueueItem.ID"]], "id (topologicpy.topology.sinkitem attribute)": [[31, "topologicpy.Topology.SinkItem.ID"]], "impose() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Impose"]], "imprint() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Imprint"]], "inherit() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Inherit"]], "internalvertex() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.InternalVertex"]], "intersect() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Intersect"]], "isinstance() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.IsInstance"]], "isplanar() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.IsPlanar"]], "issame() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.IsSame"]], "issimilar() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.IsSimilar"]], "isvertexcongruent() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.IsVertexCongruent"]], "jsonstring() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.JSONString"]], "largestfaces() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.LargestFaces"]], "longestedges() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.LongestEdges"]], "merge() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Merge"]], "mergeall() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.MergeAll"]], "mergingprocess (class in topologicpy.topology)": [[31, "topologicpy.Topology.MergingProcess"]], "meshdata() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.MeshData"]], "move() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Move"]], "nonplanarfaces() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.NonPlanarFaces"]], "objstring() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.OBJString"]], "occtshape() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.OCCTShape"]], "openedges() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.OpenEdges"]], "openfaces() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.OpenFaces"]], "openvertices() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.OpenVertices"]], "orient() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Orient"]], "place() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Place"]], "principalaxes() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.PrincipalAxes"]], "queueitem (class in topologicpy.topology)": [[31, "topologicpy.Topology.QueueItem"]], "removecollinearedges() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.RemoveCollinearEdges"]], "removecontent() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.RemoveContent"]], "removecoplanarfaces() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.RemoveCoplanarFaces"]], "removeedges() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.RemoveEdges"]], "removefaces() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.RemoveFaces"]], "removefacesbyselectors() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.RemoveFacesBySelectors"]], "removevertices() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.RemoveVertices"]], "replacevertices() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ReplaceVertices"]], "rotate() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Rotate"]], "rotatebyeulerangles() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.RotateByEulerAngles"]], "rotatebyquaternion() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.RotateByQuaternion"]], "scale() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Scale"]], "selectsubtopology() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SelectSubTopology"]], "selfmerge() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SelfMerge"]], "setdictionary() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SetDictionary"]], "setsnapshot() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SetSnapshot"]], "sharededges() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SharedEdges"]], "sharedfaces() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SharedFaces"]], "sharedtopologies() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SharedTopologies"]], "sharedvertices() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SharedVertices"]], "sharedwires() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SharedWires"]], "shells() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Shells"]], "shortestedges() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.ShortestEdges"]], "show() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Show"]], "sinkitem (class in topologicpy.topology)": [[31, "topologicpy.Topology.SinkItem"]], "slice() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Slice"]], "smallestfaces() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SmallestFaces"]], "snapshots() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Snapshots"]], "sortbyselectors() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SortBySelectors"]], "spatialrelationship() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SpatialRelationship"]], "spin() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Spin"]], "subcombinations() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SubCombinations"]], "subtopologies() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SubTopologies"]], "supertopologies() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SuperTopologies"]], "symdif() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SymDif"]], "symmetricdifference() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.SymmetricDifference"]], "taper() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Taper"]], "topology (class in topologicpy.topology)": [[31, "topologicpy.Topology.Topology"]], "transferdictionaries() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.TransferDictionaries"]], "transferdictionariesbyselectors() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.TransferDictionariesBySelectors"]], "transform() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Transform"]], "translate() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Translate"]], "translatebydirectiondistance() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.TranslateByDirectionDistance"]], "triangulate() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Triangulate"]], "twist() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Twist"]], "type() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Type"]], "typeasstring() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.TypeAsString"]], "typeid() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.TypeID"]], "uuid() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.UUID"]], "unflatten() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Unflatten"]], "union() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Union"]], "vertices() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Vertices"]], "view3d() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.View3D"]], "wires() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.Wires"]], "workerprocess (class in topologicpy.topology)": [[31, "topologicpy.Topology.WorkerProcess"]], "workerprocesspool (class in topologicpy.topology)": [[31, "topologicpy.Topology.WorkerProcessPool"]], "xor() (topologicpy.topology.topology static method)": [[31, "topologicpy.Topology.Topology.XOR"]], "join() (topologicpy.topology.workerprocesspool method)": [[31, "topologicpy.Topology.WorkerProcessPool.join"]], "run() (topologicpy.topology.workerprocess method)": [[31, "topologicpy.Topology.WorkerProcess.run"]], "sinkkeys (topologicpy.topology.queueitem attribute)": [[31, "topologicpy.Topology.QueueItem.sinkKeys"]], "sinkvalues (topologicpy.topology.queueitem attribute)": [[31, "topologicpy.Topology.QueueItem.sinkValues"]], "sink_str (topologicpy.topology.sinkitem attribute)": [[31, "topologicpy.Topology.SinkItem.sink_str"]], "startprocesses() (topologicpy.topology.workerprocesspool method)": [[31, "topologicpy.Topology.WorkerProcessPool.startProcesses"]], "stopprocesses() (topologicpy.topology.workerprocesspool method)": [[31, "topologicpy.Topology.WorkerProcessPool.stopProcesses"]], "topologicpy.topology": [[31, "module-topologicpy.Topology"]], "wait_message() (topologicpy.topology.mergingprocess method)": [[31, "topologicpy.Topology.MergingProcess.wait_message"]], "add() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Add"]], "angle() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Angle"]], "average() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Average"]], "azimuthaltitude() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.AzimuthAltitude"]], "bisect() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Bisect"]], "byazimuthaltitude() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.ByAzimuthAltitude"]], "bycoordinates() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.ByCoordinates"]], "byvertices() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.ByVertices"]], "compassangle() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.CompassAngle"]], "compassdirection() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.CompassDirection"]], "compassdirections() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.CompassDirections"]], "coordinates() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Coordinates"]], "cross() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Cross"]], "dot() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Dot"]], "down() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Down"]], "east() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.East"]], "isantiparallel() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.IsAntiParallel"]], "iscollinear() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.IsCollinear"]], "isparallel() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.IsParallel"]], "issame() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.IsSame"]], "length() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Length"]], "magnitude() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Magnitude"]], "multiply() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Multiply"]], "normalize() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Normalize"]], "north() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.North"]], "northeast() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.NorthEast"]], "northwest() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.NorthWest"]], "reverse() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Reverse"]], "setmagnitude() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.SetMagnitude"]], "south() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.South"]], "southeast() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.SouthEast"]], "southwest() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.SouthWest"]], "subtract() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Subtract"]], "sum() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Sum"]], "transformationmatrix() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.TransformationMatrix"]], "up() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.Up"]], "vector (class in topologicpy.vector)": [[32, "topologicpy.Vector.Vector"]], "west() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.West"]], "xaxis() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.XAxis"]], "yaxis() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.YAxis"]], "zaxis() (topologicpy.vector.vector static method)": [[32, "topologicpy.Vector.Vector.ZAxis"]], "topologicpy.vector": [[32, "module-topologicpy.Vector"]], "aligncoordinates() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.AlignCoordinates"]], "arecollinear() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.AreCollinear"]], "arecoplanar() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.AreCoplanar"]], "areipsilateral() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.AreIpsilateral"]], "areipsilateralcluster() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.AreIpsilateralCluster"]], "areonsameside() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.AreOnSameSide"]], "areonsamesidecluster() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.AreOnSameSideCluster"]], "bycoordinates() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.ByCoordinates"]], "centroid() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Centroid"]], "clockwise2d() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Clockwise2D"]], "coordinates() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Coordinates"]], "counterclockwise2d() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.CounterClockwise2D"]], "degree() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Degree"]], "distance() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Distance"]], "enclosingcells() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.EnclosingCells"]], "externalboundary() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.ExternalBoundary"]], "fuse() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Fuse"]], "incomingedges() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.IncomingEdges"]], "index() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Index"]], "interpolatevalue() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.InterpolateValue"]], "iscoincident() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.IsCoincident"]], "isexternal() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.IsExternal"]], "isinternal() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.IsInternal"]], "isperipheral() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.IsPeripheral"]], "nearestvertex() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.NearestVertex"]], "normal() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Normal"]], "origin() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Origin"]], "outgoingedges() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.OutgoingEdges"]], "perpendiculardistance() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.PerpendicularDistance"]], "planeequation() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.PlaneEquation"]], "point() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Point"]], "project() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Project"]], "separate() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Separate"]], "transform() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Transform"]], "vertex (class in topologicpy.vertex)": [[33, "topologicpy.Vertex.Vertex"]], "x() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.X"]], "y() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Y"]], "z() (topologicpy.vertex.vertex static method)": [[33, "topologicpy.Vertex.Vertex.Z"]], "topologicpy.vertex": [[33, "module-topologicpy.Vertex"]], "arc() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Arc"]], "arcbyedge() (topologicpy.wire.wire method)": [[34, "topologicpy.Wire.Wire.ArcByEdge"]], "boundingrectangle() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.BoundingRectangle"]], "byedges() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ByEdges"]], "byedgescluster() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ByEdgesCluster"]], "byoffset() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ByOffset"]], "byoffsetarea() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ByOffsetArea"]], "byvertices() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ByVertices"]], "byverticescluster() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ByVerticesCluster"]], "cshape() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.CShape"]], "circle() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Circle"]], "close() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Close"]], "concavehull() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ConcaveHull"]], "convexhull() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ConvexHull"]], "crossshape() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.CrossShape"]], "cycles() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Cycles"]], "edges() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Edges"]], "einstein() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Einstein"]], "ellipse() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Ellipse"]], "ellipseall() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.EllipseAll"]], "endvertex() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.EndVertex"]], "exteriorangles() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ExteriorAngles"]], "externalboundary() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.ExternalBoundary"]], "fillet() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Fillet"]], "ishape() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.IShape"]], "interiorangles() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.InteriorAngles"]], "interpolate() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Interpolate"]], "invert() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Invert"]], "isclosed() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.IsClosed"]], "ismanifold() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.IsManifold"]], "issimilar() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.IsSimilar"]], "lshape() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.LShape"]], "length() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Length"]], "line() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Line"]], "miter() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Miter"]], "normal() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Normal"]], "orientedges() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.OrientEdges"]], "planarize() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Planarize"]], "project() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Project"]], "rectangle() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Rectangle"]], "removecollinearedges() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.RemoveCollinearEdges"]], "representation() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Representation"]], "reverse() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Reverse"]], "roof() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Roof"]], "simplify() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Simplify"]], "skeleton() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Skeleton"]], "spiral() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Spiral"]], "split() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Split"]], "square() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Square"]], "squircle() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Squircle"]], "star() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Star"]], "startendvertices() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.StartEndVertices"]], "startvertex() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.StartVertex"]], "tshape() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.TShape"]], "trapezoid() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Trapezoid"]], "vertexbydistance() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.VertexByDistance"]], "vertexbyparameter() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.VertexByParameter"]], "vertexdistance() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.VertexDistance"]], "vertices() (topologicpy.wire.wire static method)": [[34, "topologicpy.Wire.Wire.Vertices"]], "wire (class in topologicpy.wire)": [[34, "topologicpy.Wire.Wire"]], "topologicpy.wire": [[34, "module-topologicpy.Wire"]], "topologicpy.version": [[35, "module-topologicpy.version"]]}})