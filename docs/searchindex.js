Search.setIndex({"docnames": ["index", "modules", "topologicpy", "topologicpy.Aperture", "topologicpy.Cell", "topologicpy.CellComplex", "topologicpy.Cluster", "topologicpy.Color", "topologicpy.Context", "topologicpy.DGL", "topologicpy.Dictionary", "topologicpy.Edge", "topologicpy.EnergyModel", "topologicpy.Face", "topologicpy.Graph", "topologicpy.Grid", "topologicpy.Helper", "topologicpy.Honeybee", "topologicpy.Matrix", "topologicpy.Neo4j", "topologicpy.Plotly", "topologicpy.Polyskel", "topologicpy.Shell", "topologicpy.Speckle", "topologicpy.Sun", "topologicpy.Topology", "topologicpy.Vector", "topologicpy.Vertex", "topologicpy.Wire", "topologicpy.version"], "filenames": ["index.rst", "modules.rst", "topologicpy.rst", "topologicpy.Aperture.rst", "topologicpy.Cell.rst", "topologicpy.CellComplex.rst", "topologicpy.Cluster.rst", "topologicpy.Color.rst", "topologicpy.Context.rst", "topologicpy.DGL.rst", "topologicpy.Dictionary.rst", "topologicpy.Edge.rst", "topologicpy.EnergyModel.rst", "topologicpy.Face.rst", "topologicpy.Graph.rst", "topologicpy.Grid.rst", "topologicpy.Helper.rst", "topologicpy.Honeybee.rst", "topologicpy.Matrix.rst", "topologicpy.Neo4j.rst", "topologicpy.Plotly.rst", "topologicpy.Polyskel.rst", "topologicpy.Shell.rst", "topologicpy.Speckle.rst", "topologicpy.Sun.rst", "topologicpy.Topology.rst", "topologicpy.Vector.rst", "topologicpy.Vertex.rst", "topologicpy.Wire.rst", "topologicpy.version.rst"], "titles": ["topologicpy", "topologicpy", "topologicpy package", "topologicpy.Aperture module", "topologicpy.Cell module", "topologicpy.CellComplex module", "topologicpy.Cluster module", "topologicpy.Color module", "topologicpy.Context module", "topologicpy.DGL module", "topologicpy.Dictionary module", "topologicpy.Edge module", "topologicpy.EnergyModel module", "topologicpy.Face module", "topologicpy.Graph module", "topologicpy.Grid module", "topologicpy.Helper module", "topologicpy.Honeybee module", "topologicpy.Matrix module", "topologicpy.Neo4j module", "topologicpy.Plotly module", "topologicpy.Polyskel module", "topologicpy.Shell module", "topologicpy.Speckle module", "topologicpy.Sun module", "topologicpy.Topology module", "topologicpy.Vector module", "topologicpy.Vertex module", "topologicpy.Wire module", "topologicpy.version module"], "terms": {"welcom": 0, "rhyme": 0, "appl": 0, "pie": [0, 2, 20, 22], "i": [0, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28], "open": [0, 4, 13, 25, 27, 28], "sourc": [0, 2, 14, 21, 25], "python": [0, 7, 10, 14, 20, 25], "3": [0, 4, 5, 11, 12, 13, 14, 16, 20, 25, 27, 28], "implement": 0, "which": [0, 4, 5, 6, 7, 11, 12, 13, 14, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28], "power": 0, "revolution": 0, "wai": 0, "you": [0, 6, 7, 12, 14, 16, 27], "design": [0, 12], "space": [0, 12, 13, 14, 20, 25], "build": [0, 4, 12, 14], "artefact": 0, "": [0, 4, 5, 6, 11, 14, 15, 19, 22, 25, 28], "featur": [0, 14], "enabl": 0, "creat": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 25, 26, 27, 28], "hierarch": 0, "inform": [0, 14], "rich": 0, "3d": [0, 6, 13], "represent": [0, 17], "offer": 0, "unpreced": 0, "flexibl": 0, "control": 0, "your": [0, 7, 16, 21, 25], "process": [0, 12, 14, 22, 25], "With": 0, "integr": 0, "geometri": [0, 2, 13, 14, 25, 28], "topologi": [0, 1, 2, 3, 4, 6, 8, 12, 13, 14, 16, 17, 20, 23, 27, 28], "artifici": 0, "intellig": 0, "enrich": 0, "two": [0, 4, 5, 11, 13, 14, 15, 18, 25, 26, 27, 28], "main": 0, "strength": 0, "ar": [0, 4, 5, 6, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28], "its": [0, 4, 5, 10, 11, 13, 14, 21, 22, 25, 26, 27, 28], "support": [0, 25], "defeatur": 0, "encod": [0, 14], "mesh": [0, 13, 14, 23, 25], "By": 0, "simplifi": [0, 2, 6, 13, 14, 22, 28], "remov": [0, 4, 5, 10, 12, 13, 14, 22, 25, 28], "small": [0, 16], "unnecessari": 0, "detail": 0, "need": [0, 14, 26, 27], "allow": [0, 14, 25], "faster": 0, "more": [0, 13, 14, 25, 28], "accur": 0, "while": [0, 25, 27], "maintain": 0, "consist": 0, "thi": [0, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28], "transform": [0, 2, 18, 25, 26], "low": [0, 13, 25, 28], "qualiti": 0, "heavi": [0, 13, 25], "bim": [0, 25], "high": [0, 13, 25, 28], "lightweight": 0, "readi": 0, "rigor": 0, "effortlessli": 0, "same": [0, 4, 5, 6, 11, 12, 14, 16, 24, 25, 26, 27], "base": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "element": [0, 7, 13, 25, 26], "avail": [0, 13, 17, 20, 25], "commerci": [0, 12], "platform": 0, "cleanli": 0, "match": [0, 7, 14, 16, 20, 25], "exact": 0, "specif": 0, "versatil": 0, "extend": [0, 2, 11], "entiti": [0, 19], "mix": 0, "dimension": [0, 2, 25], "structur": [0, 25], "exampl": [0, 6, 13, 14, 16, 25, 27], "repres": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 22, 24, 25, 26, 28], "coher": 0, "line": [0, 2, 11, 15, 20, 21, 25, 27, 28], "can": [0, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 20, 22, 25, 27, 28], "column": [0, 12, 14, 16], "beam": 0, "surfac": [0, 4, 12, 13, 16, 24, 25, 28], "wall": [0, 12, 14], "slab": [0, 14], "volum": [0, 2, 4, 5, 16], "solid": [0, 25], "even": 0, "non": [0, 5, 13, 27], "like": [0, 6, 13, 14, 28], "load": [0, 12], "effici": 0, "attach": [0, 14], "approach": 0, "highli": 0, "compat": [0, 14], "simul": [0, 12], "graph": [0, 1, 2, 19, 20, 25], "make": [0, 6], "natur": 0, "fit": 0, "machin": 0, "learn": 0, "gml": 0, "excit": 0, "new": [0, 11, 14, 19, 25], "branch": [0, 23], "vast": 0, "amount": [0, 14], "connect": [0, 2, 4, 11, 13, 14, 19, 21, 25, 27, 28], "data": [0, 6, 14, 16, 20, 23, 25], "extract": [0, 20], "valuabl": 0, "insight": 0, "quickli": 0, "algorithm": [0, 4, 5, 6, 13, 14, 22, 25, 27, 28], "node": [0, 14, 19], "classif": 0, "take": [0, 14], "next": [0, 16, 28], "level": [0, 12, 14, 16, 25], "classifi": [0, 4], "typologi": 0, "predict": [0, 20], "associ": [0, 10, 14, 20, 25], "complet": [0, 14, 27], "miss": 0, "empow": 0, "leverag": 0, "histor": 0, "knowledg": 0, "embed": [0, 6, 10, 25], "databas": 0, "decis": 0, "about": 0, "current": [0, 16, 20, 24], "project": [0, 2, 13, 14, 20, 22, 25, 27, 28], "streamlin": 0, "workflow": 0, "enhanc": 0, "product": [0, 21, 26], "achiev": 0, "goal": 0, "greater": 0, "precis": 0, "experi": 0, "comprehens": 0, "well": [0, 14, 22, 28], "applic": [0, 6, 25], "protocol": 0, "interfac": 0, "enjoi": 0, "freedom": 0, "cut": 0, "edg": [0, 1, 2, 4, 5, 6, 13, 14, 15, 19, 20, 22, 24, 25, 27, 28], "c": [0, 13, 16, 25, 28], "manifold": [0, 5, 13, 22, 27, 28], "nmt": 0, "core": [0, 14, 25], "technologi": 0, "cascad": 0, "bind": 0, "interact": 0, "easili": 0, "accomplish": 0, "through": [0, 4, 5, 22, 27, 28], "command": 0, "script": [0, 20], "visual": [0, 20], "flow": [0, 14], "program": [0, 17], "vdfp": 0, "plugin": 0, "popular": 0, "cloud": 0, "streamlit": 0, "variou": 0, "perform": [0, 25], "task": 0, "seamlessli": 0, "custom": 0, "emb": 0, "own": 0, "hous": 0, "plu": [0, 6, 12], "includ": [0, 4, 6, 7, 12, 13, 14, 16, 20, 22, 24, 25, 27, 28], "sever": [0, 13, 25], "industri": 0, "standard": [0, 6, 13], "method": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "transport": 0, "ifc": [0, 14, 25], "obj": [0, 25], "brep": [0, 14, 20, 25], "hbjson": 0, "csv": [0, 14], "serial": [0, 14], "servic": 0, "speckl": [0, 1, 2], "philosophi": 0, "licens": 0, "agplv3": 0, "vision": 0, "minim": [0, 14], "increment": 0, "cost": [0, 14], "ensur": [0, 16, 27], "return": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "invest": 0, "outright": 0, "noth": 0, "ever": 0, "trap": 0, "expens": 0, "subscript": 0, "share": [0, 14, 25, 27], "app": 0, "eas": 0, "give": 0, "choos": [0, 16], "between": [0, 11, 13, 14, 22, 25, 26, 27, 28], "local": [0, 14], "option": [0, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28], "peac": 0, "mind": 0, "focu": 0, "what": [0, 25], "matter": 0, "most": [0, 7, 12, 14, 20, 25], "join": [0, 2, 14, 25], "revolut": 0, "try": 0, "todai": 0, "see": [0, 3, 4, 5, 6, 7, 8, 13, 14, 20, 22, 24, 25, 27, 28], "differ": [0, 2, 22, 25, 28], "yourself": 0, "pip": 0, "upgrad": 0, "depend": [0, 4, 13, 22, 28], "follow": [0, 4, 5, 12, 13, 14, 16, 25, 26, 28], "automat": [0, 13, 14, 25], "from": [0, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 25, 26, 27, 28], "expand": 0, "view": [0, 13, 14], "numpi": [0, 20, 25], "http": [0, 4, 5, 6, 7, 11, 13, 14, 20, 22, 24, 25, 27, 28], "org": [0, 4, 5, 6, 7, 13, 14, 22, 24, 25, 27, 28], "1": [0, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28], "24": [0, 4], "0": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28], "scipi": 0, "10": [0, 4, 5, 13, 14, 20, 22, 24, 25, 27, 28], "plotli": [0, 1, 2, 7, 14, 25], "com": [0, 4, 7, 11, 13, 14, 20, 22, 24, 25, 28], "5": [0, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 20, 22, 24, 25, 27, 28], "11": [0, 5], "ifcopenshel": 0, "7": [0, 4, 5, 13, 25, 27, 28], "9": [0, 5, 13, 25], "ipfshttpclient": 0, "pypi": 0, "web3": 0, "web3pi": 0, "readthedoc": [0, 14], "io": [0, 14], "en": [0, 4, 5, 6, 7, 13, 14, 22, 24, 25, 27, 28], "stabl": 0, "30": [0, 17, 24], "openstudio": [0, 12], "net": [0, 14, 25], "4": [0, 4, 5, 6, 13, 14, 16, 25, 27, 28], "topologic_cor": [0, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 19, 20, 22, 24, 25, 27, 28], "6": [0, 4, 5, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28], "lbt": 0, "ladybug": 0, "25": [0, 4, 12, 14, 15, 17, 20, 22, 25], "161": 0, "honeybe": [0, 1, 2], "12": [0, 5, 25], "energi": [0, 12], "91": [0, 14, 25], "49": 0, "json": [0, 14, 20, 25], "doc": [0, 7, 13, 25], "html": [0, 13, 14, 25], "2": [0, 4, 5, 6, 11, 13, 14, 16, 20, 21, 22, 25, 27, 28], "py2neo": 0, "2021": 0, "pyvisgraph": [0, 2, 14], "github": [0, 4, 11, 13, 14, 22, 28], "taipanrex": 0, "specklepi": 0, "specklesystem": 0, "panda": [0, 20], "pydata": 0, "8": [0, 4, 5, 12, 13, 14, 24, 25, 27, 28], "dgl": [0, 1, 2, 14, 20], "dmlc": 0, "favourit": 0, "editor": 0, "jupyt": [0, 14, 20], "notebook": [0, 14, 20, 25], "recommend": 0, "type": [0, 2, 4, 6, 7, 8, 10, 12, 14, 17, 19, 20, 23, 25, 26, 27, 28], "import": [0, 20, 25], "found": [0, 4, 6, 10, 11, 12, 13, 14, 17, 20, 22, 25, 27, 28], "If": [0, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 28], "wish": [0, 6, 12, 14, 16], "actual": [0, 6, 13, 14, 20], "jabi": 0, "w": [0, 8, 12, 25], "2024": 0, "doi": 0, "5281": 0, "zenodo": 0, "11555172": 0, "To": [0, 16, 19], "one": [0, 3, 6, 11, 13, 14, 15, 16, 22, 25, 27, 28], "paper": 0, "defin": [0, 8, 11, 13, 14, 22, 25, 26, 28], "chatzivasileiadi": 0, "A": [0, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 20, 22, 24, 25, 26, 27, 28], "explor": 0, "reason": 0, "semant": 0, "In": [0, 20, 26], "eloi": 0, "d": [0, 13, 16], "leit": 0, "viana": 0, "f": 0, "morai": 0, "j": [0, 14, 25], "vieira": 0, "vaz": 0, "ed": 0, "formal": 0, "pp": 0, "277": 0, "285": 0, "springer": 0, "intern": [0, 4, 5, 13, 14, 22, 27], "publish": 0, "1007": 0, "978": 0, "030": 0, "57509": 0, "0_25": 0, "Or": 0, "bib": 0, "format": [0, 7, 14, 20, 25], "refer": [0, 4], "manag": [0, 14, 25], "misc": 0, "jabi2024": 0, "author": [0, 25], "wassim": 0, "11555173": 0, "titl": [0, 20, 25], "url": [0, 19, 23], "year": [0, 24], "inbook": 0, "jabi2021": 0, "abstract": 0, "conceptu": 0, "framework": 0, "concept": 0, "architect": 0, "reflect": 0, "befor": [0, 4, 19, 25], "complex": 0, "set": [0, 2, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 28], "we": 0, "summar": 0, "below": [0, 14, 25, 26], "relat": 0, "work": [0, 4, 12, 13, 14, 16, 22, 25, 28], "late": 0, "1980": 0, "describ": [0, 25], "class": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "discuss": 0, "also": [0, 4, 13, 14, 25, 28], "report": [0, 12], "usabl": 0, "workshop": 0, "wa": [0, 4, 13, 14, 20, 22, 25, 28], "conduct": [0, 16, 25], "valid": [0, 12, 14], "evalu": [0, 6], "methodologi": 0, "collect": 0, "qualit": 0, "illustr": 0, "fundament": 0, "shift": 0, "pursu": 0, "fidel": 0, "form": [0, 4, 6, 21, 22, 25, 27], "intent": 0, "aikaterini": 0, "citi": 0, "cham": 0, "sara": 0, "david": 0, "franklim": 0, "jorg": 0, "isbn": 0, "journal": 0, "page": [0, 14], "link": 0, "cardiff": 0, "univers": 0, "ucl": 0, "packag": [0, 1], "index": [0, 2, 11, 14, 16, 20, 25, 27], "modul": [0, 1], "search": [0, 14, 20, 25, 27, 28], "submodul": 1, "apertur": [1, 2, 4, 5, 8, 12, 14, 25], "cell": [1, 2, 5, 6, 12, 13, 22, 25, 27], "cellcomplex": [1, 2, 6, 12, 25, 27], "cluster": [1, 2, 4, 5, 11, 13, 14, 15, 22, 25, 27, 28], "color": [1, 2, 12, 14, 20, 25], "context": [1, 2, 3, 14, 25], "dictionari": [1, 2, 4, 5, 6, 12, 13, 14, 15, 17, 19, 20, 22, 24, 25, 26, 27, 28], "energymodel": [1, 2], "face": [1, 2, 4, 5, 6, 11, 12, 14, 15, 20, 22, 24, 25, 27, 28], "graphqueueitem": [1, 2, 14], "mergingprocess": [1, 2, 14, 25], "workerprocess": [1, 2, 14, 25], "workerprocesspool": [1, 2, 14, 25], "grid": [1, 2, 20, 22, 28], "helper": [1, 2], "matrix": [1, 2, 14, 20, 25, 26, 27], "neo4j": [1, 2], "polyskel": [1, 2, 4, 13, 22, 28], "debug": [1, 2, 21], "line2": [1, 2, 21], "linesegment2": [1, 2, 21], "point2": [1, 2, 21], "ray2": [1, 2, 21], "subtre": [1, 2, 21], "set_debug": [1, 2, 21], "skeleton": [1, 2, 4, 13, 21, 22, 28], "shell": [1, 2, 4, 5, 6, 13, 24, 25, 27], "sun": [1, 2], "queueitem": [1, 2, 25], "sinkitem": [1, 2, 25], "vector": [1, 2, 4, 5, 6, 11, 13, 14, 20, 22, 24, 25, 27, 28], "vertex": [1, 2, 4, 5, 6, 11, 13, 14, 15, 19, 20, 22, 24, 25, 26, 28], "wire": [1, 2, 4, 5, 6, 13, 14, 22, 24, 25, 27], "version": [1, 2, 13, 14, 16, 22, 25, 28], "content": [1, 8, 14, 25], "bytopologycontext": [2, 3], "area": [2, 4, 13, 16, 25, 28], "box": [2, 4, 5, 11, 25, 28], "byfac": [2, 4, 5, 22], "byoffset": [2, 4, 13, 28], "byshel": [2, 4, 13], "bythickenedfac": [2, 4], "bythickenedshel": [2, 4], "bywir": [2, 4, 5, 13, 22], "bywiresclust": [2, 4, 5, 13, 22], "capsul": [2, 4], "compact": [2, 4, 13, 14], "cone": [2, 4], "containmentstatu": [2, 4], "cylind": [2, 4], "decompos": [2, 4, 5], "dodecahedron": [2, 4], "egg": [2, 4], "externalboundari": [2, 4, 5, 11, 13, 22, 25, 27, 28], "hyperboloid": [2, 4], "icosahedron": [2, 4], "internalboundari": [2, 4, 13, 22], "internalvertex": [2, 4, 13, 25], "isonboundari": [2, 4, 22], "octahedron": [2, 4, 5], "pipe": [2, 4], "prism": [2, 4, 5], "removecollinearedg": [2, 4, 5, 13, 22, 25, 28], "roof": [2, 4, 22, 28], "sphere": [2, 4, 5], "surfacearea": [2, 4], "tetrahedron": [2, 4], "toru": [2, 4], "vertic": [2, 4, 5, 6, 11, 12, 13, 14, 15, 20, 21, 22, 24, 25, 26, 27, 28], "bycel": [2, 5], "bycellsclust": [2, 5], "byfacesclust": [2, 5, 22], "delaunai": [2, 5, 13, 22, 25], "externalfac": [2, 5], "internalfac": [2, 5], "nonmanifoldfac": [2, 5], "voronoi": [2, 5, 22], "byformula": [2, 6], "bytopologi": [2, 6, 12, 14], "dbscan": [2, 6], "freecel": [2, 6], "freeedg": [2, 6], "freefac": [2, 6], "freeshel": [2, 6], "freetopologi": [2, 6, 27], "freevertic": [2, 6], "freewir": [2, 6], "highesttyp": [2, 6, 25], "k_mean": [2, 6, 16], "mergecel": [2, 6], "mysticros": [2, 6], "bycssnamedcolor": [2, 7], "byhex": [2, 7], "byvalueinrang": [2, 7, 14], "cssnamedcolor": [2, 7], "plotlycolor": [2, 7], "rgbtohex": [2, 7], "bytopologyparamet": [2, 8], "bykeyvalu": [2, 10], "bykeysvalu": [2, 10], "bymergeddictionari": [2, 10], "bypythondictionari": [2, 10], "kei": [2, 4, 5, 6, 10, 12, 13, 14, 15, 19, 20, 23, 24, 25, 26, 27, 28], "listattributevalu": [2, 10], "pythondictionari": [2, 10], "removekei": [2, 10], "setvalueatkei": [2, 10], "valueatkei": [2, 10], "valu": [2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 27, 28], "angl": [2, 4, 5, 11, 12, 13, 18, 22, 24, 25, 26, 28], "bisect": [2, 11, 26], "byfacenorm": [2, 11], "byoffset2d": [2, 11], "bystartvertexendvertex": [2, 11], "byvertic": [2, 11, 13, 26, 28], "byverticesclust": [2, 11, 13, 28], "direct": [2, 4, 5, 6, 11, 12, 13, 14, 22, 24, 25, 26, 27, 28], "endvertex": [2, 11, 28], "extendtoedg": [2, 11], "iscollinear": [2, 11, 26], "iscoplanar": [2, 11, 13], "isparallel": [2, 11, 26], "length": [2, 4, 5, 11, 12, 13, 14, 15, 16, 19, 20, 22, 24, 25, 26, 27, 28], "normal": [2, 4, 11, 13, 14, 16, 21, 26, 27, 28], "normalasedg": [2, 11], "parameteratvertex": [2, 11], "revers": [2, 4, 11, 13, 14, 16, 26, 28], "setlength": [2, 11], "startvertex": [2, 11, 28], "trim": [2, 11, 13, 16], "trimbyedg": [2, 11], "vertexbydist": [2, 11, 28], "vertexbyparamet": [2, 11, 13, 28], "byosmpath": [2, 12], "columnnam": [2, 12], "defaultconstructionset": [2, 12], "defaultscheduleset": [2, 12], "exporttogbxml": [2, 12], "exporttoosm": [2, 12], "gbxmlstring": [2, 12], "queri": [2, 12, 13, 25, 28], "reportnam": [2, 12], "rownam": [2, 12], "run": [2, 12, 14, 20, 23, 25], "spacecolor": [2, 12], "spacedictionari": [2, 12], "spacetypenam": [2, 12], "spacetyp": [2, 12, 14], "sqlfile": [2, 12], "tablenam": [2, 12], "unit": [2, 5, 12, 20, 25], "addinternalboundari": [2, 13], "addinternalboundariesclust": [2, 13], "boundingrectangl": [2, 13, 28], "byedg": [2, 13, 28], "byedgesclust": [2, 13, 28], "bythickenedwir": [2, 13, 22], "circl": [2, 4, 6, 13, 14, 22, 24, 28], "compassangl": [2, 13, 26], "einstein": [2, 13, 28], "ellips": [2, 13, 28], "exteriorangl": [2, 13, 28], "facingtoward": [2, 13], "fillet": [2, 13, 28], "harmon": [2, 13], "interiorangl": [2, 13, 28], "invert": [2, 13, 28], "isovist": [2, 13], "medialaxi": [2, 13], "normaledg": [2, 13], "northarrow": [2, 13], "planar": [2, 4, 13, 22, 25, 28], "planeequ": [2, 13, 27], "rectangl": [2, 13, 21, 22, 28], "rectanglebyplaneequ": [2, 13], "squar": [2, 13, 28], "squircl": [2, 13, 28], "star": [2, 13, 28], "trapezoid": [2, 13, 28], "triangul": [2, 4, 5, 13, 22, 25], "trimbywir": [2, 13], "vertexparamet": [2, 13], "addedg": [2, 14], "addvertex": [2, 14], "addvertic": [2, 14], "adjacencydictionari": [2, 14], "adjacencylist": [2, 14], "adjacencymatrix": [2, 14], "adjacentvertic": [2, 14], "allpath": [2, 14], "averageclusteringcoeffici": [2, 14], "botgraph": [2, 14], "botstr": [2, 14], "betweenesscentr": [2, 14], "byadjacencymatrix": [2, 14], "byadjacencymatrixcsvpath": [2, 14], "bybotgraph": [2, 14], "bybotpath": [2, 14], "bycsvpath": [2, 14], "bydgcnnfil": [2, 14], "bydgcnnpath": [2, 14], "bydgcnnstr": [2, 14], "byifcfil": [2, 14, 25], "byifcpath": [2, 14, 25], "bymeshdata": [2, 14], "byverticesedg": [2, 14], "chromaticnumb": [2, 14], "closenesscentr": [2, 14], "containsedg": [2, 14], "containsvertex": [2, 14], "contractedg": [2, 14], "degreesequ": [2, 14], "densiti": [2, 6, 13, 14], "depthmap": [2, 14], "diamet": [2, 14], "distanc": [2, 4, 11, 13, 14, 15, 18, 21, 22, 25, 27, 28], "exporttoadjacencymatrixcsv": [2, 14], "exporttobot": [2, 14], "exporttocsv": [2, 14], "exporttogexf": [2, 14], "exporttojson": [2, 14, 25], "flatten": [2, 14, 16, 25], "globalclusteringcoeffici": [2, 14], "guid": [2, 14, 25], "incomingedg": [2, 14, 27], "incomingvertic": [2, 14], "isbipartit": [2, 14], "iscomplet": [2, 14], "iserdoesgallai": [2, 14], "isolatedvertic": [2, 14], "jsondata": [2, 14], "jsonstr": [2, 14, 25], "localclusteringcoeffici": [2, 14], "longestpath": [2, 14], "maximumdelta": [2, 14], "maximumflow": [2, 14], "meshdata": [2, 14], "minimumdelta": [2, 14], "minimumspanningtre": [2, 14], "navigationgraph": [2, 14], "nearestvertex": [2, 14, 27], "networkxgraph": [2, 14], "order": [2, 4, 14, 16, 18, 20, 21, 25, 26, 27], "outgoingedg": [2, 14, 27], "outgoingvertic": [2, 14], "pagerank": [2, 14], "path": [2, 12, 14, 17, 20, 24, 25, 28], "removeedg": [2, 14, 25], "removevertex": [2, 14], "setdictionari": [2, 14, 25], "shortestpath": [2, 14], "show": [2, 14, 20, 21, 25], "size": [2, 13, 14, 20, 25, 28], "topologicaldist": [2, 14], "tree": [2, 14], "vertexdegre": [2, 14], "visibilitygraph": [2, 14], "wait_messag": [2, 14, 25], "startprocess": [2, 14, 25], "stopprocess": [2, 14, 25], "edgesbydist": [2, 15], "edgesbyparamet": [2, 15], "verticesbydist": [2, 15], "verticesbyparamet": [2, 15], "closestmatch": [2, 16], "iter": [2, 6, 14, 16, 26], "makeuniqu": [2, 16], "mergebythreshold": [2, 16], "posit": [2, 4, 5, 12, 13, 16, 24, 25, 26, 28], "repeat": [2, 16, 28], "sort": [2, 14, 16, 25, 27], "transpos": [2, 16, 18, 25], "constructionsetbyidentifi": [2, 17], "constructionset": [2, 17], "exporttohbjson": [2, 17], "modelbytopologi": [2, 17], "programtypebyidentifi": [2, 17], "programtyp": [2, 17], "string": [2, 6, 7, 10, 12, 13, 14, 16, 17, 18, 20, 25, 26, 27, 28], "add": [2, 13, 14, 18, 19, 20, 25, 26], "byrot": [2, 18], "byscal": [2, 18], "bytransl": [2, 18], "multipli": [2, 18, 26], "subtract": [2, 18, 26], "addgraph": [2, 19], "byparamet": [2, 19], "deleteal": [2, 19], "exporttograph": [2, 19], "nodelabel": [2, 19], "nodetovertex": [2, 19], "nodesbycyph": [2, 19], "nodesbysubgraph": [2, 19], "relationshiptyp": [2, 19], "setgraph": [2, 19], "subgraphbycyph": [2, 19], "subgraphexporttograph": [2, 19], "addcolorbar": [2, 20], "colorscal": [2, 7, 14, 20, 25], "databydgl": [2, 20], "databygraph": [2, 20], "databytopologi": [2, 20], "exporttoimag": [2, 20], "figurebyconfusionmatrix": [2, 20], "figurebydata": [2, 20], "figurebydatafram": [2, 20], "figurebyjsonfil": [2, 20], "figurebyjsonpath": [2, 20], "figurebymatrix": [2, 20], "figurebypiechart": [2, 20], "figurebytopologi": [2, 20], "figureexporttojson": [2, 20], "figureexporttopdf": [2, 20], "figureexporttopng": [2, 20], "figureexporttosvg": [2, 20], "render": [2, 14, 20, 25], "setcamera": [2, 20], "intersect": [2, 4, 21, 25, 28], "cross": [2, 21, 24, 26], "dot": [2, 21, 26], "height": [2, 4, 5, 12, 14, 20, 21, 25, 28], "sink": [2, 14, 21, 25], "bydisjointfac": [2, 22], "hyperbolicparaboloidcirculardomain": [2, 22], "hyperbolicparaboloidrectangulardomain": [2, 22], "isclos": [2, 22, 28], "selfmerg": [2, 22, 25], "branchesbystream": [2, 23], "clientbyurl": [2, 23], "commitbyid": [2, 23], "commitsbybranch": [2, 23], "object": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], "send": [2, 23], "specklebranchbyid": [2, 23], "specklecommitbyurl": [2, 23], "specklecommitdelet": [2, 23], "speckleglobalsbystream": [2, 23], "specklesendobject": [2, 23], "specklestreambyid": [2, 23], "specklestreambyurl": [2, 23], "streamsbycli": [2, 23], "mesh_to_speckl": [2, 23], "mesh_to_speckle_mesh": [2, 23], "altitud": [2, 24, 26], "autumnequinox": [2, 24], "azimuth": [2, 24, 26], "diagram": [2, 24], "pathbyd": [2, 24], "pathbyhour": [2, 24], "springequinox": [2, 24], "summersolstic": [2, 24], "sunris": [2, 24], "sunset": [2, 24], "verticesbyd": [2, 24], "verticesbyhour": [2, 24], "wintersolstic": [2, 24], "id": [2, 14, 17, 25], "sinkkei": [2, 25], "sinkvalu": [2, 25], "sink_str": [2, 25], "addapertur": [2, 25], "addcont": [2, 25], "adddictionari": [2, 25], "adjacenttopologi": [2, 25], "analyz": [2, 25], "aperturetopologi": [2, 25], "brepstr": [2, 25], "boolean": [2, 16, 25], "boundingbox": [2, 25], "bybimfil": [2, 25], "bybimpath": [2, 25], "bybimstr": [2, 25], "bybrepfil": [2, 25], "bybreppath": [2, 25], "bybrepstr": [2, 25], "bydxffil": [2, 25], "bydxfpath": [2, 25], "bygeometri": [2, 25], "byjsonfil": [2, 25], "byjsonpath": [2, 25], "byjsonstr": [2, 25], "byobjfil": [2, 25], "byobjpath": [2, 25], "byobjstr": [2, 25], "byocctshap": [2, 25], "byxyzfil": [2, 25], "byxyzpath": [2, 25], "centerofmass": [2, 25], "centroid": [2, 6, 11, 14, 22, 25, 27, 28], "cleanup": [2, 25], "clusterfac": [2, 25], "clusterfaces_orig": [2, 25], "convexhul": [2, 25, 28], "copi": [2, 25], "degre": [2, 4, 5, 11, 12, 13, 14, 18, 22, 25, 26, 27, 28], "divid": [2, 24, 25], "explod": [2, 25], "exporttobim": [2, 25], "exporttobrep": [2, 25], "exporttodxf": [2, 25], "exporttoobj": [2, 25], "filter": [2, 14, 25], "fix": [2, 25], "impos": [2, 25], "imprint": [2, 25], "isinst": [2, 25], "isplanar": [2, 25], "issam": [2, 25, 26], "merg": [2, 5, 6, 10, 13, 14, 16, 22, 25], "mergeal": [2, 25], "nonplanarfac": [2, 25], "objstr": [2, 25], "occtshap": [2, 25], "openedg": [2, 25], "openfac": [2, 25], "openvertic": [2, 25], "orient": [2, 4, 25, 28], "place": [2, 4, 5, 6, 11, 13, 22, 25, 28], "removecont": [2, 25], "removecoplanarfac": [2, 25], "removefac": [2, 25], "removefacesbyselector": [2, 25], "removevertic": [2, 25], "replacevertic": [2, 25], "rotat": [2, 11, 13, 18, 25, 28], "rotatebyeulerangl": [2, 25], "rotatebyquaternion": [2, 25], "scale": [2, 7, 14, 18, 20, 25], "selectsubtopologi": [2, 25], "setsnapshot": [2, 25, 28], "sharededg": [2, 25], "sharedfac": [2, 25], "sharedtopologi": [2, 25], "sharedvertic": [2, 25], "sharedwir": [2, 25], "slice": [2, 25], "snapshot": [2, 25, 28], "sortbyselector": [2, 25], "spin": [2, 25], "subtopologi": [2, 6, 14, 25, 27], "supertopologi": [2, 25, 27], "symdif": [2, 25], "symmetricdiffer": [2, 25], "taper": [2, 25], "transferdictionari": [2, 6, 22, 25], "transferdictionariesbyselector": [2, 25], "translat": [2, 18, 25], "translatebydirectiondist": [2, 25], "twist": [2, 4, 25], "typeasstr": [2, 25], "typeid": [2, 25], "uuid": [2, 25], "unflatten": [2, 25], "union": [2, 25], "xor": [2, 25], "averag": [2, 14, 16, 26, 27], "azimuthaltitud": [2, 26], "byazimuthaltitud": [2, 26], "bycoordin": [2, 26, 27], "coordin": [2, 13, 14, 25, 26, 27], "down": [2, 26], "east": [2, 13, 26], "isantiparallel": [2, 26], "magnitud": [2, 26], "north": [2, 12, 13, 24, 26], "northeast": [2, 26], "northwest": [2, 26], "setmagnitud": [2, 26], "south": [2, 26], "southeast": [2, 26], "southwest": [2, 26], "sum": [2, 26], "transformationmatrix": [2, 26], "up": [2, 4, 5, 6, 13, 14, 20, 22, 25, 26, 28], "west": [2, 26], "xaxi": [2, 14, 20, 25, 26], "yaxi": [2, 13, 14, 20, 25, 26], "zaxi": [2, 14, 20, 25, 26], "arecollinear": [2, 27], "areipsilater": [2, 27], "areipsilateralclust": [2, 27], "areonsamesid": [2, 27], "areonsamesideclust": [2, 27], "clockwise2d": [2, 27], "counterclockwise2d": [2, 27], "enclosingcel": [2, 27], "fuse": [2, 27], "interpolatevalu": [2, 27], "iscoincid": [2, 27], "isextern": [2, 27], "isintern": [2, 27], "isperipher": [2, 27], "origin": [2, 4, 5, 6, 11, 13, 15, 22, 24, 25, 26, 27, 28], "perpendiculardist": [2, 27], "point": [2, 6, 13, 21, 24, 25, 26, 27, 28], "x": [2, 6, 11, 13, 14, 18, 20, 21, 22, 24, 25, 26, 27, 28], "y": [2, 6, 12, 13, 14, 18, 20, 21, 22, 24, 25, 26, 27, 28], "z": [2, 4, 5, 6, 12, 13, 14, 16, 18, 20, 22, 24, 25, 26, 27, 28], "arc": [2, 13, 22, 28], "close": [2, 4, 7, 13, 14, 22, 25, 27, 28], "cycl": [2, 28], "ellipseal": [2, 28], "interpol": [2, 13, 27, 28], "ismanifold": [2, 28], "issimilar": [2, 28], "miter": [2, 28], "orientedg": [2, 28], "spiral": [2, 28], "split": [2, 28], "startendvertic": [2, 28], "vertexdist": [2, 28], "static": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28], "an": [3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 24, 25, 26, 27, 28], "input": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28], "belong": [3, 14, 20, 25, 27], "paramet": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28], "The": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28], "mantissa": [4, 5, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28], "int": [4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28], "desir": [4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28], "default": [4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28], "float": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28], "none": [4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28], "width": [4, 5, 13, 14, 20, 22, 25, 28], "usid": [4, 5, 22, 24], "vside": [4, 5, 22, 24], "wside": [4, 5], "list": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28], "placement": [4, 5, 6, 11, 13, 22, 28], "str": [4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 17, 19, 20, 22, 25, 27, 28], "center": [4, 5, 6, 11, 13, 14, 20, 22, 24, 25, 28], "toler": [4, 5, 6, 11, 12, 13, 14, 15, 19, 20, 22, 24, 25, 26, 27, 28], "0001": [4, 5, 6, 11, 12, 13, 14, 15, 16, 19, 20, 22, 24, 25, 26, 27, 28], "locat": [4, 5, 6, 8, 11, 13, 14, 17, 20, 22, 24, 25, 28], "result": [4, 5, 6, 11, 13, 14, 18, 20, 22, 25, 26, 28], "being": [4, 5, 6, 11, 13, 14, 22, 25, 28], "number": [4, 5, 6, 7, 11, 13, 14, 16, 20, 21, 22, 24, 25, 27, 28], "side": [4, 5, 6, 13, 20, 22, 24, 25, 27, 28], "along": [4, 5, 8, 11, 13, 14, 18, 22, 24, 25, 26, 28], "bottom": [4, 5, 13, 14, 20, 22, 25, 28], "lowerleft": [4, 5, 6, 13, 22, 28], "It": [4, 5, 6, 11, 13, 14, 20, 22, 24, 25, 27, 28], "case": [4, 5, 6, 11, 13, 14, 18, 20, 22, 25, 26, 27, 28], "insensit": [4, 5, 6, 11, 13, 14, 18, 20, 22, 25, 26, 27, 28], "bool": [4, 5, 6, 7, 11, 12, 13, 14, 15, 17, 19, 20, 22, 24, 25, 26, 27, 28], "fals": [4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 20, 22, 24, 25, 26, 27, 28], "silent": [4, 5, 11, 13, 14, 22, 25, 27, 28], "true": [4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 28], "otherwis": [4, 6, 11, 12, 13, 14, 17, 20, 22, 24, 25, 26, 27, 28], "thei": [4, 6, 11, 13, 14, 16, 20, 22, 25, 26, 27, 28], "error": [4, 11, 12, 13, 14, 22, 27, 28], "warn": [4, 11, 13, 14, 22, 25, 27, 28], "messag": [4, 11, 13, 14, 22, 23, 25, 27, 28], "print": [4, 11, 12, 13, 14, 22, 27, 28], "offset": [4, 11, 13, 15, 22, 28], "mai": [4, 14, 20, 25], "fail": 4, "self": [4, 25, 27], "alwai": [4, 13], "check": 4, "must": [4, 5, 6, 11, 13, 14, 20, 22, 25, 27, 28], "succe": 4, "thick": [4, 14, 20, 25], "bothsid": [4, 11], "thicken": [4, 13, 22], "loft": [4, 5, 22], "each": [4, 6, 11, 12, 13, 14, 16, 20, 24, 25, 27, 28], "opposit": 4, "last": [4, 11, 13, 16, 25, 26, 28], "first": [4, 11, 13, 14, 16, 18, 25, 26, 27, 28], "rais": 4, "except": 4, "do": [4, 12, 14, 21], "have": [4, 5, 12, 14, 15, 16, 25, 27, 28], "radiu": [4, 5, 6, 13, 22, 24, 28], "16": [4, 6, 13, 25, 28], "vsidesend": 4, "vsidesmiddl": 4, "shape": [4, 13, 15, 22, 24, 25, 28], "hemispher": 4, "end": [4, 6, 11, 12, 13, 14, 22, 24, 25, 26, 27, 28], "segment": [4, 11, 22, 28], "middl": [4, 28], "measur": [4, 5, 13, 14, 26], "known": 4, "spheric": 4, "wikipedia": [4, 5, 6, 13, 14, 22, 24, 25, 27, 28], "wiki": [4, 5, 6, 13, 14, 22, 24, 25, 27, 28], "compar": 4, "cube": [4, 5], "baseradiu": 4, "topradiu": 4, "dirz": 4, "top": [4, 5, 13, 14, 20, 25, 28], "contain": [4, 5, 6, 7, 13, 14, 15, 16, 20, 25, 26, 27, 28], "statu": [4, 14, 25], "relationship": [4, 14, 19], "insid": [4, 13, 22, 25, 27], "boundari": [4, 5, 11, 13, 14, 22, 25, 27, 28], "outsid": 4, "tiltangl": [4, 5], "dict": [4, 5, 10, 12, 13, 14, 17, 24, 25, 26], "logic": [4, 5, 25], "compon": [4, 5, 13, 25, 26], "assum": [4, 5, 6, 7, 13, 14, 16, 22, 25, 26, 27, 28], "threshold": [4, 5, 16, 22], "tilt": [4, 5], "determin": [4, 5, 13, 14, 16, 28], "horizont": [4, 5, 12, 13, 24, 26], "nearest": [4, 5, 13, 14, 27, 28], "cardin": [4, 5], "verticalfac": 4, "tophorizontalfac": [4, 5], "bottomhorizontalfac": [4, 5], "inclinedfac": 4, "inclin": [4, 5], "verticalapertur": 4, "tophorizontalapertur": [4, 5], "bottomhorizontalapertur": [4, 5], "inclinedapertur": 4, "circumscrib": [4, 5], "longitud": [4, 24], "latitud": [4, 24], "extern": [4, 5, 11, 13, 22, 25, 27, 28], "60": [4, 13, 24], "guarante": [4, 13, 25], "profil": 4, "startoffset": 4, "endoffset": 4, "endcapa": 4, "endcapb": 4, "centerlin": 4, "xy": [4, 11, 13, 15, 26, 27], "plane": [4, 11, 13, 15, 22, 26, 27, 28], "us": [4, 5, 6, 7, 11, 12, 13, 14, 16, 19, 20, 22, 24, 25, 27, 28], "start": [4, 6, 11, 13, 14, 22, 24, 25, 26, 27, 28], "cap": 4, "invers": [4, 13, 28], "endcap": 4, "been": [4, 14, 16, 27, 28], "specifi": [4, 6, 7, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28], "ha": [4, 11, 12, 13, 14, 16, 22, 25, 26, 27, 28], "angtoler": [4, 5, 11, 13, 22, 25, 28], "ani": [4, 5, 6, 11, 12, 13, 14, 16, 17, 18, 20, 22, 25, 26, 27, 28], "collinear": [4, 5, 11, 13, 22, 25, 26, 28], "angular": [4, 5, 11, 13, 22, 25, 28], "without": [4, 5, 13, 22, 28], "45": [4, 22, 25, 28], "epsilon": [4, 6, 22, 25], "01": [4, 22, 25, 27], "001": [4, 13, 14, 22, 25, 28], "hip": [4, 22, 28], "straight": [4, 11, 13, 21, 22, 26, 27, 28], "contribut": [4, 11, 13, 22, 28], "\u9ad8\u7199\u9e4f": [4, 13, 22, 28], "xipeng": [4, 13, 22, 28], "gao": [4, 13, 22, 28], "gaoxipeng1998": [4, 13, 22, 28], "gmail": [4, 13, 22, 28], "code": [4, 11, 13, 14, 20, 22, 25, 28], "librari": [4, 13, 22, 25, 28], "botffi": [4, 13, 22, 28], "anoth": [4, 21, 22, 25, 27], "larger": [4, 13, 22, 25, 28], "better": [4, 13, 22, 25, 28], "supercel": 4, "enclosur": 4, "within": [4, 5, 6, 13, 14, 16, 22, 25, 27, 28], "super": [4, 25, 27], "inputcel": 4, "majorradiu": 4, "minorradiu": 4, "125": 4, "major": [4, 13, 28], "minor": [4, 13, 28], "manitssa": [4, 5], "should": [5, 6, 12, 14, 16, 20, 21, 25], "minimum": [5, 6, 7, 14, 20, 25, 28], "all": [5, 7, 13, 14, 16, 19, 25, 26, 28], "externalverticalfac": 5, "internalverticalfac": 5, "internalhorizontalfac": 5, "externalinclinedfac": 5, "internalinclinedfac": 5, "externalverticalapertur": 5, "internalverticalapertur": 5, "13": 5, "internalhorizontalapertur": 5, "14": 5, "externalinclinedapertur": 5, "15": [5, 20, 24, 25], "internalinclinedapertur": 5, "delaunay_triangul": [5, 22], "both": [5, 6, 14], "around": [5, 6, 11, 13, 18, 25, 28], "prismat": 5, "partit": [5, 22], "voronoi_diagram": [5, 22], "bound": [5, 13, 22, 25, 28], "ax": [5, 14, 20, 25], "align": [5, 13, 25, 26, 28], "formula": 6, "xrang": 6, "yrang": 6, "xstring": 6, "ystring": 6, "rang": [6, 10, 13, 14, 16, 25], "For": [6, 7, 13, 14, 16, 20, 25], "2d": [6, 13, 14, 28], "e": [6, 7, 14, 16, 20, 25, 26, 27, 28], "either": [6, 14], "uppercas": 6, "independ": 6, "variabl": [6, 14], "math": 6, "function": 6, "sin": 6, "co": [6, 25], "tan": 6, "sqrt": 6, "etc": 6, "ab": [6, 13, 28], "tupl": [6, 7, 14, 21, 25], "step": 6, "g": [6, 7, 14, 20, 25], "attempt": [6, 12, 13, 14, 20, 25, 28], "cannot": [6, 14], "unspecifi": 6, "time": [6, 13, 14, 24, 25], "One": 6, "other": [6, 11, 13, 14, 16, 21, 25, 27], "arg": [6, 11, 21, 27], "topolog": [6, 11, 13, 14, 19, 24, 25, 26, 27, 28], "individu": [6, 27], "argument": 6, "store": [6, 14, 25, 27], "transfer": [6, 14, 22, 25], "selector": [6, 25], "minsampl": 6, "spatial": 6, "nois": 6, "pleas": [6, 13, 14, 21], "provid": [6, 14, 25], "correspond": [6, 10], "expect": 6, "ad": [6, 10, 13, 14, 19, 20, 22, 25, 26], "dimens": 6, "numer": [6, 14, 16, 20, 25], "sure": 6, "maximum": [6, 7, 14, 20, 22, 25, 27, 28], "consid": [6, 11, 13, 14, 22, 26, 27, 28], "part": [6, 13, 22, 28], "sens": 6, "region": 6, "requir": 6, "dens": 6, "free": [6, 25, 27], "higher": [6, 13, 28], "highest": [6, 12, 14, 16, 21, 25], "k": [6, 10, 14, 16, 25], "maxiter": [6, 14, 16], "100": [6, 13, 14, 16, 20, 25, 28], "centroidkei": 6, "k_centroid": 6, "mean": [6, 7, 13, 14, 19, 25, 28], "means_clust": 6, "under": [6, 14, 19, 22, 25], "confus": [6, 20], "geometr": [6, 14], "where": [6, 13, 14, 21, 22, 25, 26, 27, 28], "them": 6, "addit": [6, 18, 20], "possibl": [6, 14, 18], "perimet": 6, "mystic": 6, "rose": 6, "ignor": [6, 13, 14, 25, 27], "output": [6, 12, 13, 14, 17, 19, 20, 25, 26, 27, 28], "descript": [6, 10, 13, 22, 23, 28], "onli": [6, 13, 14, 16, 24, 25, 26, 27, 28], "simplif": 6, "alpha": [7, 14, 25], "css": [7, 14, 20, 25], "name": [7, 12, 13, 14, 19, 20, 25, 28], "develop": 7, "mozilla": 7, "u": [7, 8, 11, 13, 15, 28], "web": 7, "THe": [7, 25], "transpar": [7, 20, 25], "express": [7, 11, 14], "r": [7, 25], "b": [7, 13, 16, 22, 25, 28], "hex": [7, 14, 20, 25], "convert": [7, 14, 19], "hexadecim": [7, 14], "rgb": [7, 14, 20, 25], "rrggbb": 7, "fulli": 7, "opaqu": [7, 20, 25], "minvalu": [7, 20], "maxvalu": [7, 20], "viridi": [7, 14, 20, 25], "red": [7, 12, 20, 25], "green": [7, 12, 20, 25], "blue": [7, 12, 20, 25], "usealpha": 7, "fourth": 7, "plasma": [7, 14, 20, 25], "full": [7, 14, 20, 25, 28], "builtin": [7, 14, 20, 25], "three": [7, 11, 12, 20], "integ": [7, 10, 13, 14, 24, 25, 28], "v": [8, 10, 13, 15, 21, 27], "rel": 8, "parameter": 8, "axi": [8, 11, 12, 13, 14, 18, 20, 21, 22, 24, 25, 26, 28], "byobjectcontext": 8, "staticmethod": [10, 12], "def": [10, 12], "bydgldata": 10, "item": [10, 11, 12, 16, 23, 25], "vlist": 10, "append": [10, 14, 16], "tolist": 10, "len": 10, "equival": 10, "listattribut": 10, "attribut": [10, 14, 21, 25], "pair": 10, "edgea": 11, "edgeb": 11, "bracket": 11, "second": [11, 13, 14, 18, 25, 26, 27, 28], "180": [11, 13, 24, 26], "than": [11, 13, 14, 22, 25, 27, 28], "decid": 11, "chosen": [11, 14, 22, 28], "intend": 11, "vertexa": [11, 14, 27, 28], "vertexb": [11, 14, 27], "half": 11, "meet": [11, 25, 28], "strict": [11, 27], "strictli": [11, 27], "ident": [11, 14, 25, 27], "comparison": [11, 27], "comput": [11, 13, 14, 21, 24, 25, 26, 27, 28], "gaoxipeng": [11, 13, 22, 28], "coplanar": [11, 13, 22, 25, 28], "parallel": [11, 14, 25, 26, 28], "test": [11, 14, 20, 28], "perpendicular": [11, 13, 26, 27, 28], "midpoint": 11, "useendvertex": 11, "symmetr": 11, "preserv": [11, 27], "byosmfil": 12, "file": [12, 14, 17, 20, 25], "osm": 12, "openstudiomodelcor": 12, "model": [12, 17], "osmodel": 12, "read": [12, 14, 24, 25], "isnul": 12, "null": 12, "els": [12, 20], "get": [12, 19], "shadingsurfac": 12, "osmodelpath": 12, "weatherfilepath": 12, "designdayfilepath": 12, "floorlevel": [12, 14], "buildingnam": [12, 17], "topologicbuild": 12, "buildingtyp": 12, "northaxi": 12, "glazingratio": 12, "coolingtemp": 12, "heatingtemp": 12, "20": [12, 14, 17, 20, 25], "defaultspacetyp": 12, "189": 12, "2009": 12, "offic": [12, 17], "wholebuild": 12, "lg": 12, "cz4": 12, "spacenamekei": 12, "topologic_nam": [12, 17], "spacetypekei": 12, "topologic_typ": [12, 17], "shade": 12, "templat": 12, "asset": 12, "osmtempl": 12, "officebuild": 12, "weather": 12, "epw": 12, "gbr_london": 12, "gatwick": 12, "037760_iwec": 12, "dai": [12, 24], "ddy": 12, "floor": [12, 14], "lowest": [12, 14, 16], "find": [12, 14, 19, 25, 27], "appli": [12, 13, 18, 25, 28], "assign": [12, 14, 25], "counter": [12, 13, 21, 26], "clockwis": [12, 13, 21, 25, 26, 27, 28], "glaze": 12, "ratio": [12, 14, 25], "window": [12, 14, 25], "exterior": [12, 13, 14, 22, 28], "temperatur": 12, "cool": 12, "system": 12, "activ": 12, "heat": 12, "given": [12, 13, 21, 25, 28], "tabl": 12, "construct": [12, 17], "schedul": 12, "overwrit": [12, 14, 17, 20, 25], "export": [12, 14, 17, 19, 20, 25], "gbxml": 12, "save": [12, 14], "over": [12, 14], "written": [12, 14], "successfulli": [12, 14], "hvacsizingsummari": 12, "reportforstr": 12, "entir": 12, "facil": 12, "zone": 12, "sensibl": 12, "calcul": [12, 13, 14, 25, 26], "row": [12, 16], "osbinarypath": 12, "outputfold": 12, "removefil": 12, "binari": 12, "folder": [12, 14], "sql": 12, "shadingfac": 12, "hole": [13, 14, 21, 22], "facea": 13, "faceb": 13, "optim": [13, 25, 28], "zrot": [13, 25, 28], "becom": [13, 25, 28], "so": [13, 16, 21, 25, 27, 28], "reduc": [13, 25, 28], "smaller": 13, "offseta": [13, 22, 28], "offsetb": [13, 22, 28], "interior": [13, 22, 28], "empti": [13, 19, 25], "internalboundariesclust": 13, "fromangl": [13, 22, 28], "toangl": [13, 22, 28], "360": [13, 22, 25, 28], "upperleft": [13, 28], "lowerright": [13, 28], "upperright": [13, 28], "compactness_measure_of_a_shap": [13, 22], "compass": [13, 24, 26], "fashion": [13, 26, 27, 28], "aperiod": [13, 28], "monotil": [13, 28], "call": [13, 14, 27, 28], "tile": [13, 28], "german": [13, 28], "famou": [13, 28], "physicist": [13, 28], "arxiv": [13, 28], "2303": [13, 28], "10798": [13, 28], "hexagon": [13, 28], "inputmod": [13, 28], "focallength": [13, 28], "866025": [13, 28], "eccentr": [13, 28], "majoraxislength": [13, 28], "minoraxislength": [13, 28], "32": [13, 22, 28], "focal": [13, 28], "left": [13, 14, 16, 20, 22, 25, 28], "includeinternalboundari": 13, "nest": [13, 14, 16, 25, 26], "270": [13, 26], "300": 13, "simpl": [13, 25], "note": [13, 14, 21], "those": [13, 14], "thu": [13, 14], "asvertex": 13, "toward": [13, 24, 26], "treat": [13, 14], "radiuskei": [13, 28], "round": [13, 28], "corner": [13, 22, 28], "fillet_": [13, 28], "mechan": [13, 28], "90": [13, 25, 26], "mirror": [13, 28], "obstacl": [13, 14], "fov": 13, "viewpoint": [13, 14], "observ": 13, "convent": [13, 26], "field": [13, 14, 21, 25], "field_of_view": 13, "accept": [13, 25], "resolut": 13, "externalvertic": 13, "internalvertic": 13, "toleavesonli": 13, "approxim": 13, "medial": 13, "medial_axi": 13, "solut": 13, "sampl": [13, 20], "leaf": 13, "outputtyp": [13, 26, 27, 28], "xyz": [13, 18, 23, 25, 26, 27, 28], "subset": [13, 14, 25, 28], "permut": [13, 18, 25, 26, 27, 28], "northangl": 13, "arrow": 13, "neg": [13, 25, 26], "mass": [13, 25], "unto": [13, 22, 27, 28], "centroidof": 13, "coeffici": [13, 14], "equat": [13, 22, 25, 27], "receiv": [13, 14, 25, 27, 28], "dougla": [13, 22, 28], "peucker": [13, 22, 28], "algorthim": [13, 28], "ramer": [13, 22, 28], "e2": [13, 14, 22, 28], "80": [13, 14, 22, 28], "93dougla": [13, 22, 28], "93peucker_algorithm": [13, 22, 28], "wassimj": [13, 14, 22, 28], "issu": [13, 22, 28], "35": [13, 22, 28], "shorter": [13, 16, 22, 28], "usual": [13, 25], "121": [13, 28], "hybrid": [13, 28], "factor": [13, 14, 18, 25, 28], "affect": [13, 14, 28], "radiusa": [13, 22, 28], "radiusb": [13, 22, 28], "rai": [13, 21, 28], "outer": [13, 22, 28], "widtha": [13, 28], "widthb": [13, 28], "75": [13, 15, 28], "mode": [13, 14, 25], "meshsiz": [13, 25], "classic": [13, 25], "meshadapt": [13, 25], "initi": [13, 25, 28], "frontal": [13, 25], "bamg": [13, 25], "fontal": [13, 25], "quad": [13, 14, 25], "pack": [13, 25], "parallelogram": [13, 25], "gmsh": [13, 25], "info": [13, 25], "texinfo": [13, 25], "veri": [13, 25], "consum": [13, 25], "when": [13, 14, 18, 25], "overal": [13, 25], "triangl": 13, "effect": 13, "uv": 13, "transfervertexdictionari": 14, "transferedgedictionari": 14, "vertexlabelkei": [14, 20, 25], "label": [14, 19, 20, 25], "edgekei": 14, "adjac": [14, 25], "accord": [14, 16, 25], "doe": [14, 25], "exist": [14, 17, 20, 21, 25], "weight": 14, "vertexkei": 14, "adjacency_list": 14, "edgekeyfwd": 14, "edgekeybwd": 14, "bidirkei": 14, "bidirect": [14, 19], "useedgeindex": 14, "useedgelength": 14, "adjacency_matrix": 14, "forward": 14, "instead": [14, 22], "overrid": 14, "backward": 14, "suppos": 14, "bidrect": 14, "bidirekei": 14, "timelimit": 14, "limit": [14, 20, 25], "clustering_coeffici": 14, "includeattribut": 14, "includelabel": 14, "includegeometri": 14, "sitelabel": 14, "site_0001": 14, "sitedictionari": 14, "buildinglabel": 14, "building_0001": 14, "buildingdictionari": 14, "storeyprefix": 14, "storei": 14, "typekei": [14, 25], "verticeskei": 14, "edgeskei": 14, "edgelabelkei": [14, 20, 25], "sourcekei": 14, "targetkei": 14, "target": [14, 20, 25], "xkei": 14, "hasx": 14, "ykei": 14, "hasi": 14, "zkei": 14, "hasz": 14, "geometrykei": 14, "walltyp": 14, "slabtyp": 14, "doortyp": 14, "door": 14, "windowtyp": 14, "contenttyp": 14, "namespac": [14, 25], "resourc": [14, 25], "rdf": 14, "bot": 14, "ontologi": 14, "w3c": 14, "lbd": 14, "cg": 14, "wherev": 14, "out": [14, 16, 25], "site": 14, "prefix": 14, "vertex_xxxx": 14, "xxxx": 14, "sequenti": 14, "uniqu": [14, 16], "forc": [14, 16], "edge_xxxx": 14, "look": [14, 19], "rdflib": 14, "turtl": 14, "thde": 14, "ttl": 14, "turtle2": 14, "just": 14, "linebreak": 14, "xml": 14, "pretti": 14, "ld": 14, "There": 14, "further": 14, "syntax": 14, "variant": [14, 25], "ntripl": 14, "nt": 14, "nt11": 14, "n": [14, 16, 27, 28], "tripl": 14, "exactli": [14, 27], "utf8": 14, "n3": 14, "notat": 14, "superset": 14, "cater": 14, "rule": 14, "few": 14, "thing": 14, "trig": 14, "multipl": [14, 18, 25], "trix": 14, "nquad": 14, "destin": 14, "betwe": 14, "central": 14, "betweenness_centr": 14, "xmin": 14, "ymin": 14, "zmin": 14, "xmax": 14, "ymax": 14, "zmax": 14, "schema": 14, "includecontext": 14, "graphidhead": 14, "graph_id": 14, "graphlabelhead": 14, "graphfeatureshead": 14, "feat": 14, "graphfeatureskei": 14, "edgesrchead": 14, "src_id": 14, "edgedsthead": 14, "dst_id": 14, "edgelabelhead": 14, "edgetrainmaskhead": 14, "train_mask": 14, "edgevalidatemaskhead": 14, "val_mask": 14, "edgetestmaskhead": 14, "test_mask": 14, "edgefeatureshead": 14, "edgefeatureskei": 14, "nodeidhead": 14, "node_id": 14, "nodelabelhead": 14, "nodetrainmaskhead": 14, "nodevalidatemaskhead": 14, "nodetestmaskhead": 14, "nodefeatureshead": 14, "nodexhead": 14, "nodeyhead": 14, "nodezhead": 14, "nodefeatureskei": 14, "yaml": 14, "header": 14, "train": [14, 20], "mask": 14, "dgcnn": 14, "includetyp": [14, 25], "excludetyp": [14, 25], "includerel": 14, "excluderel": 14, "partial": 14, "bruno": 14, "postl": 14, "exclud": [14, 25], "vertexdictionari": 14, "edgedictionari": 14, "indic": [14, 16, 25], "signifi": 14, "directapertur": 14, "viasharedtopologi": 14, "viasharedapertur": 14, "toexteriortopologi": 14, "toexteriorapertur": 14, "tocont": 14, "tooutpost": 14, "idkei": 14, "topologic_id": 14, "outpostskei": 14, "outpost": 14, "useinternalvertex": 14, "storebrep": 14, "graph_": 14, "discrete_mathemat": 14, "directli": 14, "singl": [14, 22, 25, 27], "via": 14, "maxcolor": 14, "chromat": 14, "graph_color": 14, "against": [14, 20, 25], "closeness_centr": 14, "oldkei": 14, "newkei": 14, "rather": 14, "pre": [14, 20, 25], "write": 14, "verticesa": [14, 25], "verticesb": [14, 25], "ther": [14, 25], "contract": 14, "replac": [14, 25, 27], "edge_contract": 14, "topollog": 14, "sequenc": 14, "mathworld": 14, "wolfram": 14, "dense_graph": 14, "depth": [14, 25], "map": [14, 28], "total": [14, 24, 25], "everi": 14, "graphdiamet": 14, "shortest": [14, 16], "distance_": 14, "graph_theori": [14, 27], "restrict": [14, 25], "overwritten": 14, "graphlabel": 14, "graphfeatur": 14, "defaultedgelabel": 14, "edgemaskkei": 14, "edgetrainratio": 14, "edgevalidateratio": 14, "edgetestratio": 14, "nodelabelkei": 14, "defaultnodelabel": 14, "nodemaskkei": 14, "nodetrainratio": 14, "nodevalidateratio": 14, "nodetestratio": 14, "categor": 14, "contin": 14, "separ": [14, 25], "comma": [14, 25], "456": 14, "011": 14, "56": 14, "defauli": 14, "dicitonari": 14, "categori": [14, 19, 20], "foud": 14, "graphwidth": 14, "graphlength": 14, "graphheight": 14, "defaultvertexcolor": 14, "black": [14, 20, 25], "defaultvertexs": 14, "vertexcolorkei": 14, "vertexsizekei": 14, "defaultedgecolor": 14, "defaultedgeweight": 14, "defaultedgetyp": 14, "undirect": 14, "edgecolorkei": 14, "edgeweightkei": 14, "exchang": 14, "gexf": 14, "displai": [14, 20, 25], "indent": 14, "sortkei": 14, "won": [14, 17, 20, 25], "t": [14, 17, 20, 25], "ouptut": [14, 20, 25], "oper": [14, 17, 20, 25], "success": [14, 17, 20, 25], "unsucces": [14, 25], "layout": 14, "spring": [14, 24], "seed": 14, "50": [14, 20, 25, 28], "rootvertex": 14, "fruchterman": 14, "reingold": 14, "distribut": 14, "radial": 14, "tillford": 14, "constant": [14, 22], "attract": 14, "repuls": 14, "random": 14, "solv": 14, "root": 14, "global": 14, "incom": [14, 27], "coincid": [14, 27], "unidrect": 14, "bipartit": 14, "bipartite_graph": 14, "complete_graph": 14, "satisfi": 14, "erd\u0151": 14, "gallai": 14, "theorem": 14, "erd": 14, "c5": 14, "93gallai_theorem": 14, "isol": 14, "costkei": 14, "longest": 14, "maxim": 14, "longest_path": 14, "delta": 14, "residualkei": 14, "residu": 14, "maximum_flow_problem": 14, "capac": 14, "whole": 14, "span": 14, "minimum_spanning_tre": 14, "numwork": [14, 25], "navig": 14, "clip": [14, 15, 22], "veritc": 14, "worker": [14, 25], "twice": [14, 25], "cpu": [14, 25], "networkx": 14, "outgo": [14, 27], "85": 14, "score": 14, "damp": 14, "dampen": 14, "rank": [14, 20, 25], "900": 14, "backgroundcolor": [14, 20, 25], "white": [14, 25], "fontcolor": 14, "vertexs": [14, 20, 25], "vertexcolor": [14, 20, 25], "vertexgroupkei": [14, 20, 25], "vertexgroup": [14, 20, 25], "minvertexgroup": 14, "maxvertexgroup": 14, "edgeweight": 14, "showneighbour": 14, "selectmenu": 14, "filtermenu": 14, "pyvi": 14, "figur": [14, 20, 24, 25], "pixel": [14, 20, 25], "background": [14, 20, 25], "font": 14, "bug": 14, "deriv": 14, "neighbor": 14, "hi": 14, "group": [14, 20, 25], "help": 14, "showneighbor": 14, "shown": [14, 20, 25], "hover": 14, "select": [14, 24, 25], "menu": 14, "inlin": 14, "browser": [14, 20], "tab": [14, 25], "consider": 14, "whatev": 14, "minimis": 14, "pathlimit": 14, "showvertic": [14, 20, 25], "showvertexlegend": [14, 20, 25], "edgecolor": [14, 20, 25], "edgewidth": [14, 20, 25], "edgegroupkei": [14, 20, 25], "edgegroup": [14, 20, 25], "showedg": [14, 20, 25], "showedgelegend": [14, 20, 25], "950": [14, 20, 25], "500": [14, 20, 25], "axiss": [14, 20, 25], "rgba": [14, 20, 25], "marginleft": [14, 20, 25], "marginright": [14, 20, 25], "margintop": [14, 20, 25], "marginbottom": [14, 20, 25], "camera": [14, 20, 25], "perspect": [14, 20, 25], "ff0000": [14, 20, 25], "255": [14, 20, 25], "hsl": [14, 20, 25], "hsla": [14, 20, 25], "hsv": [14, 20, 25], "hsva": [14, 20, 25], "drawn": [14, 20, 25], "legend": [14, 20, 25], "discov": [14, 20, 25], "suitabl": [14, 20, 25], "margin": [14, 20, 25], "right": [14, 16, 20, 22, 25], "orthograph": [14, 20, 25], "degree_": [14, 27], "aggreg": 14, "retriev": [14, 25, 27], "viewpointsa": 14, "viewpointsb": 14, "visibl": 14, "alia": [14, 21, 25], "message_queu": [14, 25], "authkei": [14, 25], "daemon": [14, 25], "whether": [14, 25], "exitcod": [14, 25], "exit": [14, 25], "yet": [14, 25], "stop": [14, 25], "identifi": [14, 15, 17, 20, 25], "pid": [14, 25], "sentinel": [14, 25], "descriptor": [14, 25], "unix": [14, 25], "handl": [14, 25], "wait": [14, 25], "termin": [14, 25], "start_index": 14, "sub": [14, 25, 27], "overridden": [14, 25], "num_work": [14, 25], "uorigin": 15, "vorigin": 15, "urang": 15, "vrang": 15, "paratm": 15, "dir": 15, "lista": 16, "closest": [16, 27], "made": [16, 24, 25], "best": 16, "sublist": 16, "member": 16, "fill": 16, "extra": 16, "m": 16, "o": 16, "p": [16, 21], "yield": 16, "duplic": [16, 27], "ascend": 16, "would": 16, "insert": 16, "otherlist": 16, "reverseflag": 16, "subsequ": 16, "lastli": 16, "larg": 16, "particular": 16, "swap": 16, "softwar": [16, 26], "built": 17, "hbconstructionset": 17, "hb": 17, "hbmodel": 17, "tpbuild": 17, "tpshadingfacesclust": 17, "generic_build": 17, "defaultprogramidentifi": 17, "gener": [17, 25], "defaultconstructionsetidentifi": 17, "coolingsetpoint": 17, "heatingsetpoint": 17, "humidifyingsetpoint": 17, "dehumidifyingsetpoint": 17, "55": 17, "roomnamekei": 17, "roomtypekei": 17, "aperturetypekei": 17, "addsensorgrid": 17, "identifii": 17, "hbprogram": 17, "mata": 18, "matb": 18, "matric": 18, "anglex": 18, "anglei": 18, "anglez": 18, "4x4": [18, 25], "roatat": 18, "scalex": 18, "scalei": 18, "scalez": 18, "translatex": 18, "translatei": 18, "translatez": 18, "neo4jgraph": 19, "labelkei": 19, "relationshipkei": 19, "categorykei": 19, "usernam": 19, "password": 19, "server": 19, "log": 19, "delet": [19, 25], "newo4j": 19, "cypher": 19, "subgraph": 19, "topologicgraphvertex": 19, "bi": 19, "drection": 19, "previou": 19, "ntick": 20, "xposit": 20, "outlinewidth": 20, "subtitl": [20, 25], "bar": [20, 25], "graph_obj": 20, "_figur": 20, "tick": [20, 25], "outlin": [20, 25], "blind": 20, "friendli": 20, "These": [20, 24], "protanopia": 20, "deuteranopia": 20, "tritanopia": 20, "colorblind": 20, "respect": [20, 25], "frame": [20, 25], "datafram": 20, "pd": 20, "vertexmingroup": [20, 25], "vertexmaxgroup": [20, 25], "vertexlegendlabel": [20, 25], "vertexlegendrank": [20, 25], "vertexlegendgroup": [20, 25], "edgemingroup": [20, 25], "edgemaxgroup": [20, 25], "edgelegendlabel": [20, 25], "edgelegendrank": [20, 25], "edgelegendgroup": [20, 25], "showfac": [20, 25], "faceopac": [20, 25], "facecolor": [20, 25], "fafafa": [20, 25], "facelabelkei": [20, 25], "facegroupkei": [20, 25], "facegroup": [20, 25], "facemingroup": [20, 25], "facemaxgroup": [20, 25], "showfacelegend": [20, 25], "facelegendlabel": [20, 25], "facelegendrank": [20, 25], "facelegendgroup": [20, 25], "intensitykei": [20, 25], "intens": [20, 25, 27], "isn": [20, 25], "opac": [20, 25], "bhave": [20, 25], "mingroup": [20, 25], "maxgroup": [20, 25], "idenitfi": [20, 25], "png": 20, "1920": 20, "1080": 20, "imag": [20, 21], "jpg": 20, "jpeg": 20, "pdf": 20, "svg": 20, "webp": 20, "sucessfulli": 20, "xtitl": 20, "ytitl": 20, "showscal": [20, 25], "colorsampl": 20, "40": 20, "arrai": [20, 25], "minmum": 20, "discret": 20, "untitl": 20, "xspace": 20, "yspace": 20, "usemark": 20, "charttyp": 20, "gridcolor": 20, "lightgrai": 20, "df": 20, "data_label": 20, "chart": 20, "epoch": 20, "accuraci": 20, "loss": 20, "marker": 20, "scatter": 20, "xcategori": 20, "ycategori": 20, "grai": 20, "digit": 20, "cbvalu": [20, 25], "cbtick": [20, 25], "cbx": [20, 25], "cbwidth": [20, 25], "cboutlinewidth": [20, 25], "cbtitl": [20, 25], "cbsubtitl": [20, 25], "cbunit": [20, 25], "colorbar": [20, 25], "1200": 20, "environ": 20, "vscode": 20, "studio": 20, "colab": 20, "googl": 20, "ifram": 20, "jupyterlab": 20, "anyth": 20, "updat": 20, "kwarg": [21, 27], "p1": 21, "p2": 21, "polygon": 21, "contour": [21, 28], "goe": 21, "downward": 21, "far": 21, "concern": 21, "accordingli": 21, "maximumgap": 22, "mergejunct": 22, "disjoint": 22, "still": 22, "experiment": [22, 25], "resembl": 22, "ribbon": 22, "touch": 22, "gap": 22, "junction": 22, "diagon": 22, "resolv": 22, "transit": 22, "subdivid": 22, "aid": 22, "36": [22, 24, 28], "ring": [22, 24], "hyperbol": 22, "paraboloid": 22, "circular": 22, "domain": 22, "parabolid": 22, "concentr": 22, "llvertex": 22, "lrvertex": 22, "ulvertex": 22, "urvertex": 22, "rectangular": 22, "lower": 22, "upper": 22, "On": 22, "inner": 22, "optioal": [22, 28], "simplifyboundari": 22, "optimis": 22, "client": 23, "stream": 23, "token": 23, "commit_list": 23, "commit_id": 23, "commit": 23, "branch_list": 23, "branch_id": 23, "confirm": 23, "stream_list": 23, "stream_id": 23, "date": [24, 25], "datetim": 24, "autumn": 24, "equinox": 24, "september_equinox": 24, "summer": 24, "solstic": 24, "minuteinterv": 24, "dayinterv": 24, "hyperfinearchitectur": 24, "how": [24, 26], "interv": 24, "minut": 24, "hourli": 24, "world": [24, 25], "orbit": 24, "othwerwis": [24, 25], "incldu": 24, "date_path": 24, "winter": 24, "hourly_path": 24, "hour": 24, "ground": 24, "starttim": 24, "endtim": 24, "equal": [24, 25, 28], "startdai": 24, "enddai": 24, "365": 24, "vernal": 24, "march_equinox": 24, "summer_solstic": 24, "winter_solstic": 24, "so_dict": 25, "exclus": [25, 27], "subtopologytyp": 25, "seem": 25, "subtpologi": 25, "hosttopologi": [25, 27], "topologytyp": [25, 27], "host": [25, 27], "analysi": 25, "topologya": 25, "topologyb": 25, "trandict": 25, "execut": 25, "operand": 25, "boolean_oper": 25, "xrot": 25, "yrot": 25, "substr": [25, 26, 27], "sensit": 25, "guidkei": 25, "colorkei": 25, "defaultcolor": 25, "defaulttyp": 25, "authorkei": 25, "datekei": 25, "dotbimpi": 25, "dotbim": 25, "creation": 25, "dd": 25, "mm": 25, "yyyi": 25, "carri": 25, "dxf": 25, "capabl": 25, "lengthunit": 25, "meter": 25, "outputmod": 25, "l": 25, "uuid4": 25, "topologic_": 25, "topology_typ": 25, "record": 25, "progressbar": 25, "tqdm": 25, "progress": 25, "transposeax": 25, "wevefront": 25, "materi": 25, "wavefront": 25, "occt": 25, "dev": 25, "opencascad": 25, "overview": 25, "occt_user_guides__modeling_data": 25, "topods_shap": 25, "inoput": 25, "frameidkei": 25, "vertexidkei": 25, "conform": 25, "sepat": 25, "No": [25, 28], "word": 25, "charact": 25, "text": 25, "vertex_label": 25, "67": 25, "61": 25, "47": 25, "93": 25, "22": 25, "center_of_mass": 25, "clean": 25, "memori": 25, "consumpt": 25, "WITH": 25, "care": 25, "convex": [25, 28], "hull": [25, 28], "deep": 25, "slow": 25, "immedi": [25, 27], "addnestingdepth": 25, "tool": 25, "divis": 25, "typefilt": 25, "view_draw": 25, "explos": 25, "occt_brep_format": 25, "autocad_dxf": 25, "r2010": 25, "searchtyp": 25, "did": 25, "criteria": 25, "ptional": 25, "instanc": 25, "nonplanar": 25, "border": 25, "dira": 25, "dirb": 25, "origina": 25, "originb": 25, "old": 25, "movement": 25, "contentlist": 25, "rebuild": 25, "roll": 25, "pitch": 25, "yaw": 25, "euler": 25, "aircraft_principal_ax": 25, "quaternion": 25, "timestamp": 25, "screen": 25, "unsort": 25, "solid_of_revolut": 25, "spun": 25, "request": 25, "ratiorang": 25, "linear": 25, "inward": 25, "outward": 25, "traingul": 25, "move": 25, "less": 25, "tranvertic": 25, "tranedg": 25, "tranfac": 25, "trancel": 25, "caus": 25, "toplogi": 25, "topologgi": 25, "triangular": 25, "anglerang": 25, "could": [25, 26, 27], "v5": 25, "namescap": 25, "vectora": 26, "vectorb": 26, "anti": [26, 28], "abov": 26, "coodin": 26, "much": 26, "therefor": 26, "blender": 26, "least": [27, 28], "counterclockwis": 27, "includecentroid": 27, "enclos": 27, "trivial": 27, "itself": 27, "retain": 27, "nearli": 27, "closer": 27, "howev": 27, "now": 27, "modifi": 27, "hold": 27, "peripher": 27, "said": 27, "02": 27, "03": 27, "04": 27, "05": [27, 28], "06": 27, "07": 27, "08": 27, "09": 27, "usekdtre": 27, "kdtree": 27, "infinit": 27, "pass": 27, "middlevertex": 28, "chord": 28, "apex": 28, "head": 28, "tail": 28, "bisector": 28, "seam": 28, "maxvertic": 28, "circuit": 28, "foci": 28, "yidan": 28, "xue": 28, "wirea": 28, "wireb": 28, "intermedi": 28, "raster": 28, "zigzag": 28, "toolpath": 28, "continu": 28, "ttopologi": 28, "similar": 28, "offsetkei": 28, "correctli": 28, "turn": 28, "final": 28, "increas": 28, "circumfer": 28, "confer": 28}, "objects": {"": [[2, 0, 0, "-", "topologicpy"]], "topologicpy": [[3, 0, 0, "-", "Aperture"], [4, 0, 0, "-", "Cell"], [5, 0, 0, "-", "CellComplex"], [6, 0, 0, "-", "Cluster"], [7, 0, 0, "-", "Color"], [8, 0, 0, "-", "Context"], [10, 0, 0, "-", "Dictionary"], [11, 0, 0, "-", "Edge"], [12, 0, 0, "-", "EnergyModel"], [13, 0, 0, "-", "Face"], [14, 0, 0, "-", "Graph"], [15, 0, 0, "-", "Grid"], [16, 0, 0, "-", "Helper"], [17, 0, 0, "-", "Honeybee"], [18, 0, 0, "-", "Matrix"], [19, 0, 0, "-", "Neo4j"], [20, 0, 0, "-", "Plotly"], [21, 0, 0, "-", "Polyskel"], [22, 0, 0, "-", "Shell"], [23, 0, 0, "-", "Speckle"], [24, 0, 0, "-", "Sun"], [25, 0, 0, "-", "Topology"], [26, 0, 0, "-", "Vector"], [27, 0, 0, "-", "Vertex"], [28, 0, 0, "-", "Wire"], [29, 0, 0, "-", "version"]], "topologicpy.Aperture": [[3, 1, 1, "", "Aperture"]], "topologicpy.Aperture.Aperture": [[3, 2, 1, "", "ByTopologyContext"], [3, 2, 1, "", "Topology"]], "topologicpy.Cell": [[4, 1, 1, "", "Cell"]], "topologicpy.Cell.Cell": [[4, 2, 1, "", "Area"], [4, 2, 1, "", "Box"], [4, 2, 1, "", "ByFaces"], [4, 2, 1, "", "ByOffset"], [4, 2, 1, "", "ByShell"], [4, 2, 1, "", "ByThickenedFace"], [4, 2, 1, "", "ByThickenedShell"], [4, 2, 1, "", "ByWires"], [4, 2, 1, "", "ByWiresCluster"], [4, 2, 1, "", "Capsule"], [4, 2, 1, "", "Compactness"], [4, 2, 1, "", "Cone"], [4, 2, 1, "", "ContainmentStatus"], [4, 2, 1, "", "Cylinder"], [4, 2, 1, "", "Decompose"], [4, 2, 1, "", "Dodecahedron"], [4, 2, 1, "", "Edges"], [4, 2, 1, "", "Egg"], [4, 2, 1, "", "ExternalBoundary"], [4, 2, 1, "", "Faces"], [4, 2, 1, "", "Hyperboloid"], [4, 2, 1, "", "Icosahedron"], [4, 2, 1, "", "InternalBoundaries"], [4, 2, 1, "", "InternalVertex"], [4, 2, 1, "", "IsOnBoundary"], [4, 2, 1, "", "Octahedron"], [4, 2, 1, "", "Pipe"], [4, 2, 1, "", "Prism"], [4, 2, 1, "", "RemoveCollinearEdges"], [4, 2, 1, "", "Roof"], [4, 2, 1, "", "Sets"], [4, 2, 1, "", "Shells"], [4, 2, 1, "", "Sphere"], [4, 2, 1, "", "SurfaceArea"], [4, 2, 1, "", "Tetrahedron"], [4, 2, 1, "", "Torus"], [4, 2, 1, "", "Vertices"], [4, 2, 1, "", "Volume"], [4, 2, 1, "", "Wires"]], "topologicpy.CellComplex": [[5, 1, 1, "", "CellComplex"]], "topologicpy.CellComplex.CellComplex": [[5, 2, 1, "", "Box"], [5, 2, 1, "", "ByCells"], [5, 2, 1, "", "ByCellsCluster"], [5, 2, 1, "", "ByFaces"], [5, 2, 1, "", "ByFacesCluster"], [5, 2, 1, "", "ByWires"], [5, 2, 1, "", "ByWiresCluster"], [5, 2, 1, "", "Cells"], [5, 2, 1, "", "Decompose"], [5, 2, 1, "", "Delaunay"], [5, 2, 1, "", "Edges"], [5, 2, 1, "", "ExternalBoundary"], [5, 2, 1, "", "ExternalFaces"], [5, 2, 1, "", "Faces"], [5, 2, 1, "", "InternalFaces"], [5, 2, 1, "", "NonManifoldFaces"], [5, 2, 1, "", "Octahedron"], [5, 2, 1, "", "Prism"], [5, 2, 1, "", "RemoveCollinearEdges"], [5, 2, 1, "", "Shells"], [5, 2, 1, "", "Vertices"], [5, 2, 1, "", "Volume"], [5, 2, 1, "", "Voronoi"], [5, 2, 1, "", "Wires"]], "topologicpy.Cluster": [[6, 1, 1, "", "Cluster"]], "topologicpy.Cluster.Cluster": [[6, 2, 1, "", "ByFormula"], [6, 2, 1, "", "ByTopologies"], [6, 2, 1, "", "CellComplexes"], [6, 2, 1, "", "Cells"], [6, 2, 1, "", "DBSCAN"], [6, 2, 1, "", "Edges"], [6, 2, 1, "", "Faces"], [6, 2, 1, "", "FreeCells"], [6, 2, 1, "", "FreeEdges"], [6, 2, 1, "", "FreeFaces"], [6, 2, 1, "", "FreeShells"], [6, 2, 1, "", "FreeTopologies"], [6, 2, 1, "", "FreeVertices"], [6, 2, 1, "", "FreeWires"], [6, 2, 1, "", "HighestType"], [6, 2, 1, "", "K_Means"], [6, 2, 1, "", "MergeCells"], [6, 2, 1, "", "MysticRose"], [6, 2, 1, "", "Shells"], [6, 2, 1, "", "Simplify"], [6, 2, 1, "", "Vertices"], [6, 2, 1, "", "Wires"]], "topologicpy.Color": [[7, 1, 1, "", "Color"]], "topologicpy.Color.Color": [[7, 2, 1, "", "ByCSSNamedColor"], [7, 2, 1, "", "ByHEX"], [7, 2, 1, "", "ByValueInRange"], [7, 2, 1, "", "CSSNamedColor"], [7, 2, 1, "", "CSSNamedColors"], [7, 2, 1, "", "PlotlyColor"], [7, 2, 1, "", "RGBToHex"]], "topologicpy.Context": [[8, 1, 1, "", "Context"]], "topologicpy.Context.Context": [[8, 2, 1, "", "ByTopologyParameters"], [8, 2, 1, "", "Topology"]], "topologicpy.Dictionary": [[10, 1, 1, "", "Dictionary"]], "topologicpy.Dictionary.Dictionary": [[10, 2, 1, "", "ByKeyValue"], [10, 2, 1, "", "ByKeysValues"], [10, 2, 1, "", "ByMergedDictionaries"], [10, 2, 1, "", "ByPythonDictionary"], [10, 2, 1, "", "Keys"], [10, 2, 1, "", "ListAttributeValues"], [10, 2, 1, "", "PythonDictionary"], [10, 2, 1, "", "RemoveKey"], [10, 2, 1, "", "SetValueAtKey"], [10, 2, 1, "", "ValueAtKey"], [10, 2, 1, "", "Values"]], "topologicpy.Edge": [[11, 1, 1, "", "Edge"]], "topologicpy.Edge.Edge": [[11, 2, 1, "", "Angle"], [11, 2, 1, "", "Bisect"], [11, 2, 1, "", "ByFaceNormal"], [11, 2, 1, "", "ByOffset2D"], [11, 2, 1, "", "ByStartVertexEndVertex"], [11, 2, 1, "", "ByVertices"], [11, 2, 1, "", "ByVerticesCluster"], [11, 2, 1, "", "Direction"], [11, 2, 1, "", "EndVertex"], [11, 2, 1, "", "Extend"], [11, 2, 1, "", "ExtendToEdge"], [11, 2, 1, "", "ExternalBoundary"], [11, 2, 1, "", "Index"], [11, 2, 1, "", "IsCollinear"], [11, 2, 1, "", "IsCoplanar"], [11, 2, 1, "", "IsParallel"], [11, 2, 1, "", "Length"], [11, 2, 1, "", "Line"], [11, 2, 1, "", "Normal"], [11, 2, 1, "", "NormalAsEdge"], [11, 2, 1, "", "Normalize"], [11, 2, 1, "", "ParameterAtVertex"], [11, 2, 1, "", "Reverse"], [11, 2, 1, "", "SetLength"], [11, 2, 1, "", "StartVertex"], [11, 2, 1, "", "Trim"], [11, 2, 1, "", "TrimByEdge"], [11, 2, 1, "", "VertexByDistance"], [11, 2, 1, "", "VertexByParameter"], [11, 2, 1, "", "Vertices"]], "topologicpy.EnergyModel": [[12, 1, 1, "", "EnergyModel"]], "topologicpy.EnergyModel.EnergyModel": [[12, 2, 1, "", "ByOSMPath"], [12, 2, 1, "", "ByTopology"], [12, 2, 1, "", "ColumnNames"], [12, 2, 1, "", "DefaultConstructionSets"], [12, 2, 1, "", "DefaultScheduleSets"], [12, 2, 1, "", "ExportToGBXML"], [12, 2, 1, "", "ExportToOSM"], [12, 2, 1, "", "GBXMLString"], [12, 2, 1, "", "Query"], [12, 2, 1, "", "ReportNames"], [12, 2, 1, "", "RowNames"], [12, 2, 1, "", "Run"], [12, 2, 1, "", "SpaceColors"], [12, 2, 1, "", "SpaceDictionaries"], [12, 2, 1, "", "SpaceTypeNames"], [12, 2, 1, "", "SpaceTypes"], [12, 2, 1, "", "SqlFile"], [12, 2, 1, "", "TableNames"], [12, 2, 1, "", "Topologies"], [12, 2, 1, "", "Units"]], "topologicpy.Face": [[13, 1, 1, "", "Face"]], "topologicpy.Face.Face": [[13, 2, 1, "", "AddInternalBoundaries"], [13, 2, 1, "", "AddInternalBoundariesCluster"], [13, 2, 1, "", "Angle"], [13, 2, 1, "", "Area"], [13, 2, 1, "", "BoundingRectangle"], [13, 2, 1, "", "ByEdges"], [13, 2, 1, "", "ByEdgesCluster"], [13, 2, 1, "", "ByOffset"], [13, 2, 1, "", "ByShell"], [13, 2, 1, "", "ByThickenedWire"], [13, 2, 1, "", "ByVertices"], [13, 2, 1, "", "ByVerticesCluster"], [13, 2, 1, "", "ByWire"], [13, 2, 1, "", "ByWires"], [13, 2, 1, "", "ByWiresCluster"], [13, 2, 1, "", "Circle"], [13, 2, 1, "", "Compactness"], [13, 2, 1, "", "CompassAngle"], [13, 2, 1, "", "Edges"], [13, 2, 1, "", "Einstein"], [13, 2, 1, "", "Ellipse"], [13, 2, 1, "", "ExteriorAngles"], [13, 2, 1, "", "ExternalBoundary"], [13, 2, 1, "", "FacingToward"], [13, 2, 1, "", "Fillet"], [13, 2, 1, "", "Harmonize"], [13, 2, 1, "", "InteriorAngles"], [13, 2, 1, "", "InternalBoundaries"], [13, 2, 1, "", "InternalVertex"], [13, 2, 1, "", "Invert"], [13, 2, 1, "", "IsCoplanar"], [13, 2, 1, "", "Isovist"], [13, 2, 1, "", "MedialAxis"], [13, 2, 1, "", "Normal"], [13, 2, 1, "", "NormalEdge"], [13, 2, 1, "", "NorthArrow"], [13, 2, 1, "", "Planarize"], [13, 2, 1, "", "PlaneEquation"], [13, 2, 1, "", "Project"], [13, 2, 1, "", "Rectangle"], [13, 2, 1, "", "RectangleByPlaneEquation"], [13, 2, 1, "", "RemoveCollinearEdges"], [13, 2, 1, "", "Simplify"], [13, 2, 1, "", "Skeleton"], [13, 2, 1, "", "Square"], [13, 2, 1, "", "Squircle"], [13, 2, 1, "", "Star"], [13, 2, 1, "", "Trapezoid"], [13, 2, 1, "", "Triangulate"], [13, 2, 1, "", "TrimByWire"], [13, 2, 1, "", "VertexByParameters"], [13, 2, 1, "", "VertexParameters"], [13, 2, 1, "", "Vertices"], [13, 2, 1, "", "Wire"], [13, 2, 1, "", "Wires"]], "topologicpy.Graph": [[14, 1, 1, "", "Graph"], [14, 1, 1, "", "GraphQueueItem"], [14, 1, 1, "", "MergingProcess"], [14, 1, 1, "", "WorkerProcess"], [14, 1, 1, "", "WorkerProcessPool"]], "topologicpy.Graph.Graph": [[14, 2, 1, "", "AddEdge"], [14, 2, 1, "", "AddVertex"], [14, 2, 1, "", "AddVertices"], [14, 2, 1, "", "AdjacencyDictionary"], [14, 2, 1, "", "AdjacencyList"], [14, 2, 1, "", "AdjacencyMatrix"], [14, 2, 1, "", "AdjacentVertices"], [14, 2, 1, "", "AllPaths"], [14, 2, 1, "", "AverageClusteringCoefficient"], [14, 2, 1, "", "BOTGraph"], [14, 2, 1, "", "BOTString"], [14, 2, 1, "", "BetweenessCentrality"], [14, 2, 1, "", "ByAdjacencyMatrix"], [14, 2, 1, "", "ByAdjacencyMatrixCSVPath"], [14, 2, 1, "", "ByBOTGraph"], [14, 2, 1, "", "ByBOTPath"], [14, 2, 1, "", "ByCSVPath"], [14, 2, 1, "", "ByDGCNNFile"], [14, 2, 1, "", "ByDGCNNPath"], [14, 2, 1, "", "ByDGCNNString"], [14, 2, 1, "", "ByIFCFile"], [14, 2, 1, "", "ByIFCPath"], [14, 2, 1, "", "ByMeshData"], [14, 2, 1, "", "ByTopology"], [14, 2, 1, "", "ByVerticesEdges"], [14, 2, 1, "", "ChromaticNumber"], [14, 2, 1, "", "ClosenessCentrality"], [14, 2, 1, "", "Color"], [14, 2, 1, "", "Connect"], [14, 2, 1, "", "ContainsEdge"], [14, 2, 1, "", "ContainsVertex"], [14, 2, 1, "", "ContractEdge"], [14, 2, 1, "", "DegreeSequence"], [14, 2, 1, "", "Density"], [14, 2, 1, "", "DepthMap"], [14, 2, 1, "", "Diameter"], [14, 2, 1, "", "Dictionary"], [14, 2, 1, "", "Distance"], [14, 2, 1, "", "Edge"], [14, 2, 1, "", "Edges"], [14, 2, 1, "", "ExportToAdjacencyMatrixCSV"], [14, 2, 1, "", "ExportToBOT"], [14, 2, 1, "", "ExportToCSV"], [14, 2, 1, "", "ExportToGEXF"], [14, 2, 1, "", "ExportToJSON"], [14, 2, 1, "", "Flatten"], [14, 2, 1, "", "GlobalClusteringCoefficient"], [14, 2, 1, "", "Guid"], [14, 2, 1, "", "IncomingEdges"], [14, 2, 1, "", "IncomingVertices"], [14, 2, 1, "", "IsBipartite"], [14, 2, 1, "", "IsComplete"], [14, 2, 1, "", "IsErdoesGallai"], [14, 2, 1, "", "IsolatedVertices"], [14, 2, 1, "", "JSONData"], [14, 2, 1, "", "JSONString"], [14, 2, 1, "", "LocalClusteringCoefficient"], [14, 2, 1, "", "LongestPath"], [14, 2, 1, "", "MaximumDelta"], [14, 2, 1, "", "MaximumFlow"], [14, 2, 1, "", "MeshData"], [14, 2, 1, "", "MinimumDelta"], [14, 2, 1, "", "MinimumSpanningTree"], [14, 2, 1, "", "NavigationGraph"], [14, 2, 1, "", "NearestVertex"], [14, 2, 1, "", "NetworkXGraph"], [14, 2, 1, "", "Order"], [14, 2, 1, "", "OutgoingEdges"], [14, 2, 1, "", "OutgoingVertices"], [14, 2, 1, "", "PageRank"], [14, 2, 1, "", "Path"], [14, 2, 1, "", "PyvisGraph"], [14, 2, 1, "", "RemoveEdge"], [14, 2, 1, "", "RemoveVertex"], [14, 2, 1, "", "SetDictionary"], [14, 2, 1, "", "ShortestPath"], [14, 2, 1, "", "ShortestPaths"], [14, 2, 1, "", "Show"], [14, 2, 1, "", "Size"], [14, 2, 1, "", "TopologicalDistance"], [14, 2, 1, "", "Topology"], [14, 2, 1, "", "Tree"], [14, 2, 1, "", "VertexDegree"], [14, 2, 1, "", "Vertices"], [14, 2, 1, "", "VisibilityGraph"]], "topologicpy.Graph.GraphQueueItem": [[14, 3, 1, "", "edges"]], "topologicpy.Graph.MergingProcess": [[14, 2, 1, "", "wait_message"]], "topologicpy.Graph.WorkerProcess": [[14, 2, 1, "", "run"]], "topologicpy.Graph.WorkerProcessPool": [[14, 2, 1, "", "join"], [14, 2, 1, "", "startProcesses"], [14, 2, 1, "", "stopProcesses"]], "topologicpy.Grid": [[15, 1, 1, "", "Grid"]], "topologicpy.Grid.Grid": [[15, 2, 1, "", "EdgesByDistances"], [15, 2, 1, "", "EdgesByParameters"], [15, 2, 1, "", "VerticesByDistances"], [15, 2, 1, "", "VerticesByParameters"]], "topologicpy.Helper": [[16, 1, 1, "", "Helper"]], "topologicpy.Helper.Helper": [[16, 2, 1, "", "ClosestMatch"], [16, 2, 1, "", "Flatten"], [16, 2, 1, "", "Iterate"], [16, 2, 1, "", "K_Means"], [16, 2, 1, "", "MakeUnique"], [16, 2, 1, "", "MergeByThreshold"], [16, 2, 1, "", "Normalize"], [16, 2, 1, "", "Position"], [16, 2, 1, "", "Repeat"], [16, 2, 1, "", "Sort"], [16, 2, 1, "", "Transpose"], [16, 2, 1, "", "Trim"], [16, 2, 1, "", "Version"]], "topologicpy.Honeybee": [[17, 1, 1, "", "Honeybee"]], "topologicpy.Honeybee.Honeybee": [[17, 2, 1, "", "ConstructionSetByIdentifier"], [17, 2, 1, "", "ConstructionSets"], [17, 2, 1, "", "ExportToHBJSON"], [17, 2, 1, "", "ModelByTopology"], [17, 2, 1, "", "ProgramTypeByIdentifier"], [17, 2, 1, "", "ProgramTypes"], [17, 2, 1, "", "String"]], "topologicpy.Matrix": [[18, 1, 1, "", "Matrix"]], "topologicpy.Matrix.Matrix": [[18, 2, 1, "", "Add"], [18, 2, 1, "", "ByRotation"], [18, 2, 1, "", "ByScaling"], [18, 2, 1, "", "ByTranslation"], [18, 2, 1, "", "Multiply"], [18, 2, 1, "", "Subtract"], [18, 2, 1, "", "Transpose"]], "topologicpy.Neo4j": [[19, 1, 1, "", "Neo4j"]], "topologicpy.Neo4j.Neo4j": [[19, 2, 1, "", "AddGraph"], [19, 2, 1, "", "ByParameters"], [19, 2, 1, "", "DeleteAll"], [19, 2, 1, "", "ExportToGraph"], [19, 2, 1, "", "NodeLabels"], [19, 2, 1, "", "NodeToVertex"], [19, 2, 1, "", "NodesByCypher"], [19, 2, 1, "", "NodesBySubGraph"], [19, 2, 1, "", "RelationshipTypes"], [19, 2, 1, "", "SetGraph"], [19, 2, 1, "", "SubGraphByCypher"], [19, 2, 1, "", "SubGraphExportToGraph"]], "topologicpy.Plotly": [[20, 1, 1, "", "Plotly"]], "topologicpy.Plotly.Plotly": [[20, 2, 1, "", "AddColorBar"], [20, 2, 1, "", "ColorScale"], [20, 2, 1, "", "Colors"], [20, 2, 1, "", "DataByDGL"], [20, 2, 1, "", "DataByGraph"], [20, 2, 1, "", "DataByTopology"], [20, 2, 1, "", "ExportToImage"], [20, 2, 1, "", "FigureByConfusionMatrix"], [20, 2, 1, "", "FigureByData"], [20, 2, 1, "", "FigureByDataFrame"], [20, 2, 1, "", "FigureByJSONFile"], [20, 2, 1, "", "FigureByJSONPath"], [20, 2, 1, "", "FigureByMatrix"], [20, 2, 1, "", "FigureByPieChart"], [20, 2, 1, "", "FigureByTopology"], [20, 2, 1, "", "FigureExportToJSON"], [20, 2, 1, "", "FigureExportToPDF"], [20, 2, 1, "", "FigureExportToPNG"], [20, 2, 1, "", "FigureExportToSVG"], [20, 2, 1, "", "Renderer"], [20, 2, 1, "", "Renderers"], [20, 2, 1, "", "SetCamera"], [20, 2, 1, "", "Show"]], "topologicpy.Polyskel": [[21, 1, 1, "", "Debug"], [21, 1, 1, "", "Line2"], [21, 1, 1, "", "LineSegment2"], [21, 1, 1, "", "Point2"], [21, 1, 1, "", "Ray2"], [21, 1, 1, "", "Subtree"], [21, 4, 1, "", "set_debug"], [21, 4, 1, "", "skeletonize"]], "topologicpy.Polyskel.Debug": [[21, 2, 1, "", "line"], [21, 2, 1, "", "rectangle"], [21, 2, 1, "", "show"]], "topologicpy.Polyskel.Line2": [[21, 2, 1, "", "distance"], [21, 2, 1, "", "intersect"]], "topologicpy.Polyskel.LineSegment2": [[21, 2, 1, "", "intersect"]], "topologicpy.Polyskel.Point2": [[21, 2, 1, "", "cross"], [21, 2, 1, "", "distance"], [21, 2, 1, "", "dot"], [21, 2, 1, "", "normalized"]], "topologicpy.Polyskel.Ray2": [[21, 2, 1, "", "intersect"]], "topologicpy.Polyskel.Subtree": [[21, 3, 1, "", "height"], [21, 3, 1, "", "sinks"], [21, 3, 1, "", "source"]], "topologicpy.Shell": [[22, 1, 1, "", "Shell"]], "topologicpy.Shell.Shell": [[22, 2, 1, "", "ByDisjointFaces"], [22, 2, 1, "", "ByFaces"], [22, 2, 1, "", "ByFacesCluster"], [22, 2, 1, "", "ByThickenedWire"], [22, 2, 1, "", "ByWires"], [22, 2, 1, "", "ByWiresCluster"], [22, 2, 1, "", "Circle"], [22, 2, 1, "", "Delaunay"], [22, 2, 1, "", "Edges"], [22, 2, 1, "", "ExternalBoundary"], [22, 2, 1, "", "Faces"], [22, 2, 1, "", "HyperbolicParaboloidCircularDomain"], [22, 2, 1, "", "HyperbolicParaboloidRectangularDomain"], [22, 2, 1, "", "InternalBoundaries"], [22, 2, 1, "", "IsClosed"], [22, 2, 1, "", "IsOnBoundary"], [22, 2, 1, "", "Pie"], [22, 2, 1, "", "Planarize"], [22, 2, 1, "", "Rectangle"], [22, 2, 1, "", "RemoveCollinearEdges"], [22, 2, 1, "", "Roof"], [22, 2, 1, "", "SelfMerge"], [22, 2, 1, "", "Simplify"], [22, 2, 1, "", "Skeleton"], [22, 2, 1, "", "Vertices"], [22, 2, 1, "", "Voronoi"], [22, 2, 1, "", "Wires"]], "topologicpy.Speckle": [[23, 1, 1, "", "Speckle"]], "topologicpy.Speckle.Speckle": [[23, 2, 1, "", "BranchesByStream"], [23, 2, 1, "", "ClientByURL"], [23, 2, 1, "", "CommitByID"], [23, 2, 1, "", "CommitsByBranch"], [23, 2, 1, "", "Object"], [23, 2, 1, "", "Send"], [23, 2, 1, "", "SpeckleBranchByID"], [23, 2, 1, "", "SpeckleCommitByURL"], [23, 2, 1, "", "SpeckleCommitDelete"], [23, 2, 1, "", "SpeckleGlobalsByStream"], [23, 2, 1, "", "SpeckleSendObjects"], [23, 2, 1, "", "SpeckleStreamByID"], [23, 2, 1, "", "SpeckleStreamByURL"], [23, 2, 1, "", "StreamsByClient"], [23, 2, 1, "", "mesh_to_speckle"], [23, 2, 1, "", "mesh_to_speckle_mesh"]], "topologicpy.Sun": [[24, 1, 1, "", "Sun"]], "topologicpy.Sun.Sun": [[24, 2, 1, "", "Altitude"], [24, 2, 1, "", "AutumnEquinox"], [24, 2, 1, "", "Azimuth"], [24, 2, 1, "", "Diagram"], [24, 2, 1, "", "Edge"], [24, 2, 1, "", "PathByDate"], [24, 2, 1, "", "PathByHour"], [24, 2, 1, "", "Position"], [24, 2, 1, "", "SpringEquinox"], [24, 2, 1, "", "SummerSolstice"], [24, 2, 1, "", "Sunrise"], [24, 2, 1, "", "Sunset"], [24, 2, 1, "", "Vector"], [24, 2, 1, "", "Vertex"], [24, 2, 1, "", "VerticesByDate"], [24, 2, 1, "", "VerticesByHour"], [24, 2, 1, "", "WinterSolstice"]], "topologicpy.Topology": [[25, 1, 1, "", "MergingProcess"], [25, 1, 1, "", "QueueItem"], [25, 1, 1, "", "SinkItem"], [25, 1, 1, "", "Topology"], [25, 1, 1, "", "WorkerProcess"], [25, 1, 1, "", "WorkerProcessPool"]], "topologicpy.Topology.MergingProcess": [[25, 2, 1, "", "wait_message"]], "topologicpy.Topology.QueueItem": [[25, 3, 1, "", "ID"], [25, 3, 1, "", "sinkKeys"], [25, 3, 1, "", "sinkValues"]], "topologicpy.Topology.SinkItem": [[25, 3, 1, "", "ID"], [25, 3, 1, "", "sink_str"]], "topologicpy.Topology.Topology": [[25, 2, 1, "", "AddApertures"], [25, 2, 1, "", "AddContent"], [25, 2, 1, "", "AddDictionary"], [25, 2, 1, "", "AdjacentTopologies"], [25, 2, 1, "", "Analyze"], [25, 2, 1, "", "ApertureTopologies"], [25, 2, 1, "", "Apertures"], [25, 2, 1, "", "BREPString"], [25, 2, 1, "", "Boolean"], [25, 2, 1, "", "BoundingBox"], [25, 2, 1, "", "ByBIMFile"], [25, 2, 1, "", "ByBIMPath"], [25, 2, 1, "", "ByBIMString"], [25, 2, 1, "", "ByBREPFile"], [25, 2, 1, "", "ByBREPPath"], [25, 2, 1, "", "ByBREPString"], [25, 2, 1, "", "ByDXFFile"], [25, 2, 1, "", "ByDXFPath"], [25, 2, 1, "", "ByGeometry"], [25, 2, 1, "", "ByIFCFile"], [25, 2, 1, "", "ByIFCPath"], [25, 2, 1, "", "ByJSONFile"], [25, 2, 1, "", "ByJSONPath"], [25, 2, 1, "", "ByJSONString"], [25, 2, 1, "", "ByOBJFile"], [25, 2, 1, "", "ByOBJPath"], [25, 2, 1, "", "ByOBJString"], [25, 2, 1, "", "ByOCCTShape"], [25, 2, 1, "", "ByXYZFile"], [25, 2, 1, "", "ByXYZPath"], [25, 2, 1, "", "CellComplexes"], [25, 2, 1, "", "Cells"], [25, 2, 1, "", "CenterOfMass"], [25, 2, 1, "", "Centroid"], [25, 2, 1, "", "Cleanup"], [25, 2, 1, "", "ClusterFaces"], [25, 2, 1, "", "ClusterFaces_orig"], [25, 2, 1, "", "Clusters"], [25, 2, 1, "", "Contents"], [25, 2, 1, "", "Contexts"], [25, 2, 1, "", "ConvexHull"], [25, 2, 1, "", "Copy"], [25, 2, 1, "", "Degree"], [25, 2, 1, "", "Dictionary"], [25, 2, 1, "", "Difference"], [25, 2, 1, "", "Dimensionality"], [25, 2, 1, "", "Divide"], [25, 2, 1, "", "Edges"], [25, 2, 1, "", "Explode"], [25, 2, 1, "", "ExportToBIM"], [25, 2, 1, "", "ExportToBREP"], [25, 2, 1, "", "ExportToDXF"], [25, 2, 1, "", "ExportToJSON"], [25, 2, 1, "", "ExportToOBJ"], [25, 2, 1, "", "ExternalBoundary"], [25, 2, 1, "", "Faces"], [25, 2, 1, "", "Filter"], [25, 2, 1, "", "Fix"], [25, 2, 1, "", "Flatten"], [25, 2, 1, "", "Geometry"], [25, 2, 1, "", "HighestType"], [25, 2, 1, "", "Impose"], [25, 2, 1, "", "Imprint"], [25, 2, 1, "", "InternalVertex"], [25, 2, 1, "", "Intersect"], [25, 2, 1, "", "IsInstance"], [25, 2, 1, "", "IsPlanar"], [25, 2, 1, "", "IsSame"], [25, 2, 1, "", "JSONString"], [25, 2, 1, "", "Merge"], [25, 2, 1, "", "MergeAll"], [25, 2, 1, "", "NonPlanarFaces"], [25, 2, 1, "", "OBJString"], [25, 2, 1, "", "OCCTShape"], [25, 2, 1, "", "OpenEdges"], [25, 2, 1, "", "OpenFaces"], [25, 2, 1, "", "OpenVertices"], [25, 2, 1, "", "Orient"], [25, 2, 1, "", "Place"], [25, 2, 1, "", "RemoveCollinearEdges"], [25, 2, 1, "", "RemoveContent"], [25, 2, 1, "", "RemoveCoplanarFaces"], [25, 2, 1, "", "RemoveEdges"], [25, 2, 1, "", "RemoveFaces"], [25, 2, 1, "", "RemoveFacesBySelectors"], [25, 2, 1, "", "RemoveVertices"], [25, 2, 1, "", "ReplaceVertices"], [25, 2, 1, "", "Rotate"], [25, 2, 1, "", "RotateByEulerAngles"], [25, 2, 1, "", "RotateByQuaternion"], [25, 2, 1, "", "Scale"], [25, 2, 1, "", "SelectSubTopology"], [25, 2, 1, "", "SelfMerge"], [25, 2, 1, "", "SetDictionary"], [25, 2, 1, "", "SetSnapshot"], [25, 2, 1, "", "SharedEdges"], [25, 2, 1, "", "SharedFaces"], [25, 2, 1, "", "SharedTopologies"], [25, 2, 1, "", "SharedVertices"], [25, 2, 1, "", "SharedWires"], [25, 2, 1, "", "Shells"], [25, 2, 1, "", "Show"], [25, 2, 1, "", "Slice"], [25, 2, 1, "", "Snapshots"], [25, 2, 1, "", "SortBySelectors"], [25, 2, 1, "", "Spin"], [25, 2, 1, "", "SubTopologies"], [25, 2, 1, "", "SuperTopologies"], [25, 2, 1, "", "SymDif"], [25, 2, 1, "", "SymmetricDifference"], [25, 2, 1, "", "Taper"], [25, 2, 1, "", "TransferDictionaries"], [25, 2, 1, "", "TransferDictionariesBySelectors"], [25, 2, 1, "", "Transform"], [25, 2, 1, "", "Translate"], [25, 2, 1, "", "TranslateByDirectionDistance"], [25, 2, 1, "", "Triangulate"], [25, 2, 1, "", "Twist"], [25, 2, 1, "", "Type"], [25, 2, 1, "", "TypeAsString"], [25, 2, 1, "", "TypeID"], [25, 2, 1, "", "UUID"], [25, 2, 1, "", "Unflatten"], [25, 2, 1, "", "Union"], [25, 2, 1, "", "Vertices"], [25, 2, 1, "", "Wires"], [25, 2, 1, "", "XOR"]], "topologicpy.Topology.WorkerProcess": [[25, 2, 1, "", "run"]], "topologicpy.Topology.WorkerProcessPool": [[25, 2, 1, "", "join"], [25, 2, 1, "", "startProcesses"], [25, 2, 1, "", "stopProcesses"]], "topologicpy.Vector": [[26, 1, 1, "", "Vector"]], "topologicpy.Vector.Vector": [[26, 2, 1, "", "Add"], [26, 2, 1, "", "Angle"], [26, 2, 1, "", "Average"], [26, 2, 1, "", "AzimuthAltitude"], [26, 2, 1, "", "Bisect"], [26, 2, 1, "", "ByAzimuthAltitude"], [26, 2, 1, "", "ByCoordinates"], [26, 2, 1, "", "ByVertices"], [26, 2, 1, "", "CompassAngle"], [26, 2, 1, "", "Coordinates"], [26, 2, 1, "", "Cross"], [26, 2, 1, "", "Dot"], [26, 2, 1, "", "Down"], [26, 2, 1, "", "East"], [26, 2, 1, "", "IsAntiParallel"], [26, 2, 1, "", "IsCollinear"], [26, 2, 1, "", "IsParallel"], [26, 2, 1, "", "IsSame"], [26, 2, 1, "", "Length"], [26, 2, 1, "", "Magnitude"], [26, 2, 1, "", "Multiply"], [26, 2, 1, "", "Normalize"], [26, 2, 1, "", "North"], [26, 2, 1, "", "NorthEast"], [26, 2, 1, "", "NorthWest"], [26, 2, 1, "", "Reverse"], [26, 2, 1, "", "SetMagnitude"], [26, 2, 1, "", "South"], [26, 2, 1, "", "SouthEast"], [26, 2, 1, "", "SouthWest"], [26, 2, 1, "", "Subtract"], [26, 2, 1, "", "Sum"], [26, 2, 1, "", "TransformationMatrix"], [26, 2, 1, "", "Up"], [26, 2, 1, "", "West"], [26, 2, 1, "", "XAxis"], [26, 2, 1, "", "YAxis"], [26, 2, 1, "", "ZAxis"]], "topologicpy.Vertex": [[27, 1, 1, "", "Vertex"]], "topologicpy.Vertex.Vertex": [[27, 2, 1, "", "AreCollinear"], [27, 2, 1, "", "AreIpsilateral"], [27, 2, 1, "", "AreIpsilateralCluster"], [27, 2, 1, "", "AreOnSameSide"], [27, 2, 1, "", "AreOnSameSideCluster"], [27, 2, 1, "", "ByCoordinates"], [27, 2, 1, "", "Centroid"], [27, 2, 1, "", "Clockwise2D"], [27, 2, 1, "", "Coordinates"], [27, 2, 1, "", "CounterClockwise2D"], [27, 2, 1, "", "Degree"], [27, 2, 1, "", "Distance"], [27, 2, 1, "", "EnclosingCell"], [27, 2, 1, "", "ExternalBoundary"], [27, 2, 1, "", "Fuse"], [27, 2, 1, "", "IncomingEdges"], [27, 2, 1, "", "Index"], [27, 2, 1, "", "InterpolateValue"], [27, 2, 1, "", "IsCoincident"], [27, 2, 1, "", "IsExternal"], [27, 2, 1, "", "IsInternal"], [27, 2, 1, "", "IsPeripheral"], [27, 2, 1, "", "NearestVertex"], [27, 2, 1, "", "Origin"], [27, 2, 1, "", "OutgoingEdges"], [27, 2, 1, "", "PerpendicularDistance"], [27, 2, 1, "", "PlaneEquation"], [27, 2, 1, "", "Point"], [27, 2, 1, "", "Project"], [27, 2, 1, "", "X"], [27, 2, 1, "", "Y"], [27, 2, 1, "", "Z"]], "topologicpy.Wire": [[28, 1, 1, "", "Wire"]], "topologicpy.Wire.Wire": [[28, 2, 1, "", "Arc"], [28, 2, 1, "", "BoundingRectangle"], [28, 2, 1, "", "ByEdges"], [28, 2, 1, "", "ByEdgesCluster"], [28, 2, 1, "", "ByOffset"], [28, 2, 1, "", "ByVertices"], [28, 2, 1, "", "ByVerticesCluster"], [28, 2, 1, "", "Circle"], [28, 2, 1, "", "Close"], [28, 2, 1, "", "ConvexHull"], [28, 2, 1, "", "Cycles"], [28, 2, 1, "", "Edges"], [28, 2, 1, "", "Einstein"], [28, 2, 1, "", "Ellipse"], [28, 2, 1, "", "EllipseAll"], [28, 2, 1, "", "EndVertex"], [28, 2, 1, "", "ExteriorAngles"], [28, 2, 1, "", "ExternalBoundary"], [28, 2, 1, "", "Fillet"], [28, 2, 1, "", "InteriorAngles"], [28, 2, 1, "", "Interpolate"], [28, 2, 1, "", "Invert"], [28, 2, 1, "", "IsClosed"], [28, 2, 1, "", "IsManifold"], [28, 2, 1, "", "IsSimilar"], [28, 2, 1, "", "Length"], [28, 2, 1, "", "Line"], [28, 2, 1, "", "Miter"], [28, 2, 1, "", "Normal"], [28, 2, 1, "", "OrientEdges"], [28, 2, 1, "", "Planarize"], [28, 2, 1, "", "Project"], [28, 2, 1, "", "Rectangle"], [28, 2, 1, "", "RemoveCollinearEdges"], [28, 2, 1, "", "Reverse"], [28, 2, 1, "", "Roof"], [28, 2, 1, "", "Simplify"], [28, 2, 1, "", "Skeleton"], [28, 2, 1, "", "Spiral"], [28, 2, 1, "", "Split"], [28, 2, 1, "", "Square"], [28, 2, 1, "", "Squircle"], [28, 2, 1, "", "Star"], [28, 2, 1, "", "StartEndVertices"], [28, 2, 1, "", "StartVertex"], [28, 2, 1, "", "Trapezoid"], [28, 2, 1, "", "VertexByDistance"], [28, 2, 1, "", "VertexByParameter"], [28, 2, 1, "", "VertexDistance"], [28, 2, 1, "", "Vertices"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"topologicpi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "an": 0, "advanc": 0, "spatial": 0, "model": 0, "analysi": 0, "softwar": 0, "librari": 0, "architectur": 0, "engin": 0, "construct": 0, "introduct": 0, "instal": 0, "prerequisit": 0, "how": 0, "start": 0, "us": 0, "topolog": 0, "api": 0, "document": 0, "cite": 0, "content": [0, 2], "indic": 0, "tabl": 0, "packag": 2, "submodul": 2, "modul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "apertur": 3, "cell": 4, "descript": [4, 5, 18], "cellcomplex": 5, "cluster": 6, "color": 7, "context": 8, "dgl": 9, "dictionari": 10, "edg": 11, "energymodel": 12, "face": 13, "graph": 14, "grid": 15, "helper": 16, "honeybe": 17, "matrix": 18, "neo4j": 19, "plotli": 20, "polyskel": 21, "shell": 22, "speckl": 23, "sun": 24, "topologi": 25, "vector": 26, "vertex": 27, "wire": 28, "version": 29}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"topologicpy": [[0, "topologicpy"], [1, "topologicpy"]], "An Advanced Spatial Modelling and Analysis Software Library for Architecture, Engineering, and Construction": [[0, "an-advanced-spatial-modelling-and-analysis-software-library-for-architecture-engineering-and-construction"]], "Introduction": [[0, "introduction"]], "Installation": [[0, "installation"]], "Prerequisites": [[0, "prerequisites"]], "How to start using Topologic": [[0, "how-to-start-using-topologic"]], "API Documentation": [[0, "api-documentation"]], "How to cite topologicpy": [[0, "how-to-cite-topologicpy"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "topologicpy package": [[2, "topologicpy-package"]], "Submodules": [[2, "submodules"]], "Module contents": [[2, "module-topologicpy"]], "topologicpy.Aperture module": [[3, "module-topologicpy.Aperture"]], "topologicpy.Cell module": [[4, "module-topologicpy.Cell"]], "Description": [[4, "description"], [4, "id1"], [4, "id2"], [4, "id3"], [4, "id4"], [4, "id5"], [5, "description"], [18, "description"], [18, "id1"], [18, "id2"], [18, "id3"], [18, "id4"], [18, "id5"], [18, "id6"]], "topologicpy.CellComplex module": [[5, "module-topologicpy.CellComplex"]], "topologicpy.Cluster module": [[6, "module-topologicpy.Cluster"]], "topologicpy.Color module": [[7, "module-topologicpy.Color"]], "topologicpy.Context module": [[8, "module-topologicpy.Context"]], "topologicpy.DGL module": [[9, "topologicpy-dgl-module"]], "topologicpy.Dictionary module": [[10, "module-topologicpy.Dictionary"]], "topologicpy.Edge module": [[11, "module-topologicpy.Edge"]], "topologicpy.EnergyModel module": [[12, "module-topologicpy.EnergyModel"]], "topologicpy.Face module": [[13, "module-topologicpy.Face"]], "topologicpy.Graph module": [[14, "module-topologicpy.Graph"]], "topologicpy.Grid module": [[15, "module-topologicpy.Grid"]], "topologicpy.Helper module": [[16, "module-topologicpy.Helper"]], "topologicpy.Honeybee module": [[17, "module-topologicpy.Honeybee"]], "topologicpy.Matrix module": [[18, "module-topologicpy.Matrix"]], "topologicpy.Neo4j module": [[19, "module-topologicpy.Neo4j"]], "topologicpy.Plotly module": [[20, "module-topologicpy.Plotly"]], "topologicpy.Polyskel module": [[21, "module-topologicpy.Polyskel"]], "topologicpy.Shell module": [[22, "module-topologicpy.Shell"]], "topologicpy.Speckle module": [[23, "module-topologicpy.Speckle"]], "topologicpy.Sun module": [[24, "module-topologicpy.Sun"]], "topologicpy.Topology module": [[25, "module-topologicpy.Topology"]], "topologicpy.Vector module": [[26, "module-topologicpy.Vector"]], "topologicpy.Vertex module": [[27, "module-topologicpy.Vertex"]], "topologicpy.Wire module": [[28, "module-topologicpy.Wire"]], "topologicpy.version module": [[29, "module-topologicpy.version"]]}, "indexentries": {"module": [[2, "module-topologicpy"], [3, "module-topologicpy.Aperture"], [4, "module-topologicpy.Cell"], [5, "module-topologicpy.CellComplex"], [6, "module-topologicpy.Cluster"], [7, "module-topologicpy.Color"], [8, "module-topologicpy.Context"], [10, "module-topologicpy.Dictionary"], [11, "module-topologicpy.Edge"], [12, "module-topologicpy.EnergyModel"], [13, "module-topologicpy.Face"], [14, "module-topologicpy.Graph"], [15, "module-topologicpy.Grid"], [16, "module-topologicpy.Helper"], [17, "module-topologicpy.Honeybee"], [18, "module-topologicpy.Matrix"], [19, "module-topologicpy.Neo4j"], [20, "module-topologicpy.Plotly"], [21, "module-topologicpy.Polyskel"], [22, "module-topologicpy.Shell"], [23, "module-topologicpy.Speckle"], [24, "module-topologicpy.Sun"], [25, "module-topologicpy.Topology"], [26, "module-topologicpy.Vector"], [27, "module-topologicpy.Vertex"], [28, "module-topologicpy.Wire"], [29, "module-topologicpy.version"]], "topologicpy": [[2, "module-topologicpy"]], "aperture (class in topologicpy.aperture)": [[3, "topologicpy.Aperture.Aperture"]], "bytopologycontext() (topologicpy.aperture.aperture static method)": [[3, "topologicpy.Aperture.Aperture.ByTopologyContext"]], "topology() (topologicpy.aperture.aperture static method)": [[3, "topologicpy.Aperture.Aperture.Topology"]], "topologicpy.aperture": [[3, "module-topologicpy.Aperture"]], "area() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Area"]], "box() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Box"]], "byfaces() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.ByFaces"]], "byoffset() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.ByOffset"]], "byshell() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.ByShell"]], "bythickenedface() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.ByThickenedFace"]], "bythickenedshell() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.ByThickenedShell"]], "bywires() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.ByWires"]], "bywirescluster() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.ByWiresCluster"]], "capsule() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Capsule"]], "cell (class in topologicpy.cell)": [[4, "topologicpy.Cell.Cell"]], "compactness() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Compactness"]], "cone() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Cone"]], "containmentstatus() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.ContainmentStatus"]], "cylinder() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Cylinder"]], "decompose() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Decompose"]], "dodecahedron() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Dodecahedron"]], "edges() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Edges"]], "egg() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Egg"]], "externalboundary() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.ExternalBoundary"]], "faces() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Faces"]], "hyperboloid() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Hyperboloid"]], "icosahedron() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Icosahedron"]], "internalboundaries() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.InternalBoundaries"]], "internalvertex() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.InternalVertex"]], "isonboundary() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.IsOnBoundary"]], "octahedron() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Octahedron"]], "pipe() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Pipe"]], "prism() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Prism"]], "removecollinearedges() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.RemoveCollinearEdges"]], "roof() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Roof"]], "sets() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Sets"]], "shells() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Shells"]], "sphere() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Sphere"]], "surfacearea() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.SurfaceArea"]], "tetrahedron() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Tetrahedron"]], "torus() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Torus"]], "vertices() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Vertices"]], "volume() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Volume"]], "wires() (topologicpy.cell.cell static method)": [[4, "topologicpy.Cell.Cell.Wires"]], "topologicpy.cell": [[4, "module-topologicpy.Cell"]], "box() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Box"]], "bycells() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.ByCells"]], "bycellscluster() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.ByCellsCluster"]], "byfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.ByFaces"]], "byfacescluster() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.ByFacesCluster"]], "bywires() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.ByWires"]], "bywirescluster() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.ByWiresCluster"]], "cellcomplex (class in topologicpy.cellcomplex)": [[5, "topologicpy.CellComplex.CellComplex"]], "cells() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Cells"]], "decompose() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Decompose"]], "delaunay() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Delaunay"]], "edges() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Edges"]], "externalboundary() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.ExternalBoundary"]], "externalfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.ExternalFaces"]], "faces() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Faces"]], "internalfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.InternalFaces"]], "nonmanifoldfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.NonManifoldFaces"]], "octahedron() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Octahedron"]], "prism() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Prism"]], "removecollinearedges() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.RemoveCollinearEdges"]], "shells() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Shells"]], "vertices() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Vertices"]], "volume() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Volume"]], "voronoi() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Voronoi"]], "wires() (topologicpy.cellcomplex.cellcomplex static method)": [[5, "topologicpy.CellComplex.CellComplex.Wires"]], "topologicpy.cellcomplex": [[5, "module-topologicpy.CellComplex"]], "byformula() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.ByFormula"]], "bytopologies() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.ByTopologies"]], "cellcomplexes() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.CellComplexes"]], "cells() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.Cells"]], "cluster (class in topologicpy.cluster)": [[6, "topologicpy.Cluster.Cluster"]], "dbscan() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.DBSCAN"]], "edges() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.Edges"]], "faces() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.Faces"]], "freecells() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.FreeCells"]], "freeedges() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.FreeEdges"]], "freefaces() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.FreeFaces"]], "freeshells() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.FreeShells"]], "freetopologies() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.FreeTopologies"]], "freevertices() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.FreeVertices"]], "freewires() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.FreeWires"]], "highesttype() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.HighestType"]], "k_means() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.K_Means"]], "mergecells() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.MergeCells"]], "mysticrose() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.MysticRose"]], "shells() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.Shells"]], "simplify() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.Simplify"]], "vertices() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.Vertices"]], "wires() (topologicpy.cluster.cluster static method)": [[6, "topologicpy.Cluster.Cluster.Wires"]], "topologicpy.cluster": [[6, "module-topologicpy.Cluster"]], "bycssnamedcolor() (topologicpy.color.color static method)": [[7, "topologicpy.Color.Color.ByCSSNamedColor"]], "byhex() (topologicpy.color.color static method)": [[7, "topologicpy.Color.Color.ByHEX"]], "byvalueinrange() (topologicpy.color.color static method)": [[7, "topologicpy.Color.Color.ByValueInRange"]], "cssnamedcolor() (topologicpy.color.color static method)": [[7, "topologicpy.Color.Color.CSSNamedColor"]], "cssnamedcolors() (topologicpy.color.color static method)": [[7, "topologicpy.Color.Color.CSSNamedColors"]], "color (class in topologicpy.color)": [[7, "topologicpy.Color.Color"]], "plotlycolor() (topologicpy.color.color static method)": [[7, "topologicpy.Color.Color.PlotlyColor"]], "rgbtohex() (topologicpy.color.color static method)": [[7, "topologicpy.Color.Color.RGBToHex"]], "topologicpy.color": [[7, "module-topologicpy.Color"]], "bytopologyparameters() (topologicpy.context.context static method)": [[8, "topologicpy.Context.Context.ByTopologyParameters"]], "context (class in topologicpy.context)": [[8, "topologicpy.Context.Context"]], "topology() (topologicpy.context.context static method)": [[8, "topologicpy.Context.Context.Topology"]], "topologicpy.context": [[8, "module-topologicpy.Context"]], "bykeyvalue() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.ByKeyValue"]], "bykeysvalues() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.ByKeysValues"]], "bymergeddictionaries() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.ByMergedDictionaries"]], "bypythondictionary() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.ByPythonDictionary"]], "dictionary (class in topologicpy.dictionary)": [[10, "topologicpy.Dictionary.Dictionary"]], "keys() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.Keys"]], "listattributevalues() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.ListAttributeValues"]], "pythondictionary() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.PythonDictionary"]], "removekey() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.RemoveKey"]], "setvalueatkey() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.SetValueAtKey"]], "valueatkey() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.ValueAtKey"]], "values() (topologicpy.dictionary.dictionary static method)": [[10, "topologicpy.Dictionary.Dictionary.Values"]], "topologicpy.dictionary": [[10, "module-topologicpy.Dictionary"]], "angle() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Angle"]], "bisect() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Bisect"]], "byfacenormal() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.ByFaceNormal"]], "byoffset2d() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.ByOffset2D"]], "bystartvertexendvertex() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.ByStartVertexEndVertex"]], "byvertices() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.ByVertices"]], "byverticescluster() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.ByVerticesCluster"]], "direction() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Direction"]], "edge (class in topologicpy.edge)": [[11, "topologicpy.Edge.Edge"]], "endvertex() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.EndVertex"]], "extend() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Extend"]], "extendtoedge() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.ExtendToEdge"]], "externalboundary() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.ExternalBoundary"]], "index() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Index"]], "iscollinear() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.IsCollinear"]], "iscoplanar() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.IsCoplanar"]], "isparallel() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.IsParallel"]], "length() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Length"]], "line() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Line"]], "normal() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Normal"]], "normalasedge() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.NormalAsEdge"]], "normalize() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Normalize"]], "parameteratvertex() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.ParameterAtVertex"]], "reverse() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Reverse"]], "setlength() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.SetLength"]], "startvertex() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.StartVertex"]], "trim() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Trim"]], "trimbyedge() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.TrimByEdge"]], "vertexbydistance() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.VertexByDistance"]], "vertexbyparameter() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.VertexByParameter"]], "vertices() (topologicpy.edge.edge static method)": [[11, "topologicpy.Edge.Edge.Vertices"]], "topologicpy.edge": [[11, "module-topologicpy.Edge"]], "byosmpath() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.ByOSMPath"]], "bytopology() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.ByTopology"]], "columnnames() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.ColumnNames"]], "defaultconstructionsets() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.DefaultConstructionSets"]], "defaultschedulesets() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.DefaultScheduleSets"]], "energymodel (class in topologicpy.energymodel)": [[12, "topologicpy.EnergyModel.EnergyModel"]], "exporttogbxml() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.ExportToGBXML"]], "exporttoosm() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.ExportToOSM"]], "gbxmlstring() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.GBXMLString"]], "query() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.Query"]], "reportnames() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.ReportNames"]], "rownames() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.RowNames"]], "run() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.Run"]], "spacecolors() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.SpaceColors"]], "spacedictionaries() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.SpaceDictionaries"]], "spacetypenames() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.SpaceTypeNames"]], "spacetypes() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.SpaceTypes"]], "sqlfile() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.SqlFile"]], "tablenames() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.TableNames"]], "topologies() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.Topologies"]], "units() (topologicpy.energymodel.energymodel static method)": [[12, "topologicpy.EnergyModel.EnergyModel.Units"]], "topologicpy.energymodel": [[12, "module-topologicpy.EnergyModel"]], "addinternalboundaries() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.AddInternalBoundaries"]], "addinternalboundariescluster() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.AddInternalBoundariesCluster"]], "angle() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Angle"]], "area() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Area"]], "boundingrectangle() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.BoundingRectangle"]], "byedges() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByEdges"]], "byedgescluster() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByEdgesCluster"]], "byoffset() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByOffset"]], "byshell() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByShell"]], "bythickenedwire() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByThickenedWire"]], "byvertices() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByVertices"]], "byverticescluster() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByVerticesCluster"]], "bywire() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByWire"]], "bywires() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByWires"]], "bywirescluster() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ByWiresCluster"]], "circle() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Circle"]], "compactness() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Compactness"]], "compassangle() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.CompassAngle"]], "edges() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Edges"]], "einstein() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Einstein"]], "ellipse() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Ellipse"]], "exteriorangles() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ExteriorAngles"]], "externalboundary() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.ExternalBoundary"]], "face (class in topologicpy.face)": [[13, "topologicpy.Face.Face"]], "facingtoward() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.FacingToward"]], "fillet() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Fillet"]], "harmonize() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Harmonize"]], "interiorangles() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.InteriorAngles"]], "internalboundaries() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.InternalBoundaries"]], "internalvertex() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.InternalVertex"]], "invert() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Invert"]], "iscoplanar() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.IsCoplanar"]], "isovist() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Isovist"]], "medialaxis() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.MedialAxis"]], "normal() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Normal"]], "normaledge() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.NormalEdge"]], "northarrow() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.NorthArrow"]], "planarize() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Planarize"]], "planeequation() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.PlaneEquation"]], "project() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Project"]], "rectangle() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Rectangle"]], "rectanglebyplaneequation() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.RectangleByPlaneEquation"]], "removecollinearedges() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.RemoveCollinearEdges"]], "simplify() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Simplify"]], "skeleton() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Skeleton"]], "square() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Square"]], "squircle() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Squircle"]], "star() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Star"]], "trapezoid() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Trapezoid"]], "triangulate() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Triangulate"]], "trimbywire() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.TrimByWire"]], "vertexbyparameters() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.VertexByParameters"]], "vertexparameters() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.VertexParameters"]], "vertices() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Vertices"]], "wire() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Wire"]], "wires() (topologicpy.face.face static method)": [[13, "topologicpy.Face.Face.Wires"]], "topologicpy.face": [[13, "module-topologicpy.Face"]], "addedge() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.AddEdge"]], "addvertex() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.AddVertex"]], "addvertices() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.AddVertices"]], "adjacencydictionary() (topologicpy.graph.graph method)": [[14, "topologicpy.Graph.Graph.AdjacencyDictionary"]], "adjacencylist() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.AdjacencyList"]], "adjacencymatrix() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.AdjacencyMatrix"]], "adjacentvertices() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.AdjacentVertices"]], "allpaths() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.AllPaths"]], "averageclusteringcoefficient() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.AverageClusteringCoefficient"]], "botgraph() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.BOTGraph"]], "botstring() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.BOTString"]], "betweenesscentrality() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.BetweenessCentrality"]], "byadjacencymatrix() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByAdjacencyMatrix"]], "byadjacencymatrixcsvpath() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByAdjacencyMatrixCSVPath"]], "bybotgraph() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByBOTGraph"]], "bybotpath() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByBOTPath"]], "bycsvpath() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByCSVPath"]], "bydgcnnfile() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByDGCNNFile"]], "bydgcnnpath() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByDGCNNPath"]], "bydgcnnstring() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByDGCNNString"]], "byifcfile() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByIFCFile"]], "byifcpath() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByIFCPath"]], "bymeshdata() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByMeshData"]], "bytopology() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByTopology"]], "byverticesedges() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ByVerticesEdges"]], "chromaticnumber() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ChromaticNumber"]], "closenesscentrality() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ClosenessCentrality"]], "color() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Color"]], "connect() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Connect"]], "containsedge() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ContainsEdge"]], "containsvertex() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ContainsVertex"]], "contractedge() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ContractEdge"]], "degreesequence() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.DegreeSequence"]], "density() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Density"]], "depthmap() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.DepthMap"]], "diameter() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Diameter"]], "dictionary() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Dictionary"]], "distance() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Distance"]], "edge() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Edge"]], "edges() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Edges"]], "exporttoadjacencymatrixcsv() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ExportToAdjacencyMatrixCSV"]], "exporttobot() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ExportToBOT"]], "exporttocsv() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ExportToCSV"]], "exporttogexf() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ExportToGEXF"]], "exporttojson() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ExportToJSON"]], "flatten() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Flatten"]], "globalclusteringcoefficient() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.GlobalClusteringCoefficient"]], "graph (class in topologicpy.graph)": [[14, "topologicpy.Graph.Graph"]], "graphqueueitem (class in topologicpy.graph)": [[14, "topologicpy.Graph.GraphQueueItem"]], "guid() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Guid"]], "incomingedges() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.IncomingEdges"]], "incomingvertices() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.IncomingVertices"]], "isbipartite() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.IsBipartite"]], "iscomplete() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.IsComplete"]], "iserdoesgallai() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.IsErdoesGallai"]], "isolatedvertices() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.IsolatedVertices"]], "jsondata() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.JSONData"]], "jsonstring() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.JSONString"]], "localclusteringcoefficient() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.LocalClusteringCoefficient"]], "longestpath() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.LongestPath"]], "maximumdelta() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.MaximumDelta"]], "maximumflow() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.MaximumFlow"]], "mergingprocess (class in topologicpy.graph)": [[14, "topologicpy.Graph.MergingProcess"]], "meshdata() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.MeshData"]], "minimumdelta() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.MinimumDelta"]], "minimumspanningtree() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.MinimumSpanningTree"]], "navigationgraph() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.NavigationGraph"]], "nearestvertex() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.NearestVertex"]], "networkxgraph() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.NetworkXGraph"]], "order() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Order"]], "outgoingedges() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.OutgoingEdges"]], "outgoingvertices() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.OutgoingVertices"]], "pagerank() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.PageRank"]], "path() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Path"]], "pyvisgraph() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.PyvisGraph"]], "removeedge() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.RemoveEdge"]], "removevertex() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.RemoveVertex"]], "setdictionary() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.SetDictionary"]], "shortestpath() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ShortestPath"]], "shortestpaths() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.ShortestPaths"]], "show() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Show"]], "size() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Size"]], "topologicaldistance() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.TopologicalDistance"]], "topology() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Topology"]], "tree() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Tree"]], "vertexdegree() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.VertexDegree"]], "vertices() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.Vertices"]], "visibilitygraph() (topologicpy.graph.graph static method)": [[14, "topologicpy.Graph.Graph.VisibilityGraph"]], "workerprocess (class in topologicpy.graph)": [[14, "topologicpy.Graph.WorkerProcess"]], "workerprocesspool (class in topologicpy.graph)": [[14, "topologicpy.Graph.WorkerProcessPool"]], "edges (topologicpy.graph.graphqueueitem attribute)": [[14, "topologicpy.Graph.GraphQueueItem.edges"]], "join() (topologicpy.graph.workerprocesspool method)": [[14, "topologicpy.Graph.WorkerProcessPool.join"]], "run() (topologicpy.graph.workerprocess method)": [[14, "topologicpy.Graph.WorkerProcess.run"]], "startprocesses() (topologicpy.graph.workerprocesspool method)": [[14, "topologicpy.Graph.WorkerProcessPool.startProcesses"]], "stopprocesses() (topologicpy.graph.workerprocesspool method)": [[14, "topologicpy.Graph.WorkerProcessPool.stopProcesses"]], "topologicpy.graph": [[14, "module-topologicpy.Graph"]], "wait_message() (topologicpy.graph.mergingprocess method)": [[14, "topologicpy.Graph.MergingProcess.wait_message"]], "edgesbydistances() (topologicpy.grid.grid static method)": [[15, "topologicpy.Grid.Grid.EdgesByDistances"]], "edgesbyparameters() (topologicpy.grid.grid static method)": [[15, "topologicpy.Grid.Grid.EdgesByParameters"]], "grid (class in topologicpy.grid)": [[15, "topologicpy.Grid.Grid"]], "verticesbydistances() (topologicpy.grid.grid static method)": [[15, "topologicpy.Grid.Grid.VerticesByDistances"]], "verticesbyparameters() (topologicpy.grid.grid static method)": [[15, "topologicpy.Grid.Grid.VerticesByParameters"]], "topologicpy.grid": [[15, "module-topologicpy.Grid"]], "closestmatch() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.ClosestMatch"]], "flatten() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.Flatten"]], "helper (class in topologicpy.helper)": [[16, "topologicpy.Helper.Helper"]], "iterate() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.Iterate"]], "k_means() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.K_Means"]], "makeunique() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.MakeUnique"]], "mergebythreshold() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.MergeByThreshold"]], "normalize() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.Normalize"]], "position() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.Position"]], "repeat() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.Repeat"]], "sort() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.Sort"]], "transpose() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.Transpose"]], "trim() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.Trim"]], "version() (topologicpy.helper.helper static method)": [[16, "topologicpy.Helper.Helper.Version"]], "topologicpy.helper": [[16, "module-topologicpy.Helper"]], "constructionsetbyidentifier() (topologicpy.honeybee.honeybee static method)": [[17, "topologicpy.Honeybee.Honeybee.ConstructionSetByIdentifier"]], "constructionsets() (topologicpy.honeybee.honeybee static method)": [[17, "topologicpy.Honeybee.Honeybee.ConstructionSets"]], "exporttohbjson() (topologicpy.honeybee.honeybee static method)": [[17, "topologicpy.Honeybee.Honeybee.ExportToHBJSON"]], "honeybee (class in topologicpy.honeybee)": [[17, "topologicpy.Honeybee.Honeybee"]], "modelbytopology() (topologicpy.honeybee.honeybee static method)": [[17, "topologicpy.Honeybee.Honeybee.ModelByTopology"]], "programtypebyidentifier() (topologicpy.honeybee.honeybee static method)": [[17, "topologicpy.Honeybee.Honeybee.ProgramTypeByIdentifier"]], "programtypes() (topologicpy.honeybee.honeybee static method)": [[17, "topologicpy.Honeybee.Honeybee.ProgramTypes"]], "string() (topologicpy.honeybee.honeybee static method)": [[17, "topologicpy.Honeybee.Honeybee.String"]], "topologicpy.honeybee": [[17, "module-topologicpy.Honeybee"]], "add() (topologicpy.matrix.matrix static method)": [[18, "topologicpy.Matrix.Matrix.Add"]], "byrotation() (topologicpy.matrix.matrix static method)": [[18, "topologicpy.Matrix.Matrix.ByRotation"]], "byscaling() (topologicpy.matrix.matrix static method)": [[18, "topologicpy.Matrix.Matrix.ByScaling"]], "bytranslation() (topologicpy.matrix.matrix static method)": [[18, "topologicpy.Matrix.Matrix.ByTranslation"]], "matrix (class in topologicpy.matrix)": [[18, "topologicpy.Matrix.Matrix"]], "multiply() (topologicpy.matrix.matrix static method)": [[18, "topologicpy.Matrix.Matrix.Multiply"]], "subtract() (topologicpy.matrix.matrix static method)": [[18, "topologicpy.Matrix.Matrix.Subtract"]], "transpose() (topologicpy.matrix.matrix static method)": [[18, "topologicpy.Matrix.Matrix.Transpose"]], "topologicpy.matrix": [[18, "module-topologicpy.Matrix"]], "addgraph() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.AddGraph"]], "byparameters() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.ByParameters"]], "deleteall() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.DeleteAll"]], "exporttograph() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.ExportToGraph"]], "neo4j (class in topologicpy.neo4j)": [[19, "topologicpy.Neo4j.Neo4j"]], "nodelabels() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.NodeLabels"]], "nodetovertex() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.NodeToVertex"]], "nodesbycypher() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.NodesByCypher"]], "nodesbysubgraph() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.NodesBySubGraph"]], "relationshiptypes() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.RelationshipTypes"]], "setgraph() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.SetGraph"]], "subgraphbycypher() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.SubGraphByCypher"]], "subgraphexporttograph() (topologicpy.neo4j.neo4j static method)": [[19, "topologicpy.Neo4j.Neo4j.SubGraphExportToGraph"]], "topologicpy.neo4j": [[19, "module-topologicpy.Neo4j"]], "addcolorbar() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.AddColorBar"]], "colorscale() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.ColorScale"]], "colors() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.Colors"]], "databydgl() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.DataByDGL"]], "databygraph() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.DataByGraph"]], "databytopology() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.DataByTopology"]], "exporttoimage() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.ExportToImage"]], "figurebyconfusionmatrix() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureByConfusionMatrix"]], "figurebydata() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureByData"]], "figurebydataframe() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureByDataFrame"]], "figurebyjsonfile() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureByJSONFile"]], "figurebyjsonpath() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureByJSONPath"]], "figurebymatrix() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureByMatrix"]], "figurebypiechart() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureByPieChart"]], "figurebytopology() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureByTopology"]], "figureexporttojson() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureExportToJSON"]], "figureexporttopdf() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureExportToPDF"]], "figureexporttopng() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureExportToPNG"]], "figureexporttosvg() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.FigureExportToSVG"]], "plotly (class in topologicpy.plotly)": [[20, "topologicpy.Plotly.Plotly"]], "renderer() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.Renderer"]], "renderers() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.Renderers"]], "setcamera() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.SetCamera"]], "show() (topologicpy.plotly.plotly static method)": [[20, "topologicpy.Plotly.Plotly.Show"]], "topologicpy.plotly": [[20, "module-topologicpy.Plotly"]], "debug (class in topologicpy.polyskel)": [[21, "topologicpy.Polyskel.Debug"]], "line2 (class in topologicpy.polyskel)": [[21, "topologicpy.Polyskel.Line2"]], "linesegment2 (class in topologicpy.polyskel)": [[21, "topologicpy.Polyskel.LineSegment2"]], "point2 (class in topologicpy.polyskel)": [[21, "topologicpy.Polyskel.Point2"]], "ray2 (class in topologicpy.polyskel)": [[21, "topologicpy.Polyskel.Ray2"]], "subtree (class in topologicpy.polyskel)": [[21, "topologicpy.Polyskel.Subtree"]], "cross() (topologicpy.polyskel.point2 method)": [[21, "topologicpy.Polyskel.Point2.cross"]], "distance() (topologicpy.polyskel.line2 method)": [[21, "topologicpy.Polyskel.Line2.distance"]], "distance() (topologicpy.polyskel.point2 method)": [[21, "topologicpy.Polyskel.Point2.distance"]], "dot() (topologicpy.polyskel.point2 method)": [[21, "topologicpy.Polyskel.Point2.dot"]], "height (topologicpy.polyskel.subtree attribute)": [[21, "topologicpy.Polyskel.Subtree.height"]], "intersect() (topologicpy.polyskel.line2 method)": [[21, "topologicpy.Polyskel.Line2.intersect"]], "intersect() (topologicpy.polyskel.linesegment2 method)": [[21, "topologicpy.Polyskel.LineSegment2.intersect"]], "intersect() (topologicpy.polyskel.ray2 method)": [[21, "topologicpy.Polyskel.Ray2.intersect"]], "line() (topologicpy.polyskel.debug method)": [[21, "topologicpy.Polyskel.Debug.line"]], "normalized() (topologicpy.polyskel.point2 method)": [[21, "topologicpy.Polyskel.Point2.normalized"]], "rectangle() (topologicpy.polyskel.debug method)": [[21, "topologicpy.Polyskel.Debug.rectangle"]], "set_debug() (in module topologicpy.polyskel)": [[21, "topologicpy.Polyskel.set_debug"]], "show() (topologicpy.polyskel.debug method)": [[21, "topologicpy.Polyskel.Debug.show"]], "sinks (topologicpy.polyskel.subtree attribute)": [[21, "topologicpy.Polyskel.Subtree.sinks"]], "skeletonize() (in module topologicpy.polyskel)": [[21, "topologicpy.Polyskel.skeletonize"]], "source (topologicpy.polyskel.subtree attribute)": [[21, "topologicpy.Polyskel.Subtree.source"]], "topologicpy.polyskel": [[21, "module-topologicpy.Polyskel"]], "bydisjointfaces() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.ByDisjointFaces"]], "byfaces() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.ByFaces"]], "byfacescluster() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.ByFacesCluster"]], "bythickenedwire() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.ByThickenedWire"]], "bywires() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.ByWires"]], "bywirescluster() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.ByWiresCluster"]], "circle() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Circle"]], "delaunay() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Delaunay"]], "edges() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Edges"]], "externalboundary() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.ExternalBoundary"]], "faces() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Faces"]], "hyperbolicparaboloidcirculardomain() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.HyperbolicParaboloidCircularDomain"]], "hyperbolicparaboloidrectangulardomain() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.HyperbolicParaboloidRectangularDomain"]], "internalboundaries() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.InternalBoundaries"]], "isclosed() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.IsClosed"]], "isonboundary() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.IsOnBoundary"]], "pie() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Pie"]], "planarize() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Planarize"]], "rectangle() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Rectangle"]], "removecollinearedges() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.RemoveCollinearEdges"]], "roof() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Roof"]], "selfmerge() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.SelfMerge"]], "shell (class in topologicpy.shell)": [[22, "topologicpy.Shell.Shell"]], "simplify() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Simplify"]], "skeleton() (topologicpy.shell.shell method)": [[22, "topologicpy.Shell.Shell.Skeleton"]], "vertices() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Vertices"]], "voronoi() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Voronoi"]], "wires() (topologicpy.shell.shell static method)": [[22, "topologicpy.Shell.Shell.Wires"]], "topologicpy.shell": [[22, "module-topologicpy.Shell"]], "branchesbystream() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.BranchesByStream"]], "clientbyurl() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.ClientByURL"]], "commitbyid() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.CommitByID"]], "commitsbybranch() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.CommitsByBranch"]], "object() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.Object"]], "send() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.Send"]], "speckle (class in topologicpy.speckle)": [[23, "topologicpy.Speckle.Speckle"]], "specklebranchbyid() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.SpeckleBranchByID"]], "specklecommitbyurl() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.SpeckleCommitByURL"]], "specklecommitdelete() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.SpeckleCommitDelete"]], "speckleglobalsbystream() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.SpeckleGlobalsByStream"]], "specklesendobjects() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.SpeckleSendObjects"]], "specklestreambyid() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.SpeckleStreamByID"]], "specklestreambyurl() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.SpeckleStreamByURL"]], "streamsbyclient() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.StreamsByClient"]], "mesh_to_speckle() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.mesh_to_speckle"]], "mesh_to_speckle_mesh() (topologicpy.speckle.speckle static method)": [[23, "topologicpy.Speckle.Speckle.mesh_to_speckle_mesh"]], "topologicpy.speckle": [[23, "module-topologicpy.Speckle"]], "altitude() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.Altitude"]], "autumnequinox() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.AutumnEquinox"]], "azimuth() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.Azimuth"]], "diagram() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.Diagram"]], "edge() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.Edge"]], "pathbydate() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.PathByDate"]], "pathbyhour() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.PathByHour"]], "position() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.Position"]], "springequinox() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.SpringEquinox"]], "summersolstice() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.SummerSolstice"]], "sun (class in topologicpy.sun)": [[24, "topologicpy.Sun.Sun"]], "sunrise() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.Sunrise"]], "sunset() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.Sunset"]], "vector() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.Vector"]], "vertex() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.Vertex"]], "verticesbydate() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.VerticesByDate"]], "verticesbyhour() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.VerticesByHour"]], "wintersolstice() (topologicpy.sun.sun static method)": [[24, "topologicpy.Sun.Sun.WinterSolstice"]], "topologicpy.sun": [[24, "module-topologicpy.Sun"]], "addapertures() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.AddApertures"]], "addcontent() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.AddContent"]], "adddictionary() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.AddDictionary"]], "adjacenttopologies() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.AdjacentTopologies"]], "analyze() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Analyze"]], "aperturetopologies() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ApertureTopologies"]], "apertures() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Apertures"]], "brepstring() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.BREPString"]], "boolean() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Boolean"]], "boundingbox() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.BoundingBox"]], "bybimfile() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByBIMFile"]], "bybimpath() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByBIMPath"]], "bybimstring() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByBIMString"]], "bybrepfile() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByBREPFile"]], "bybreppath() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByBREPPath"]], "bybrepstring() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByBREPString"]], "bydxffile() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByDXFFile"]], "bydxfpath() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByDXFPath"]], "bygeometry() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByGeometry"]], "byifcfile() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByIFCFile"]], "byifcpath() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByIFCPath"]], "byjsonfile() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByJSONFile"]], "byjsonpath() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByJSONPath"]], "byjsonstring() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByJSONString"]], "byobjfile() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByOBJFile"]], "byobjpath() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByOBJPath"]], "byobjstring() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByOBJString"]], "byocctshape() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByOCCTShape"]], "byxyzfile() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByXYZFile"]], "byxyzpath() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ByXYZPath"]], "cellcomplexes() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.CellComplexes"]], "cells() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Cells"]], "centerofmass() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.CenterOfMass"]], "centroid() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Centroid"]], "cleanup() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Cleanup"]], "clusterfaces() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ClusterFaces"]], "clusterfaces_orig() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ClusterFaces_orig"]], "clusters() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Clusters"]], "contents() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Contents"]], "contexts() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Contexts"]], "convexhull() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ConvexHull"]], "copy() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Copy"]], "degree() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Degree"]], "dictionary() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Dictionary"]], "difference() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Difference"]], "dimensionality() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Dimensionality"]], "divide() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Divide"]], "edges() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Edges"]], "explode() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Explode"]], "exporttobim() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ExportToBIM"]], "exporttobrep() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ExportToBREP"]], "exporttodxf() (topologicpy.topology.topology method)": [[25, "topologicpy.Topology.Topology.ExportToDXF"]], "exporttojson() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ExportToJSON"]], "exporttoobj() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ExportToOBJ"]], "externalboundary() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ExternalBoundary"]], "faces() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Faces"]], "filter() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Filter"]], "fix() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Fix"]], "flatten() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Flatten"]], "geometry() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Geometry"]], "highesttype() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.HighestType"]], "id (topologicpy.topology.queueitem attribute)": [[25, "topologicpy.Topology.QueueItem.ID"]], "id (topologicpy.topology.sinkitem attribute)": [[25, "topologicpy.Topology.SinkItem.ID"]], "impose() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Impose"]], "imprint() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Imprint"]], "internalvertex() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.InternalVertex"]], "intersect() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Intersect"]], "isinstance() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.IsInstance"]], "isplanar() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.IsPlanar"]], "issame() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.IsSame"]], "jsonstring() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.JSONString"]], "merge() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Merge"]], "mergeall() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.MergeAll"]], "mergingprocess (class in topologicpy.topology)": [[25, "topologicpy.Topology.MergingProcess"]], "nonplanarfaces() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.NonPlanarFaces"]], "objstring() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.OBJString"]], "occtshape() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.OCCTShape"]], "openedges() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.OpenEdges"]], "openfaces() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.OpenFaces"]], "openvertices() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.OpenVertices"]], "orient() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Orient"]], "place() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Place"]], "queueitem (class in topologicpy.topology)": [[25, "topologicpy.Topology.QueueItem"]], "removecollinearedges() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.RemoveCollinearEdges"]], "removecontent() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.RemoveContent"]], "removecoplanarfaces() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.RemoveCoplanarFaces"]], "removeedges() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.RemoveEdges"]], "removefaces() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.RemoveFaces"]], "removefacesbyselectors() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.RemoveFacesBySelectors"]], "removevertices() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.RemoveVertices"]], "replacevertices() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.ReplaceVertices"]], "rotate() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Rotate"]], "rotatebyeulerangles() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.RotateByEulerAngles"]], "rotatebyquaternion() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.RotateByQuaternion"]], "scale() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Scale"]], "selectsubtopology() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SelectSubTopology"]], "selfmerge() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SelfMerge"]], "setdictionary() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SetDictionary"]], "setsnapshot() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SetSnapshot"]], "sharededges() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SharedEdges"]], "sharedfaces() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SharedFaces"]], "sharedtopologies() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SharedTopologies"]], "sharedvertices() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SharedVertices"]], "sharedwires() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SharedWires"]], "shells() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Shells"]], "show() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Show"]], "sinkitem (class in topologicpy.topology)": [[25, "topologicpy.Topology.SinkItem"]], "slice() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Slice"]], "snapshots() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Snapshots"]], "sortbyselectors() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SortBySelectors"]], "spin() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Spin"]], "subtopologies() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SubTopologies"]], "supertopologies() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SuperTopologies"]], "symdif() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SymDif"]], "symmetricdifference() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.SymmetricDifference"]], "taper() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Taper"]], "topology (class in topologicpy.topology)": [[25, "topologicpy.Topology.Topology"]], "transferdictionaries() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.TransferDictionaries"]], "transferdictionariesbyselectors() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.TransferDictionariesBySelectors"]], "transform() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Transform"]], "translate() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Translate"]], "translatebydirectiondistance() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.TranslateByDirectionDistance"]], "triangulate() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Triangulate"]], "twist() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Twist"]], "type() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Type"]], "typeasstring() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.TypeAsString"]], "typeid() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.TypeID"]], "uuid() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.UUID"]], "unflatten() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Unflatten"]], "union() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Union"]], "vertices() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Vertices"]], "wires() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.Wires"]], "workerprocess (class in topologicpy.topology)": [[25, "topologicpy.Topology.WorkerProcess"]], "workerprocesspool (class in topologicpy.topology)": [[25, "topologicpy.Topology.WorkerProcessPool"]], "xor() (topologicpy.topology.topology static method)": [[25, "topologicpy.Topology.Topology.XOR"]], "join() (topologicpy.topology.workerprocesspool method)": [[25, "topologicpy.Topology.WorkerProcessPool.join"]], "run() (topologicpy.topology.workerprocess method)": [[25, "topologicpy.Topology.WorkerProcess.run"]], "sinkkeys (topologicpy.topology.queueitem attribute)": [[25, "topologicpy.Topology.QueueItem.sinkKeys"]], "sinkvalues (topologicpy.topology.queueitem attribute)": [[25, "topologicpy.Topology.QueueItem.sinkValues"]], "sink_str (topologicpy.topology.sinkitem attribute)": [[25, "topologicpy.Topology.SinkItem.sink_str"]], "startprocesses() (topologicpy.topology.workerprocesspool method)": [[25, "topologicpy.Topology.WorkerProcessPool.startProcesses"]], "stopprocesses() (topologicpy.topology.workerprocesspool method)": [[25, "topologicpy.Topology.WorkerProcessPool.stopProcesses"]], "topologicpy.topology": [[25, "module-topologicpy.Topology"]], "wait_message() (topologicpy.topology.mergingprocess method)": [[25, "topologicpy.Topology.MergingProcess.wait_message"]], "add() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Add"]], "angle() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Angle"]], "average() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Average"]], "azimuthaltitude() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.AzimuthAltitude"]], "bisect() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Bisect"]], "byazimuthaltitude() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.ByAzimuthAltitude"]], "bycoordinates() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.ByCoordinates"]], "byvertices() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.ByVertices"]], "compassangle() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.CompassAngle"]], "coordinates() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Coordinates"]], "cross() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Cross"]], "dot() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Dot"]], "down() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Down"]], "east() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.East"]], "isantiparallel() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.IsAntiParallel"]], "iscollinear() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.IsCollinear"]], "isparallel() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.IsParallel"]], "issame() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.IsSame"]], "length() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Length"]], "magnitude() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Magnitude"]], "multiply() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Multiply"]], "normalize() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Normalize"]], "north() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.North"]], "northeast() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.NorthEast"]], "northwest() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.NorthWest"]], "reverse() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Reverse"]], "setmagnitude() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.SetMagnitude"]], "south() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.South"]], "southeast() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.SouthEast"]], "southwest() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.SouthWest"]], "subtract() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Subtract"]], "sum() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Sum"]], "transformationmatrix() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.TransformationMatrix"]], "up() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.Up"]], "vector (class in topologicpy.vector)": [[26, "topologicpy.Vector.Vector"]], "west() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.West"]], "xaxis() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.XAxis"]], "yaxis() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.YAxis"]], "zaxis() (topologicpy.vector.vector static method)": [[26, "topologicpy.Vector.Vector.ZAxis"]], "topologicpy.vector": [[26, "module-topologicpy.Vector"]], "arecollinear() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.AreCollinear"]], "areipsilateral() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.AreIpsilateral"]], "areipsilateralcluster() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.AreIpsilateralCluster"]], "areonsameside() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.AreOnSameSide"]], "areonsamesidecluster() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.AreOnSameSideCluster"]], "bycoordinates() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.ByCoordinates"]], "centroid() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Centroid"]], "clockwise2d() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Clockwise2D"]], "coordinates() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Coordinates"]], "counterclockwise2d() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.CounterClockwise2D"]], "degree() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Degree"]], "distance() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Distance"]], "enclosingcell() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.EnclosingCell"]], "externalboundary() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.ExternalBoundary"]], "fuse() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Fuse"]], "incomingedges() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.IncomingEdges"]], "index() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Index"]], "interpolatevalue() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.InterpolateValue"]], "iscoincident() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.IsCoincident"]], "isexternal() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.IsExternal"]], "isinternal() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.IsInternal"]], "isperipheral() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.IsPeripheral"]], "nearestvertex() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.NearestVertex"]], "origin() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Origin"]], "outgoingedges() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.OutgoingEdges"]], "perpendiculardistance() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.PerpendicularDistance"]], "planeequation() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.PlaneEquation"]], "point() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Point"]], "project() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Project"]], "vertex (class in topologicpy.vertex)": [[27, "topologicpy.Vertex.Vertex"]], "x() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.X"]], "y() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Y"]], "z() (topologicpy.vertex.vertex static method)": [[27, "topologicpy.Vertex.Vertex.Z"]], "topologicpy.vertex": [[27, "module-topologicpy.Vertex"]], "arc() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Arc"]], "boundingrectangle() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.BoundingRectangle"]], "byedges() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.ByEdges"]], "byedgescluster() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.ByEdgesCluster"]], "byoffset() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.ByOffset"]], "byvertices() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.ByVertices"]], "byverticescluster() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.ByVerticesCluster"]], "circle() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Circle"]], "close() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Close"]], "convexhull() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.ConvexHull"]], "cycles() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Cycles"]], "edges() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Edges"]], "einstein() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Einstein"]], "ellipse() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Ellipse"]], "ellipseall() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.EllipseAll"]], "endvertex() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.EndVertex"]], "exteriorangles() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.ExteriorAngles"]], "externalboundary() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.ExternalBoundary"]], "fillet() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Fillet"]], "interiorangles() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.InteriorAngles"]], "interpolate() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Interpolate"]], "invert() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Invert"]], "isclosed() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.IsClosed"]], "ismanifold() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.IsManifold"]], "issimilar() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.IsSimilar"]], "length() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Length"]], "line() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Line"]], "miter() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Miter"]], "normal() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Normal"]], "orientedges() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.OrientEdges"]], "planarize() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Planarize"]], "project() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Project"]], "rectangle() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Rectangle"]], "removecollinearedges() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.RemoveCollinearEdges"]], "reverse() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Reverse"]], "roof() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Roof"]], "simplify() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Simplify"]], "skeleton() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Skeleton"]], "spiral() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Spiral"]], "split() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Split"]], "square() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Square"]], "squircle() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Squircle"]], "star() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Star"]], "startendvertices() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.StartEndVertices"]], "startvertex() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.StartVertex"]], "trapezoid() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Trapezoid"]], "vertexbydistance() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.VertexByDistance"]], "vertexbyparameter() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.VertexByParameter"]], "vertexdistance() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.VertexDistance"]], "vertices() (topologicpy.wire.wire static method)": [[28, "topologicpy.Wire.Wire.Vertices"]], "wire (class in topologicpy.wire)": [[28, "topologicpy.Wire.Wire"]], "topologicpy.wire": [[28, "module-topologicpy.Wire"]], "topologicpy.version": [[29, "module-topologicpy.version"]]}})