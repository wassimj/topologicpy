Search.setIndex({"docnames": ["index", "modules", "topologicpy", "topologicpy.ANN", "topologicpy.Aperture", "topologicpy.BVH", "topologicpy.Cell", "topologicpy.CellComplex", "topologicpy.Cluster", "topologicpy.Color", "topologicpy.Context", "topologicpy.DGL", "topologicpy.Dictionary", "topologicpy.Edge", "topologicpy.EnergyModel", "topologicpy.Face", "topologicpy.Graph", "topologicpy.Grid", "topologicpy.Helper", "topologicpy.Honeybee", "topologicpy.Matrix", "topologicpy.Neo4j", "topologicpy.Plotly", "topologicpy.Polyskel", "topologicpy.PyG", "topologicpy.Shell", "topologicpy.Speckle", "topologicpy.Sun", "topologicpy.Topology", "topologicpy.Vector", "topologicpy.Vertex", "topologicpy.Wire", "topologicpy.version"], "filenames": ["index.rst", "modules.rst", "topologicpy.rst", "topologicpy.ANN.rst", "topologicpy.Aperture.rst", "topologicpy.BVH.rst", "topologicpy.Cell.rst", "topologicpy.CellComplex.rst", "topologicpy.Cluster.rst", "topologicpy.Color.rst", "topologicpy.Context.rst", "topologicpy.DGL.rst", "topologicpy.Dictionary.rst", "topologicpy.Edge.rst", "topologicpy.EnergyModel.rst", "topologicpy.Face.rst", "topologicpy.Graph.rst", "topologicpy.Grid.rst", "topologicpy.Helper.rst", "topologicpy.Honeybee.rst", "topologicpy.Matrix.rst", "topologicpy.Neo4j.rst", "topologicpy.Plotly.rst", "topologicpy.Polyskel.rst", "topologicpy.PyG.rst", "topologicpy.Shell.rst", "topologicpy.Speckle.rst", "topologicpy.Sun.rst", "topologicpy.Topology.rst", "topologicpy.Vector.rst", "topologicpy.Vertex.rst", "topologicpy.Wire.rst", "topologicpy.version.rst"], "titles": ["topologicpy", "topologicpy", "topologicpy package", "topologicpy.ANN module", "topologicpy.Aperture module", "topologicpy.BVH module", "topologicpy.Cell module", "topologicpy.CellComplex module", "topologicpy.Cluster module", "topologicpy.Color module", "topologicpy.Context module", "topologicpy.DGL module", "topologicpy.Dictionary module", "topologicpy.Edge module", "topologicpy.EnergyModel module", "topologicpy.Face module", "topologicpy.Graph module", "topologicpy.Grid module", "topologicpy.Helper module", "topologicpy.Honeybee module", "topologicpy.Matrix module", "topologicpy.Neo4j module", "topologicpy.Plotly module", "topologicpy.Polyskel module", "topologicpy.PyG module", "topologicpy.Shell module", "topologicpy.Speckle module", "topologicpy.Sun module", "topologicpy.Topology module", "topologicpy.Vector module", "topologicpy.Vertex module", "topologicpy.Wire module", "topologicpy.version module"], "terms": {"welcom": 0, "rhyme": 0, "appl": 0, "pie": [0, 2, 22, 25], "i": [0, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31], "open": [0, 6, 15, 28, 30, 31], "sourc": [0, 2, 16, 23, 28], "python": [0, 3, 9, 12, 16, 22, 28], "3": [0, 3, 6, 7, 13, 14, 15, 16, 18, 22, 24, 28, 30, 31], "implement": 0, "which": [0, 3, 6, 7, 8, 9, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31], "revolution": 0, "wai": 0, "you": [0, 3, 8, 9, 14, 15, 16, 18, 28, 30, 31], "design": [0, 14], "space": [0, 14, 15, 16, 22, 24, 28], "build": [0, 6, 14, 16, 19, 31], "artefact": 0, "": [0, 3, 6, 7, 8, 13, 16, 17, 21, 25, 28, 31], "advanc": 0, "featur": [0, 3, 16, 24], "enabl": [0, 3], "creat": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31], "hierarch": [0, 16], "inform": [0, 16, 24], "rich": 0, "3d": [0, 8, 15, 28], "represent": [0, 19], "offer": 0, "unpreced": 0, "flexibl": 0, "control": [0, 3], "your": [0, 3, 9, 18, 23, 28], "process": [0, 14, 15, 16, 24, 25, 28, 31], "With": 0, "integr": 0, "geometri": [0, 2, 15, 16, 28, 31], "topologi": [0, 1, 2, 4, 5, 6, 8, 10, 14, 15, 16, 18, 19, 22, 26, 30, 31], "artifici": 0, "intellig": 0, "enrich": 0, "two": [0, 3, 6, 7, 13, 15, 16, 17, 20, 28, 29, 30, 31], "main": [0, 16], "strength": 0, "ar": [0, 3, 5, 6, 7, 8, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31], "its": [0, 6, 7, 12, 13, 15, 16, 23, 25, 28, 29, 30, 31], "support": [0, 28], "defeatur": 0, "encod": [0, 16], "mesh": [0, 15, 16, 26, 28], "By": 0, "simplifi": [0, 2, 8, 15, 16, 25, 31], "remov": [0, 6, 7, 12, 14, 15, 16, 25, 28, 31], "small": [0, 18], "unnecessari": 0, "detail": [0, 31], "need": [0, 16, 29, 30], "allow": [0, 16, 28], "faster": 0, "more": [0, 15, 16, 28, 31], "accur": 0, "while": [0, 28, 30, 31], "maintain": 0, "consist": 0, "thi": [0, 3, 6, 7, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31], "transform": [0, 2, 20, 28, 29], "low": [0, 15, 28, 31], "qualiti": 0, "heavi": [0, 15, 28], "bim": [0, 28], "high": [0, 15, 28, 31], "lightweight": 0, "readi": 0, "rigor": 0, "effortlessli": 0, "same": [0, 3, 6, 7, 8, 13, 14, 16, 18, 27, 28, 29, 30], "base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "element": [0, 9, 15, 28, 29], "avail": [0, 3, 15, 19, 22, 28], "commerci": [0, 14], "platform": 0, "cleanli": 0, "match": [0, 9, 16, 18, 22, 28], "exact": 0, "specif": [0, 3], "versatil": 0, "extend": [0, 2, 13], "entiti": [0, 21], "mix": 0, "dimension": [0, 2, 28], "structur": [0, 16, 28], "exampl": [0, 8, 15, 16, 18, 22, 28, 30, 31], "repres": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19, 25, 27, 28, 29, 31], "coher": 0, "line": [0, 2, 13, 16, 17, 22, 23, 24, 28, 30, 31], "can": [0, 3, 5, 6, 7, 8, 9, 12, 13, 15, 16, 17, 18, 22, 24, 25, 28, 30, 31], "column": [0, 14, 16, 18], "beam": 0, "surfac": [0, 6, 14, 15, 18, 19, 25, 27, 28, 31], "wall": [0, 14, 16], "slab": [0, 16], "volum": [0, 2, 6, 7, 18], "solid": [0, 28], "even": 0, "non": [0, 7, 15, 21, 30], "like": [0, 8, 15, 16, 31], "load": [0, 2, 3, 14], "effici": 0, "attach": [0, 16], "approach": [0, 31], "highli": 0, "compat": [0, 16], "simul": [0, 14], "graph": [0, 1, 2, 5, 21, 22, 24, 28], "make": [0, 8], "natur": 0, "fit": [0, 22], "machin": 0, "learn": [0, 3, 24], "gml": 0, "excit": 0, "new": [0, 13, 15, 16, 21, 28, 31], "branch": [0, 26], "vast": 0, "amount": [0, 15, 16, 31], "connect": [0, 2, 6, 13, 15, 16, 21, 22, 23, 28, 30, 31], "data": [0, 3, 8, 16, 22, 24, 26, 28], "extract": [0, 22], "valuabl": 0, "insight": 0, "quickli": 0, "algorithm": [0, 6, 7, 8, 15, 16, 24, 25, 28, 30, 31], "node": [0, 3, 16, 21, 24], "classif": [0, 3, 24], "take": [0, 15, 16, 28, 31], "next": [0, 15, 18, 31], "level": [0, 14, 16, 18, 28], "classifi": [0, 6, 24], "typologi": 0, "predict": [0, 3, 22, 24], "associ": [0, 12, 16, 22, 28], "complet": [0, 16, 21, 30], "miss": 0, "empow": 0, "leverag": 0, "histor": 0, "knowledg": 0, "embed": [0, 8, 12, 28], "databas": [0, 21], "decis": 0, "about": 0, "current": [0, 18, 22, 27], "project": [0, 2, 15, 16, 22, 25, 28, 30, 31], "streamlin": 0, "workflow": 0, "enhanc": 0, "product": [0, 23, 29], "achiev": 0, "goal": 0, "greater": 0, "precis": [0, 3], "experi": 0, "comprehens": 0, "well": [0, 16, 25, 31], "applic": [0, 8, 28, 31], "protocol": 0, "interfac": 0, "enjoi": 0, "freedom": 0, "cut": 0, "edg": [0, 1, 2, 6, 7, 8, 15, 16, 17, 21, 22, 24, 25, 27, 28, 30, 31], "c": [0, 15, 18, 28, 30, 31], "manifold": [0, 7, 15, 25, 30, 31], "nmt": 0, "core": [0, 15, 16, 28, 31], "technologi": 0, "cascad": 0, "bind": 0, "interact": 0, "easili": 0, "accomplish": 0, "through": [0, 3, 6, 7, 25, 30, 31], "command": 0, "script": [0, 22], "visual": [0, 22], "flow": [0, 16], "program": [0, 19], "vdfp": 0, "plugin": 0, "popular": 0, "cloud": 0, "streamlit": 0, "variou": 0, "perform": [0, 2, 3, 24, 28], "task": [0, 3, 24], "seamlessli": 0, "custom": 0, "emb": 0, "own": 0, "hous": 0, "plu": [0, 8, 14], "includ": [0, 3, 6, 8, 9, 14, 15, 16, 18, 22, 24, 25, 27, 28, 30, 31], "sever": [0, 15, 28], "industri": 0, "standard": [0, 8, 15], "method": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "transport": 0, "ifc": [0, 16, 28], "obj": [0, 28], "brep": [0, 16, 22, 28], "hbjson": 0, "csv": [0, 3, 16, 24], "serial": [0, 16], "servic": 0, "speckl": [0, 1, 2], "philosophi": 0, "licens": 0, "agplv3": 0, "vision": 0, "minim": [0, 16, 24], "increment": 0, "cost": [0, 16], "ensur": [0, 3, 18, 30], "return": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "invest": 0, "outright": 0, "noth": 0, "ever": 0, "trap": 0, "expens": 0, "subscript": 0, "share": [0, 16, 28, 30], "app": 0, "eas": 0, "give": 0, "choos": [0, 18], "between": [0, 3, 13, 15, 16, 22, 24, 25, 28, 29, 30, 31], "local": [0, 16, 24], "option": [0, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31], "peac": 0, "mind": 0, "focu": 0, "what": [0, 28], "matter": 0, "most": [0, 9, 14, 16, 22, 28], "join": [0, 2, 16, 28], "revolut": 0, "try": 0, "todai": 0, "see": [0, 3, 4, 6, 7, 8, 9, 10, 15, 16, 22, 25, 27, 28, 30, 31], "differ": [0, 2, 15, 25, 28, 31], "yourself": 0, "pip": 0, "upgrad": 0, "depend": [0, 6, 15, 25, 31], "follow": [0, 3, 6, 7, 13, 14, 15, 16, 18, 24, 28, 29, 31], "automat": [0, 15, 16, 28], "from": [0, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31], "expand": 0, "view": [0, 15, 16], "numpi": [0, 22, 28], "http": [0, 3, 6, 7, 8, 9, 13, 15, 16, 22, 25, 27, 28, 30, 31], "org": [0, 3, 6, 7, 8, 9, 15, 16, 25, 27, 28, 30, 31], "1": [0, 3, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31], "24": [0, 6], "0": [0, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31], "scipi": 0, "10": [0, 3, 6, 7, 15, 16, 22, 24, 25, 27, 28, 30, 31], "plotli": [0, 1, 2, 3, 9, 16, 24, 28], "com": [0, 3, 6, 9, 13, 15, 16, 22, 25, 27, 28, 31], "5": [0, 3, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 21, 22, 24, 25, 27, 28, 30, 31], "11": [0, 7], "ifcopenshel": 0, "7": [0, 6, 7, 15, 28, 30, 31], "9": [0, 7, 15, 24, 28], "ipfshttpclient": 0, "pypi": 0, "web3": 0, "web3pi": 0, "readthedoc": [0, 16], "io": [0, 16], "en": [0, 3, 6, 7, 8, 9, 15, 16, 25, 27, 28, 30, 31], "stabl": 0, "30": [0, 3, 19, 27], "openstudio": [0, 14], "net": [0, 16, 28], "4": [0, 3, 6, 7, 8, 15, 16, 28, 30, 31], "topologic_cor": [0, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 19, 21, 22, 25, 28, 30, 31], "6": [0, 3, 6, 7, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31], "lbt": 0, "ladybug": 0, "25": [0, 6, 14, 16, 17, 19, 22, 25, 28], "161": 0, "honeybe": [0, 1, 2], "12": [0, 3, 7, 28], "energi": [0, 14], "91": [0, 16, 28], "49": 0, "json": [0, 16, 22, 28], "doc": [0, 9, 15, 28], "html": [0, 15, 16, 28], "2": [0, 3, 6, 7, 8, 13, 15, 16, 18, 22, 23, 25, 28, 30, 31], "py2neo": 0, "2021": 0, "pyvisgraph": [0, 2, 16], "github": [0, 6, 13, 15, 16, 25, 31], "taipanrex": 0, "specklepi": 0, "specklesystem": 0, "panda": [0, 22], "pydata": 0, "8": [0, 3, 6, 7, 14, 15, 16, 22, 24, 27, 28, 30, 31], "dgl": [0, 1, 2, 16, 22], "dmlc": 0, "favourit": 0, "editor": 0, "jupyt": [0, 16, 22], "notebook": [0, 16, 22, 24, 28], "recommend": 0, "type": [0, 2, 3, 6, 8, 9, 10, 12, 14, 16, 19, 21, 22, 24, 26, 28, 29, 30, 31], "import": [0, 22, 28], "found": [0, 3, 6, 8, 12, 13, 14, 15, 16, 19, 21, 22, 24, 25, 28, 30, 31], "If": [0, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31], "wish": [0, 3, 8, 14, 16, 18], "actual": [0, 3, 8, 15, 16, 22, 24], "jabi": 0, "w": [0, 10, 14, 28], "2024": 0, "doi": 0, "5281": 0, "zenodo": 0, "11555172": 0, "To": [0, 18, 21], "one": [0, 3, 4, 5, 8, 13, 15, 16, 17, 18, 24, 25, 28, 30, 31], "paper": 0, "defin": [0, 3, 10, 13, 15, 16, 24, 25, 28, 29, 31], "chatzivasileiadi": 0, "A": [0, 3, 6, 7, 8, 9, 12, 13, 15, 16, 17, 19, 22, 24, 25, 27, 28, 29, 30, 31], "explor": 0, "reason": 0, "semant": 0, "In": [0, 3, 16, 22, 29, 31], "eloi": 0, "d": [0, 15, 18, 30], "leit": 0, "viana": 0, "f": 0, "morai": 0, "j": [0, 16, 28], "vieira": 0, "vaz": 0, "ed": 0, "formal": 0, "pp": 0, "277": 0, "285": 0, "springer": 0, "intern": [0, 3, 6, 7, 15, 16, 25, 30, 31], "publish": 0, "1007": 0, "978": 0, "030": 0, "57509": 0, "0_25": 0, "Or": 0, "bib": 0, "format": [0, 9, 16, 21, 22, 28], "refer": [0, 6], "manag": [0, 16, 28], "misc": 0, "jabi2024": 0, "author": [0, 28], "wassim": 0, "11555173": 0, "titl": [0, 3, 22, 24, 28], "url": [0, 21, 26], "year": [0, 27], "inbook": 0, "jabi2021": 0, "abstract": 0, "conceptu": 0, "framework": 0, "concept": 0, "architect": 0, "reflect": 0, "befor": [0, 3, 6, 21, 28], "complex": 0, "set": [0, 2, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31], "we": 0, "summar": 0, "below": [0, 16, 28, 29], "relat": [0, 16], "work": [0, 6, 14, 15, 16, 18, 25, 28, 31], "late": 0, "1980": 0, "describ": [0, 28], "class": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "discuss": 0, "also": [0, 6, 15, 16, 24, 28, 31], "report": [0, 3, 14], "usabl": 0, "workshop": 0, "wa": [0, 3, 6, 15, 16, 22, 25, 28, 31], "conduct": [0, 18, 28], "valid": [0, 3, 14, 16, 24], "evalu": [0, 3, 8], "methodologi": 0, "collect": [0, 3], "qualit": 0, "illustr": 0, "fundament": 0, "shift": 0, "pursu": 0, "fidel": 0, "form": [0, 6, 8, 15, 23, 25, 28, 30, 31], "intent": 0, "aikaterini": 0, "citi": 0, "cham": 0, "sara": 0, "david": 0, "franklim": 0, "jorg": 0, "isbn": 0, "journal": 0, "page": [0, 16], "link": 0, "cardiff": 0, "univers": 0, "ucl": 0, "packag": [0, 1], "index": [0, 2, 13, 16, 18, 22, 28, 30], "modul": [0, 1], "search": [0, 16, 22, 28, 30, 31], "submodul": 1, "ann": [1, 2], "apertur": [1, 2, 6, 7, 10, 14, 16, 19, 28], "bvh": [1, 2], "cell": [1, 2, 7, 8, 14, 19, 28, 30], "cellcomplex": [1, 2, 8, 14, 19, 28, 30], "cluster": [1, 2, 6, 7, 13, 15, 16, 17, 19, 25, 28, 30, 31], "color": [1, 2, 3, 14, 16, 22, 24, 28], "context": [1, 2, 4, 16, 28], "dictionari": [1, 2, 3, 6, 7, 8, 13, 14, 15, 16, 17, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31], "energymodel": [1, 2], "face": [1, 2, 6, 7, 8, 13, 14, 16, 17, 19, 22, 25, 27, 28, 30, 31], "graphqueueitem": [1, 2, 16], "mergingprocess": [1, 2, 16, 28], "workerprocess": [1, 2, 16, 28], "workerprocesspool": [1, 2, 16, 28], "grid": [1, 2, 19, 22, 24, 25, 31], "helper": [1, 2], "matrix": [1, 2, 3, 16, 22, 24, 28, 29, 30], "neo4j": [1, 2], "polyskel": [1, 2, 6, 15, 25, 31], "debug": [1, 2, 23], "line2": [1, 2, 23], "linesegment2": [1, 2, 23], "point2": [1, 2, 23], "ray2": [1, 2, 23], "subtre": [1, 2, 23], "set_debug": [1, 2, 23], "skeleton": [1, 2, 6, 15, 23, 25, 31], "pyg": [1, 2], "customgraphdataset": [1, 2, 24], "shell": [1, 2, 6, 7, 8, 15, 27, 28, 30], "sun": [1, 2], "queueitem": [1, 2, 28], "sinkitem": [1, 2, 28], "vector": [1, 2, 6, 7, 8, 13, 15, 16, 22, 25, 27, 28, 30, 31], "vertex": [1, 2, 6, 7, 8, 13, 15, 16, 17, 21, 22, 25, 27, 28, 29, 31], "wire": [1, 2, 6, 7, 8, 13, 15, 16, 25, 27, 28, 30], "version": [1, 2, 15, 16, 18, 24, 25, 28, 31], "content": [1, 10, 16, 28], "datasetbycsvpath": [2, 3, 24], "datasetbysamplenam": [2, 3], "datasetsamplenam": [2, 3], "datasetsplit": [2, 3, 24], "figur": [2, 3, 16, 22, 24, 27, 28], "hyperparamet": [2, 3, 24], "hyperparametersbysamplenam": [2, 3], "initi": [2, 3, 15, 24, 28, 31], "metric": [2, 3, 16], "modeldata": [2, 3, 24], "save": [2, 3, 14, 16, 24], "test": [2, 3, 16, 22, 24, 31], "train": [2, 3, 16, 22, 24], "bytopologycontext": [2, 4], "aabb": [2, 5], "contain": [2, 3, 5, 6, 7, 8, 9, 15, 16, 17, 18, 22, 24, 28, 29, 30, 31], "intersect": [2, 5, 6, 13, 23, 28, 31], "bvhnode": [2, 5], "bytopologi": [2, 5, 8, 14, 16], "clash": [2, 5], "meshobject": [2, 5], "querybytopologi": [2, 5], "area": [2, 6, 15, 18, 28, 31], "box": [2, 5, 6, 7, 13, 28, 31], "byfac": [2, 6, 7, 25], "byoffset": [2, 6, 15, 31], "byshel": [2, 6, 15], "bythickenedfac": [2, 6], "bythickenedshel": [2, 6], "bywir": [2, 6, 7, 15, 25], "bywiresclust": [2, 6, 7, 15, 25], "capsul": [2, 6], "compact": [2, 6, 15, 16], "cone": [2, 6], "containmentstatu": [2, 6], "cylind": [2, 6], "decompos": [2, 6, 7], "dodecahedron": [2, 6], "egg": [2, 6], "externalboundari": [2, 6, 7, 13, 15, 25, 28, 30, 31], "hyperboloid": [2, 6], "icosahedron": [2, 6], "internalboundari": [2, 6, 15, 25], "internalvertex": [2, 6, 15, 28], "isonboundari": [2, 6, 25], "octahedron": [2, 6, 7], "paraboloid": [2, 6, 25], "pipe": [2, 6], "prism": [2, 6, 7], "removecollinearedg": [2, 6, 7, 15, 25, 28, 31], "roof": [2, 6, 15, 25, 31], "sphere": [2, 6, 7], "surfacearea": [2, 6], "tetrahedron": [2, 6], "toru": [2, 6], "vertic": [2, 5, 6, 7, 8, 13, 14, 15, 16, 17, 21, 22, 23, 25, 27, 28, 29, 30, 31], "bycel": [2, 7], "bycellsclust": [2, 7], "byfacesclust": [2, 7, 25], "delaunai": [2, 7, 15, 25, 28], "externalfac": [2, 7], "internalfac": [2, 7], "nonmanifoldfac": [2, 7], "voronoi": [2, 7, 25], "byformula": [2, 8], "dbscan": [2, 8], "freecel": [2, 8], "freeedg": [2, 8], "freefac": [2, 8], "freeshel": [2, 8], "freetopologi": [2, 8, 30], "freevertic": [2, 8], "freewir": [2, 8], "highesttyp": [2, 8, 28], "k_mean": [2, 8], "mergecel": [2, 8], "mysticros": [2, 8], "bycssnamedcolor": [2, 9], "byhex": [2, 9], "byvalueinrang": [2, 9, 16], "cssnamedcolor": [2, 9], "plotlycolor": [2, 9], "rgbtohex": [2, 9], "bytopologyparamet": [2, 10], "bykeyvalu": [2, 12], "bykeysvalu": [2, 12], "bymergeddictionari": [2, 12], "bypythondictionari": [2, 12], "kei": [2, 3, 6, 7, 8, 12, 13, 14, 15, 16, 17, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31], "listattributevalu": [2, 12], "pythondictionari": [2, 12], "removekei": [2, 12], "setvalueatkei": [2, 12], "valueatkei": [2, 12], "valu": [2, 3, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 28, 30, 31], "angl": [2, 6, 7, 13, 14, 15, 16, 20, 22, 25, 27, 28, 29, 31], "bisect": [2, 13, 29], "byfacenorm": [2, 13], "byoffset2d": [2, 13], "bystartvertexendvertex": [2, 13], "byvertic": [2, 13, 15, 29, 31], "byverticesclust": [2, 13, 15, 31], "direct": [2, 6, 7, 8, 13, 14, 15, 16, 25, 27, 28, 29, 30, 31], "endvertex": [2, 13, 31], "equation2d": [2, 13], "extendtoedg": [2, 13], "intersect2d": [2, 13], "iscollinear": [2, 13, 29], "iscoplanar": [2, 13, 15], "isparallel": [2, 13, 29], "length": [2, 3, 6, 7, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31], "normal": [2, 6, 13, 15, 16, 18, 23, 24, 28, 29, 30, 31], "normaledg": [2, 13, 15], "parameteratvertex": [2, 13], "revers": [2, 6, 13, 15, 16, 18, 29, 31], "setlength": [2, 13], "startvertex": [2, 13, 31], "trim": [2, 13, 15, 18], "trimbyedg": [2, 13], "vertexbydist": [2, 13, 31], "vertexbyparamet": [2, 13, 15, 31], "byosmpath": [2, 14], "columnnam": [2, 14], "defaultconstructionset": [2, 14], "defaultscheduleset": [2, 14], "exporttogbxml": [2, 14], "exporttoosm": [2, 14], "gbxmlstring": [2, 14], "queri": [2, 5, 14, 15, 21, 28, 31], "reportnam": [2, 14], "rownam": [2, 14], "run": [2, 3, 14, 15, 16, 21, 22, 26, 28, 31], "spacecolor": [2, 14], "spacedictionari": [2, 14], "spacetypenam": [2, 14], "spacetyp": [2, 14, 16], "sqlfile": [2, 14], "tablenam": [2, 14], "unit": [2, 7, 14, 22, 28], "addinternalboundari": [2, 15], "addinternalboundariesclust": [2, 15], "boundingrectangl": [2, 15, 31], "byedg": [2, 15, 31], "byedgesclust": [2, 15, 31], "byoffsetarea": [2, 15, 31], "bythickenedwir": [2, 15, 25], "circl": [2, 6, 8, 15, 16, 25, 27, 31], "compassangl": [2, 15, 29], "einstein": [2, 15, 31], "ellips": [2, 15, 31], "exteriorangl": [2, 15, 31], "facingtoward": [2, 15], "fillet": [2, 15, 31], "harmon": [2, 15], "interiorangl": [2, 15, 31], "invert": [2, 15, 31], "isovist": [2, 15], "medialaxi": [2, 15], "northarrow": [2, 15], "planar": [2, 6, 15, 25, 28, 31], "planeequ": [2, 15, 30], "rectangl": [2, 15, 23, 25, 31], "rectanglebyplaneequ": [2, 15], "squar": [2, 3, 15, 24, 31], "squircl": [2, 15, 31], "star": [2, 15, 31], "trapezoid": [2, 15, 31], "triangul": [2, 6, 7, 15, 25, 28], "trimbywir": [2, 15], "vertexparamet": [2, 15], "addedg": [2, 16], "addvertex": [2, 16], "addvertic": [2, 16], "adjacencydictionari": [2, 16], "adjacencylist": [2, 16], "adjacencymatrix": [2, 16], "adjacentvertic": [2, 16], "allpath": [2, 16], "averageclusteringcoeffici": [2, 16], "botgraph": [2, 16], "botstr": [2, 16], "betweenesscentr": [2, 16], "byadjacencymatrix": [2, 16], "byadjacencymatrixcsvpath": [2, 16], "bybotgraph": [2, 16], "bybotpath": [2, 16], "bycsvpath": [2, 16], "bydgcnnfil": [2, 16], "bydgcnnpath": [2, 16], "bydgcnnstr": [2, 16], "byifcfil": [2, 16, 28], "byifcpath": [2, 16, 28], "bymeshdata": [2, 16], "byverticesedg": [2, 16], "chromaticnumb": [2, 16], "closenesscentr": [2, 16], "containsedg": [2, 16], "containsvertex": [2, 16], "contractedg": [2, 16], "degre": [2, 6, 7, 13, 14, 15, 16, 19, 20, 25, 28, 29, 30, 31], "degreesequ": [2, 16], "densiti": [2, 8, 15, 16], "depth": [2, 16, 28], "depthmap": [2, 16], "diamet": [2, 16], "distanc": [2, 6, 13, 15, 16, 17, 20, 23, 25, 28, 30, 31], "exporttoadjacencymatrixcsv": [2, 16], "exporttobot": [2, 16], "exporttocsv": [2, 16], "exporttogexf": [2, 16], "exporttojson": [2, 16, 28], "flatten": [2, 16, 18, 28], "globalclusteringcoeffici": [2, 16], "guid": [2, 16, 28], "incomingedg": [2, 16, 30], "incomingvertic": [2, 16], "isbipartit": [2, 16], "iscomplet": [2, 16], "iserdoesgallai": [2, 16], "istre": [2, 16], "isolatedvertic": [2, 16], "jsondata": [2, 16], "jsonstr": [2, 16, 28], "localclusteringcoeffici": [2, 16], "longestpath": [2, 16], "maximumdelta": [2, 16], "maximumflow": [2, 16], "meshdata": [2, 16], "metricdist": [2, 16], "minimumdelta": [2, 16], "minimumspanningtre": [2, 16], "navigationgraph": [2, 16], "nearestvertex": [2, 16, 30], "networkxgraph": [2, 16], "order": [2, 6, 16, 18, 20, 22, 23, 24, 28, 29, 30], "outgoingedg": [2, 16, 30], "outgoingvertic": [2, 16], "pagerank": [2, 16], "path": [2, 3, 14, 16, 19, 22, 24, 27, 28, 31], "removeedg": [2, 16, 28], "removevertex": [2, 16], "setdictionari": [2, 16, 28], "shortestpath": [2, 16], "show": [2, 16, 22, 23, 24, 28], "size": [2, 15, 16, 22, 24, 28, 31], "topologicaldist": [2, 16], "tree": [2, 5, 16], "vertexdegre": [2, 16], "visibilitygraph": [2, 16], "wait_messag": [2, 16, 28], "startprocess": [2, 16, 28], "stopprocess": [2, 16, 28], "edgesbydist": [2, 17], "edgesbyparamet": [2, 17], "verticesbydist": [2, 17], "verticesbyparamet": [2, 17], "closestmatch": [2, 18], "iter": [2, 8, 15, 16, 18, 29, 31], "makeuniqu": [2, 18], "mergebythreshold": [2, 18], "posit": [2, 6, 7, 14, 15, 18, 27, 28, 29, 31], "repeat": [2, 18, 31], "sort": [2, 16, 18, 28, 30], "transpos": [2, 18, 20, 28], "constructionsetbyidentifi": [2, 19], "constructionset": [2, 19], "exporttohbjson": [2, 19], "modelbytopologi": [2, 19], "programtypebyidentifi": [2, 19], "programtyp": [2, 19], "string": [2, 8, 9, 12, 14, 15, 16, 18, 19, 20, 21, 22, 24, 28, 29, 30, 31], "add": [2, 15, 16, 19, 20, 22, 28, 29], "byrot": [2, 20], "byscal": [2, 20], "bytransl": [2, 20], "multipli": [2, 20, 29], "subtract": [2, 20, 29], "bygraph": [2, 21], "byparamet": [2, 21], "exporttograph": [2, 21], "reset": [2, 21], "setgraph": [2, 21], "addcolorbar": [2, 22], "colorscal": [2, 3, 9, 16, 22, 28], "databydgl": [2, 22], "databygraph": [2, 22], "databytopologi": [2, 22], "exporttoimag": [2, 22], "figurebyconfusionmatrix": [2, 22], "figurebycorrel": [2, 22], "figurebydata": [2, 22], "figurebydatafram": [2, 22], "figurebyjsonfil": [2, 22], "figurebyjsonpath": [2, 22], "figurebymatrix": [2, 22], "figurebypiechart": [2, 22], "figurebytopologi": [2, 22], "figureexporttojson": [2, 22], "figureexporttopdf": [2, 22], "figureexporttopng": [2, 22], "figureexporttosvg": [2, 22], "render": [2, 16, 22, 24, 28], "setcamera": [2, 22], "cross": [2, 3, 23, 24, 27, 29], "dot": [2, 22, 23, 29], "height": [2, 3, 6, 7, 14, 16, 22, 23, 24, 28, 31], "sink": [2, 16, 23, 28], "process_al": [2, 24], "accuraci": [2, 3, 22, 24], "confusionmatrix": [2, 24], "datasetgraphlabel": [2, 24], "mse": [2, 3, 24], "model": [2, 3, 14, 19, 24], "modelclassifi": [2, 24], "modelload": [2, 24], "modelpredict": [2, 24], "modelsav": [2, 24], "modeltest": [2, 24], "modeltrain": [2, 24], "optim": [2, 15, 24, 28, 31], "bydisjointfac": [2, 25], "hyperbolicparaboloidcirculardomain": [2, 25], "hyperbolicparaboloidrectangulardomain": [2, 25], "isclos": [2, 25, 31], "selfmerg": [2, 25, 28], "branchesbystream": [2, 26], "clientbyurl": [2, 26], "commitbyid": [2, 26], "commitsbybranch": [2, 26], "object": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31], "send": [2, 26, 28], "specklebranchbyid": [2, 26], "specklecommitbyurl": [2, 26], "specklecommitdelet": [2, 26], "speckleglobalsbystream": [2, 26], "specklesendobject": [2, 26], "specklestreambyid": [2, 26], "specklestreambyurl": [2, 26], "streamsbycli": [2, 26], "mesh_to_speckl": [2, 26], "mesh_to_speckle_mesh": [2, 26], "altitud": [2, 27, 29], "autumnequinox": [2, 27], "azimuth": [2, 27, 29], "diagram": [2, 27], "pathbyd": [2, 27], "pathbyhour": [2, 27], "springequinox": [2, 27], "summersolstic": [2, 27], "sunris": [2, 27], "sunset": [2, 27], "verticesbyd": [2, 27], "verticesbyhour": [2, 27], "wintersolstic": [2, 27], "id": [2, 16, 19, 28], "sinkkei": [2, 28], "sinkvalu": [2, 28], "sink_str": [2, 28], "addapertur": [2, 28], "addapertures_old": [2, 28], "addcont": [2, 28], "adddictionari": [2, 28], "adjacenttopologi": [2, 28], "analyz": [2, 28], "aperturetopologi": [2, 28], "brepstr": [2, 28], "boolean": [2, 18, 24, 28], "boundingbox": [2, 28], "bybimfil": [2, 28], "bybimpath": [2, 28], "bybimstr": [2, 28], "bybrepfil": [2, 28], "bybreppath": [2, 28], "bybrepstr": [2, 28], "bydxffil": [2, 28], "bydxfpath": [2, 28], "bygeometri": [2, 28], "bygeometry_old": [2, 28], "byjsondictionari": [2, 28], "byjsonfil": [2, 28], "byjsonpath": [2, 28], "byjsonstr": [2, 28], "byobjfil": [2, 28], "byobjpath": [2, 28], "byobjstr": [2, 28], "byocctshap": [2, 28], "byxyzfil": [2, 28], "byxyzpath": [2, 28], "centerofmass": [2, 28], "centroid": [2, 8, 13, 16, 25, 28, 30, 31], "cleanup": [2, 28], "clusterfac": [2, 28], "clusterfaces_orig": [2, 28], "convexhul": [2, 28, 31], "copi": [2, 28], "divid": [2, 24, 27, 28], "explod": [2, 28], "exporttobim": [2, 28], "exporttobrep": [2, 28], "exporttodxf": [2, 28], "exporttoobj": [2, 28], "filter": [2, 16, 24, 28], "fix": [2, 28], "impos": [2, 28], "imprint": [2, 28], "isinst": [2, 28], "isplanar": [2, 28], "issam": [2, 28, 29], "merg": [2, 7, 8, 12, 15, 16, 18, 25, 28], "mergeal": [2, 28], "nonplanarfac": [2, 28], "objstr": [2, 28], "occtshap": [2, 28], "openedg": [2, 28], "openfac": [2, 28], "openvertic": [2, 28], "orient": [2, 6, 28, 31], "place": [2, 6, 7, 8, 13, 15, 25, 28, 31], "removecont": [2, 28], "removecoplanarfac": [2, 28], "removefac": [2, 28], "removefacesbyselector": [2, 28], "removevertic": [2, 28], "replacevertic": [2, 28], "rotat": [2, 13, 15, 16, 20, 28, 31], "rotatebyeulerangl": [2, 28], "rotatebyquaternion": [2, 28], "scale": [2, 3, 9, 16, 20, 22, 28], "selectsubtopologi": [2, 28], "setsnapshot": [2, 28], "sharededg": [2, 28], "sharedfac": [2, 28], "sharedtopologi": [2, 28], "sharedvertic": [2, 28], "sharedwir": [2, 28], "slice": [2, 28], "snapshot": [2, 28], "sortbyselector": [2, 28], "spin": [2, 28], "subtopologi": [2, 8, 16, 28, 30], "supertopologi": [2, 28, 30], "symdif": [2, 28], "symmetricdiffer": [2, 28], "taper": [2, 28], "transferdictionari": [2, 7, 8, 15, 25, 28, 31], "transferdictionariesbyselector": [2, 28], "translat": [2, 20, 28], "translatebydirectiondist": [2, 28], "twist": [2, 6, 28], "typeasstr": [2, 28], "typeid": [2, 28], "uuid": [2, 28], "unflatten": [2, 28], "union": [2, 28], "view3d": [2, 28], "xor": [2, 28], "averag": [2, 16, 18, 29, 30], "azimuthaltitud": [2, 29], "byazimuthaltitud": [2, 29], "bycoordin": [2, 29, 30], "coordin": [2, 15, 16, 21, 28, 29, 30], "down": [2, 29], "east": [2, 15, 29], "isantiparallel": [2, 29], "magnitud": [2, 29], "north": [2, 14, 15, 27, 29], "northeast": [2, 29], "northwest": [2, 29], "setmagnitud": [2, 29], "south": [2, 29], "southeast": [2, 29], "southwest": [2, 29], "sum": [2, 29], "transformationmatrix": [2, 29], "up": [2, 6, 7, 8, 15, 16, 22, 25, 28, 29, 31], "west": [2, 29], "xaxi": [2, 16, 22, 28, 29], "yaxi": [2, 15, 16, 22, 28, 29], "zaxi": [2, 16, 22, 28, 29], "arecollinear": [2, 30], "areipsilater": [2, 30], "areipsilateralclust": [2, 30], "areonsamesid": [2, 30], "areonsamesideclust": [2, 30], "clockwise2d": [2, 30], "counterclockwise2d": [2, 30], "enclosingcel": [2, 30], "fuse": [2, 30], "interpolatevalu": [2, 30], "iscoincid": [2, 30], "isextern": [2, 30], "isintern": [2, 30], "isperipher": [2, 30], "origin": [2, 6, 7, 8, 13, 15, 17, 25, 27, 28, 29, 30, 31], "perpendiculardist": [2, 30], "point": [2, 5, 6, 8, 15, 16, 19, 22, 23, 24, 27, 28, 29, 30, 31], "x": [2, 3, 8, 13, 15, 16, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31], "y": [2, 3, 8, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31], "z": [2, 6, 7, 8, 14, 15, 16, 18, 20, 21, 22, 25, 27, 28, 29, 30, 31], "arc": [2, 15, 16, 22, 25, 31], "arcbyedg": [2, 31], "close": [2, 6, 9, 15, 16, 25, 28, 30, 31], "concavehul": [2, 31], "cycl": [2, 31], "ellipseal": [2, 31], "interpol": [2, 15, 30, 31], "ismanifold": [2, 31], "issimilar": [2, 31], "miter": [2, 31], "orientedg": [2, 31], "spiral": [2, 31], "split": [2, 3, 24, 31], "startendvertic": [2, 31], "vertexdist": [2, 31], "static": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31], "tasktyp": 3, "descript": [3, 6, 7, 8, 12, 15, 25, 26, 31], "dataset": [3, 24], "accord": [3, 16, 18, 21, 24, 28], "input": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31], "file": [3, 14, 16, 19, 22, 24, 28], "paramet": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31], "str": [3, 6, 7, 8, 9, 12, 13, 14, 15, 16, 18, 19, 21, 22, 24, 25, 28, 30, 31], "The": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31], "folder": [3, 14, 16, 24], "necessari": [3, 24], "yml": [3, 24], "regress": [3, 24], "default": [3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31], "keep": 3, "scikit": 3, "bunch": 3, "descr": 3, "sklearn": 3, "util": 3, "_bunch": 3, "name": [3, 9, 14, 15, 16, 19, 21, 22, 24, 28, 31], "sampl": [3, 15, 22], "breast_canc": 3, "california_h": 3, "digit": [3, 22], "iri": 3, "wine": 3, "sci": 3, "kit": 3, "list": [3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31], "testratio": 3, "randomst": [3, 24], "42": [3, 24], "ratio": [3, 14, 16, 22, 24, 28, 31], "target": [3, 16, 22, 28], "float": [3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31], "reserv": 3, "unseen": 3, "int": [3, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31], "us": [3, 6, 7, 8, 9, 13, 14, 15, 16, 18, 21, 22, 24, 25, 27, 28, 30, 31], "reproduc": [3, 24], "result": [3, 6, 7, 8, 13, 15, 16, 20, 22, 24, 25, 28, 29, 31], "when": [3, 15, 16, 20, 28, 31], "integ": [3, 9, 12, 15, 16, 27, 28, 31], "shuffl": [3, 24], "mean": [3, 8, 9, 15, 16, 21, 22, 24, 28, 31], "everi": [3, 16], "time": [3, 8, 15, 16, 27, 28], "code": [3, 6, 13, 15, 16, 22, 25, 28, 31], "get": [3, 14, 21], "just": [3, 16], "randomli": 3, "pick": 3, "number": [3, 6, 7, 8, 9, 13, 15, 16, 18, 22, 23, 24, 25, 27, 28, 30, 31], "specifi": [3, 6, 8, 9, 15, 16, 17, 22, 23, 24, 25, 28, 29, 30, 31], "none": [3, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31], "random": [3, 16, 24], "x_train": 3, "x_test": 3, "y_train": 3, "y_test": 3, "width": [3, 6, 7, 15, 16, 22, 24, 25, 28, 31], "900": [3, 16], "600": [3, 22], "templat": [3, 14], "viridi": [3, 9, 16, 22, 28], "colorsampl": [3, 22], "For": [3, 8, 9, 15, 16, 18, 22, 28, 31], "confus": [3, 8, 22, 24], "loss": [3, 22, 24], "mae": [3, 24], "desir": [3, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31], "pixel": [3, 16, 22, 24, 28], "scatter": [3, 22, 24], "plot": 3, "ggplot2": 3, "seaborn": 3, "simple_whit": 3, "plotly_whit": 3, "plotly_dark": 3, "present": [3, 24], "xgridoff": 3, "ygridoff": 3, "gridon": 3, "e": [3, 8, 9, 16, 18, 22, 24, 28, 29, 30, 31], "g": [3, 8, 9, 16, 22, 24, 28], "plasma": [3, 9, 16, 22, 28], "full": [3, 9, 16, 22, 28, 31], "builtin": [3, 9, 16, 22, 28], "discret": [3, 22], "displai": [3, 16, 21, 22, 24, 28], "correspond": [3, 8, 12], "untitl": [3, 22], "validationratio": 3, "hiddenlay": 3, "learningr": 3, "001": [3, 6, 15, 16, 24, 25, 28, 31], "epoch": [3, 22, 24], "batchsiz": 3, "patienc": 3, "earlystop": 3, "true": [3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31], "crossvalidationtyp": 3, "holdout": [3, 24], "kfold": 3, "interv": [3, 27], "mantissa": [3, 6, 7, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31], "either": [3, 8, 13, 16], "case": [3, 6, 7, 8, 13, 15, 16, 20, 22, 24, 25, 28, 29, 30, 31], "insensit": [3, 6, 7, 8, 13, 15, 16, 20, 22, 24, 25, 28, 29, 30, 31], "supervis": 3, "where": [3, 8, 9, 15, 16, 23, 25, 28, 29, 30, 31], "categor": [3, 16, 21], "label": [3, 16, 21, 22, 24, 28], "continu": [3, 31], "numer": [3, 8, 16, 18, 21, 22, 24, 28], "70": 3, "80": [3, 15, 16, 24, 25, 31], "left": [3, 5, 15, 16, 18, 22, 24, 25, 28, 31], "over": [3, 14, 16], "after": 3, "20": [3, 14, 16, 19, 22, 28], "hidden": [3, 24], "layer": [3, 24], "each": [3, 5, 6, 8, 13, 14, 15, 16, 18, 22, 24, 27, 28, 30, 31], "have": [3, 6, 7, 14, 16, 17, 18, 24, 28, 30, 31], "3hidden": 3, "first": [3, 6, 13, 15, 16, 18, 20, 28, 29, 30, 31], "16": [3, 6, 8, 15, 24, 25, 28, 31], "second": [3, 13, 15, 16, 20, 28, 29, 30, 31], "last": [3, 6, 13, 15, 18, 28, 29, 31], "rate": [3, 24], "wikipedia": [3, 6, 7, 8, 15, 16, 25, 27, 28, 30, 31], "wiki": [3, 6, 7, 8, 15, 16, 25, 27, 28, 30, 31], "learning_r": 3, "neural_network_": 3, "machine_learn": 3, "propag": 3, "network": [3, 24], "updat": [3, 22], "instead": [3, 15, 16, 22, 24, 25, 31], "singl": [3, 16, 25, 28, 30], "stochast": 3, "gradient": [3, 24], "descent": [3, 24], "entir": [3, 14], "batch": [3, 24], "mini": 3, "determin": [3, 6, 7, 15, 16, 18, 31], "improv": [3, 24], "stop": [3, 16, 28], "earli": 3, "bool": [3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31], "doe": [3, 13, 16, 21, 28], "certain": 3, "k": [3, 8, 12, 16, 24, 28, 31], "fold": [3, 24], "select": [3, 16, 24, 27, 28], "must": [3, 6, 7, 8, 13, 15, 16, 22, 24, 25, 28, 30, 31], "less": [3, 28, 31], "than": [3, 13, 15, 16, 25, 28, 30, 31], "total": [3, 16, 27, 28], "dict": [3, 6, 7, 12, 13, 14, 15, 16, 19, 24, 27, 28, 29, 30], "task_typ": 3, "test_ratio": 3, "validation_ratio": 3, "hidden_lay": 3, "batch_siz": [3, 24], "early_stop": 3, "random_st": 3, "cross_val_typ": 3, "suggest": 3, "sampledataset": 3, "k_fold": [3, 24], "an": [3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31], "_annmodel": 3, "state": 3, "pre": [3, 16, 22, 28], "modeliniti": 3, "neural": [3, 24], "given": [3, 14, 15, 23, 28, 31], "recal": 3, "f1": 3, "score": [3, 16], "els": [3, 14, 22], "error": [3, 5, 6, 8, 12, 13, 14, 15, 16, 21, 22, 24, 25, 28, 30, 31], "absolut": [3, 16, 22, 24, 31], "r": [3, 9, 24, 28], "training_loss": 3, "validation_loss": 3, "training_accuraci": 3, "onli": [3, 8, 15, 16, 18, 24, 27, 28, 29, 30, 31], "validation_accuraci": 3, "accuracyfor": 3, "training_ma": 3, "validation_ma": 3, "training_ms": 3, "validation_ms": 3, "training_r2": 3, "validation_r2": 3, "overwrit": [3, 14, 16, 19, 22, 24, 28], "fals": [3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31], "ani": [3, 6, 7, 8, 13, 14, 15, 16, 18, 19, 20, 22, 24, 25, 28, 29, 30, 31], "exist": [3, 16, 19, 21, 22, 23, 24, 28], "overwritten": [3, 16, 24], "otherwis": [3, 5, 6, 7, 8, 12, 13, 14, 15, 16, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31], "won": [3, 16, 19, 22, 24, 28], "t": [3, 16, 19, 22, 24, 28], "correctli": [3, 24, 31], "belong": [4, 16, 22, 28, 30], "min_point": 5, "max_point": 5, "other": [5, 8, 13, 15, 16, 18, 23, 28, 30], "right": [5, 16, 18, 22, 24, 25, 28], "silent": [5, 6, 7, 8, 12, 13, 15, 16, 21, 22, 25, 28, 30, 31], "individu": [5, 8, 30], "argument": [5, 8], "store": [5, 8, 13, 15, 16, 19, 21, 24, 28, 30, 31], "warn": [5, 6, 8, 12, 13, 15, 16, 21, 22, 25, 28, 30, 31], "messag": [5, 6, 8, 12, 13, 15, 16, 21, 22, 25, 26, 28, 30, 31], "print": [5, 6, 8, 12, 13, 14, 15, 16, 21, 22, 25, 28, 30, 31], "thei": [5, 6, 7, 8, 12, 13, 15, 16, 18, 21, 22, 24, 25, 28, 29, 30, 31], "broad": 5, "phase": 5, "axi": [5, 10, 13, 14, 15, 16, 20, 22, 23, 24, 25, 27, 28, 29, 31], "align": [5, 7, 15, 28, 29, 31], "bound": [5, 7, 15, 25, 28, 31], "toler": [5, 6, 7, 8, 13, 14, 15, 16, 17, 21, 22, 25, 28, 29, 30, 31], "0001": [5, 6, 7, 8, 13, 14, 15, 16, 17, 18, 21, 22, 25, 28, 29, 30, 31], "topologic_object": 5, "usid": [6, 7, 25, 27], "vside": [6, 7, 25, 27], "wside": [6, 7], "placement": [6, 7, 8, 13, 15, 25, 31], "center": [6, 7, 8, 13, 15, 16, 22, 25, 27, 28, 31], "locat": [6, 7, 8, 10, 13, 15, 16, 19, 22, 25, 27, 28, 31], "being": [6, 7, 8, 13, 15, 16, 24, 25, 28, 31], "side": [6, 7, 8, 15, 16, 22, 25, 27, 28, 30, 31], "along": [6, 7, 10, 13, 15, 16, 20, 25, 27, 28, 29, 31], "bottom": [6, 7, 15, 16, 22, 24, 25, 28, 31], "lowerleft": [6, 7, 8, 15, 25, 31], "It": [6, 7, 8, 13, 15, 16, 22, 24, 25, 27, 28, 30, 31], "offset": [6, 13, 15, 17, 25, 31], "mai": [6, 16, 22, 24, 28, 31], "fail": 6, "self": [6, 24, 28, 30], "alwai": [6, 15, 28], "check": [6, 24], "succe": 6, "extern": [6, 7, 13, 15, 25, 28, 30, 31], "boundari": [6, 7, 13, 15, 16, 25, 28, 30, 31], "empti": [6, 15, 21, 28], "thick": [6, 16, 22, 28], "bothsid": [6, 13], "thicken": [6, 15, 25], "loft": [6, 7, 25], "opposit": 6, "rais": 6, "except": 6, "do": [6, 14, 16, 23], "radiu": [6, 7, 8, 15, 16, 25, 27, 31], "vsidesend": 6, "vsidesmiddl": 6, "shape": [6, 15, 17, 25, 27, 28, 31], "hemispher": 6, "end": [6, 8, 13, 14, 15, 16, 25, 27, 28, 29, 30, 31], "segment": [6, 13, 25, 31], "middl": [6, 31], "measur": [6, 7, 15, 16, 24, 29], "known": 6, "spheric": 6, "compar": 6, "cube": [6, 7], "baseradiu": 6, "topradiu": 6, "dirz": 6, "top": [6, 7, 15, 16, 22, 24, 28, 31], "statu": [6, 16, 28], "relationship": [6, 16, 21], "insid": [6, 15, 25, 28, 30], "outsid": 6, "tiltangl": [6, 7], "logic": [6, 7, 28], "compon": [6, 7, 15, 28, 29], "assum": [6, 7, 8, 9, 13, 15, 16, 18, 25, 28, 29, 30, 31], "threshold": [6, 7, 18, 25], "tilt": [6, 7], "horizont": [6, 7, 14, 15, 19, 27, 29], "nearest": [6, 7, 15, 16, 30, 31], "cardin": [6, 7], "verticalfac": 6, "tophorizontalfac": [6, 7], "bottomhorizontalfac": [6, 7], "inclinedfac": 6, "inclin": [6, 7], "verticalapertur": 6, "tophorizontalapertur": [6, 7], "bottomhorizontalapertur": [6, 7], "inclinedapertur": 6, "circumscrib": [6, 7], "longitud": [6, 27], "latitud": [6, 27], "60": [6, 15, 27], "guarante": [6, 15, 28], "focallength": [6, 15, 25, 31], "125": [6, 25], "parabol": [6, 25], "focal": [6, 15, 25, 31], "parabola": [6, 25], "addit": [6, 8, 16, 20, 22], "pleas": [6, 8, 15, 16, 23], "note": [6, 15, 16, 23], "spring": [6, 16, 27], "apex": [6, 16, 22, 31], "profil": 6, "startoffset": 6, "endoffset": 6, "endcapa": 6, "endcapb": 6, "centerlin": 6, "xy": [6, 13, 15, 17, 29, 30], "plane": [6, 13, 15, 17, 25, 29, 30, 31], "start": [6, 8, 13, 15, 16, 25, 27, 28, 29, 30, 31], "cap": 6, "invers": [6, 15, 31], "endcap": 6, "been": [6, 16, 18, 30, 31], "ha": [6, 13, 14, 15, 16, 18, 25, 28, 29, 30, 31], "angtoler": [6, 7, 15, 25, 28, 31], "collinear": [6, 7, 13, 15, 25, 28, 29, 31], "angular": [6, 7, 15, 25, 28, 31], "without": [6, 7, 15, 25, 31], "45": [6, 25, 28, 31], "epsilon": [6, 8, 15, 25, 28, 31], "01": [6, 15, 25, 28, 30, 31], "hip": [6, 25, 31], "straight": [6, 13, 15, 16, 22, 23, 25, 29, 30, 31], "contribut": [6, 13, 15, 25, 31], "\u9ad8\u7199\u9e4f": [6, 15, 25, 31], "xipeng": [6, 15, 25, 31], "gao": [6, 15, 25, 31], "gaoxipeng1998": [6, 15, 25, 31], "gmail": [6, 15, 25, 31], "librari": [6, 15, 25, 28, 31], "botffi": [6, 15, 25, 31], "anoth": [6, 15, 23, 25, 28, 30, 31], "larger": [6, 15, 25, 28, 31], "better": [6, 15, 25, 28, 31], "supercel": 6, "enclosur": 6, "within": [6, 7, 8, 13, 15, 16, 18, 25, 28, 30, 31], "super": [6, 28, 30], "inputcel": 6, "majorradiu": 6, "minorradiu": 6, "major": [6, 15, 31], "minor": [6, 15, 31], "manitssa": [6, 7], "transfer": [7, 8, 15, 16, 25, 28, 31], "should": [7, 8, 14, 16, 18, 22, 23, 28], "minimum": [7, 8, 9, 15, 16, 21, 22, 28, 31], "all": [7, 9, 15, 16, 18, 21, 28, 29, 31], "externalverticalfac": 7, "internalverticalfac": 7, "internalhorizontalfac": 7, "externalinclinedfac": 7, "internalinclinedfac": 7, "externalverticalapertur": 7, "internalverticalapertur": 7, "13": 7, "internalhorizontalapertur": 7, "14": 7, "externalinclinedapertur": 7, "15": [7, 22, 27, 28], "internalinclinedapertur": 7, "delaunay_triangul": [7, 25], "both": [7, 8, 16], "around": [7, 8, 13, 15, 20, 28, 31], "prismat": 7, "partit": [7, 25], "voronoi_diagram": [7, 25], "ax": [7, 16, 22, 28, 30], "formula": 8, "xrang": 8, "yrang": 8, "xstring": 8, "ystring": 8, "rang": [8, 9, 12, 15, 16, 18, 28], "2d": [8, 13, 15, 16, 31], "uppercas": 8, "independ": 8, "variabl": [8, 16, 24], "math": 8, "function": [8, 24, 31], "sin": 8, "co": [8, 28], "tan": 8, "sqrt": 8, "etc": 8, "ab": [8, 15, 31], "tupl": [8, 9, 16, 23, 24, 28], "step": [8, 13, 15, 31], "attempt": [8, 14, 15, 16, 22, 24, 28, 31], "cannot": [8, 15, 16, 31], "unspecifi": 8, "One": 8, "arg": [8, 13, 23, 30], "topolog": [8, 13, 15, 16, 21, 27, 28, 29, 30, 31], "selector": [8, 28], "minsampl": 8, "spatial": [8, 16], "nois": 8, "provid": [8, 16, 24, 28], "expect": 8, "ad": [8, 12, 15, 16, 21, 22, 24, 25, 28, 29], "dimens": 8, "sure": 8, "maximum": [8, 9, 15, 16, 21, 22, 25, 28, 30, 31], "consid": [8, 13, 15, 16, 25, 29, 30, 31], "part": [8, 15, 25, 31], "sens": 8, "region": [8, 31], "requir": 8, "dens": 8, "free": [8, 28, 30], "higher": [8, 15, 28, 31], "highest": [8, 14, 16, 18, 22, 23, 28, 31], "maxiter": [8, 15, 16, 31], "100": [8, 16, 22, 24, 28], "centroidkei": 8, "k_centroid": 8, "means_clust": 8, "under": [8, 15, 16, 19, 21, 24, 25, 28, 31], "geometr": [8, 16, 24], "them": [8, 28], "possibl": [8, 16, 20], "perimet": 8, "mystic": 8, "rose": 8, "ignor": [8, 15, 16, 30], "output": [8, 14, 15, 16, 19, 21, 22, 24, 28, 29, 30, 31], "simplif": 8, "alpha": [9, 16, 28], "css": [9, 16, 22, 24, 28], "develop": 9, "mozilla": 9, "u": [9, 10, 13, 15, 17, 31], "web": 9, "THe": [9, 28], "transpar": [9, 22, 24, 28], "express": [9, 13, 16], "b": [9, 15, 18, 25, 28, 30, 31], "hex": [9, 16, 22, 24, 28], "convert": [9, 16, 21], "hexadecim": [9, 16], "rgb": [9, 16, 22, 24, 28], "rrggbb": 9, "fulli": [9, 28], "opaqu": [9, 22, 28], "minvalu": [9, 22], "maxvalu": [9, 22], "red": [9, 14, 22, 28], "green": [9, 14, 22, 28], "blue": [9, 14, 22, 28], "usealpha": 9, "fourth": 9, "255": [9, 16, 22, 24, 28], "three": [9, 13, 14, 22, 24], "v": [10, 12, 15, 17, 23, 24, 30], "rel": 10, "parameter": 10, "byobjectcontext": 10, "staticmethod": [12, 14], "def": [12, 14], "bydgldata": 12, "item": [12, 13, 14, 18, 26, 28], "vlist": 12, "append": [12, 16, 18], "tolist": 12, "len": 12, "comma": [12, 16, 28], "separ": [12, 16, 28], "equival": 12, "listattribut": 12, "attribut": [12, 16, 23, 24, 28], "pair": 12, "edgea": 13, "edgeb": 13, "bracket": 13, "180": [13, 15, 27, 29], "decid": 13, "chosen": [13, 16, 25, 31], "intend": 13, "vertexa": [13, 16, 30, 31], "vertexb": [13, 16, 30], "closest": [13, 18, 30], "meet": [13, 28, 31], "sinc": 13, "made": [13, 18, 24, 27, 28], "equat": [13, 15, 25, 28, 30], "slope": 13, "inf": 13, "x_intercept": 13, "intercept": 13, "y_intercept": 13, "half": 13, "strict": [13, 30], "strictli": [13, 30], "ident": [13, 16, 28, 30], "comparison": [13, 30], "comput": [13, 15, 16, 23, 24, 27, 28, 29, 30, 31], "necessarili": 13, "fall": 13, "extent": 13, "parallel": [13, 15, 16, 28, 29, 31], "gaoxipeng": [13, 15, 25, 31], "coplanar": [13, 15, 25, 28, 31], "perpendicular": [13, 15, 29, 30, 31], "midpoint": 13, "useendvertex": 13, "symmetr": 13, "preserv": [13, 30], "byosmfil": 14, "osm": 14, "openstudiomodelcor": 14, "osmodel": 14, "read": [14, 16, 27, 28], "isnul": 14, "null": 14, "shadingsurfac": 14, "osmodelpath": 14, "weatherfilepath": 14, "designdayfilepath": 14, "floorlevel": [14, 16], "buildingnam": [14, 19], "topologicbuild": 14, "buildingtyp": 14, "northaxi": 14, "glazingratio": 14, "coolingtemp": 14, "heatingtemp": 14, "defaultspacetyp": 14, "189": 14, "2009": 14, "offic": [14, 19], "wholebuild": 14, "lg": 14, "cz4": 14, "spacenamekei": 14, "topologic_nam": [14, 19], "spacetypekei": 14, "topologic_typ": [14, 19], "shade": [14, 19], "asset": 14, "osmtempl": 14, "officebuild": 14, "weather": 14, "epw": 14, "gbr_london": 14, "gatwick": 14, "037760_iwec": 14, "dai": [14, 27], "ddy": 14, "floor": [14, 16], "lowest": [14, 16, 18], "find": [14, 15, 16, 21, 28, 30, 31], "appli": [14, 15, 20, 24, 28, 31], "assign": [14, 16, 21, 28], "counter": [14, 15, 23, 29, 30], "clockwis": [14, 15, 23, 28, 29, 30, 31], "glaze": 14, "window": [14, 16, 28], "exterior": [14, 15, 16, 25, 31], "temperatur": 14, "cool": [14, 19], "system": 14, "activ": 14, "heat": [14, 19], "tabl": 14, "construct": [14, 19], "schedul": 14, "export": [14, 16, 19, 21, 22, 28], "gbxml": 14, "written": [14, 16], "successfulli": [14, 16], "hvacsizingsummari": 14, "reportforstr": 14, "facil": 14, "zone": 14, "sensibl": 14, "calcul": [14, 15, 16, 28, 29], "row": [14, 16, 18], "osbinarypath": 14, "outputfold": 14, "removefil": 14, "binari": 14, "sql": 14, "shadingfac": 14, "hole": [15, 16, 23, 25], "facea": 15, "faceb": 15, "zrot": [15, 28, 31], "becom": [15, 28, 31], "so": [15, 18, 23, 28, 30, 31], "reduc": [15, 28, 31], "offsetkei": [15, 31], "stepoffseta": [15, 31], "stepoffsetb": [15, 31], "stepoffsetkeya": [15, 31], "stepoffsetkeyb": [15, 31], "bisector": [15, 31], "numwork": [15, 16, 28, 31], "interior": [15, 25, 31], "anti": [15, 29, 31], "previou": [15, 21, 31], "transit": [15, 25, 31], "seam": [15, 31], "rather": [15, 16], "shortest": [15, 16, 18, 31], "worker": [15, 16, 28, 31], "caus": [15, 28, 31], "twice": [15, 16, 28, 31], "cpu": [15, 16, 28, 31], "host": [15, 28, 30, 31], "minoffsetkei": [15, 31], "minoffset": [15, 31], "maxoffsetkei": [15, 31], "maxoffset": [15, 31], "defaultminoffset": [15, 31], "defaultmaxoffset": [15, 31], "converg": [15, 24, 31], "solut": [15, 31], "offseta": [15, 25, 31], "offsetb": [15, 25, 31], "internalboundariesclust": 15, "fromangl": [15, 25, 31], "toangl": [15, 25, 31], "360": [15, 25, 28, 31], "upperleft": [15, 31], "lowerright": [15, 31], "upperright": [15, 31], "compactness_measure_of_a_shap": [15, 25], "compass": [15, 27, 29], "fashion": [15, 29, 30, 31], "aperiod": [15, 31], "monotil": [15, 31], "call": [15, 16, 30, 31], "tile": [15, 31], "german": [15, 31], "famou": [15, 31], "physicist": [15, 31], "arxiv": [15, 31], "2303": [15, 31], "10798": [15, 31], "hexagon": [15, 31], "inputmod": [15, 31], "866025": [15, 31], "eccentr": [15, 31], "majoraxislength": [15, 31], "minoraxislength": [15, 31], "32": [15, 24, 25, 31], "includeinternalboundari": 15, "nest": [15, 16, 18, 28, 29], "270": [15, 29], "300": 15, "simpl": [15, 28], "those": [15, 16], "thu": [15, 16], "asvertex": 15, "toward": [15, 27, 29], "treat": [15, 16, 22, 31], "radiuskei": [15, 31], "round": [15, 24, 31], "corner": [15, 25, 31], "fillet_": [15, 31], "mechan": [15, 31], "90": [15, 28, 29], "mirror": [15, 31], "obstacl": [15, 16], "fov": 15, "viewpoint": [15, 16], "observ": 15, "convent": [15, 24, 29], "field": [15, 16, 23, 28], "field_of_view": 15, "accept": [15, 28], "resolut": 15, "externalvertic": 15, "internalvertic": 15, "toleavesonli": 15, "approxim": 15, "medial": 15, "medial_axi": 15, "leaf": 15, "outputtyp": [15, 29, 30, 31], "xyz": [15, 20, 26, 28, 29, 30, 31], "subset": [15, 16, 24, 28, 31], "permut": [15, 20, 28, 29, 30, 31], "northangl": 15, "arrow": 15, "neg": [15, 24, 28, 29], "mass": [15, 28], "unto": [15, 25, 30, 31], "centroidof": 15, "coeffici": [15, 16], "receiv": [15, 16, 28, 30, 31], "dougla": [15, 25, 31], "peucker": [15, 25, 31], "algorthim": [15, 31], "ramer": [15, 25, 31], "e2": [15, 16, 25, 31], "93dougla": [15, 25, 31], "93peucker_algorithm": [15, 25, 31], "wassimj": [15, 16, 25, 31], "issu": [15, 25, 31], "35": [15, 25, 31], "shorter": [15, 18, 25, 31], "usual": [15, 28], "121": [15, 31], "hybrid": [15, 31], "factor": [15, 16, 20, 28, 31], "affect": [15, 16, 31], "radiusa": [15, 25, 31], "radiusb": [15, 25, 31], "rai": [15, 23, 31], "outer": [15, 25, 31], "widtha": [15, 31], "widthb": [15, 31], "75": [15, 17, 31], "mode": [15, 16, 28], "meshsiz": [15, 28], "classic": [15, 24, 28], "meshadapt": [15, 28], "frontal": [15, 28], "bamg": [15, 28], "fontal": [15, 28], "quad": [15, 16, 28], "pack": [15, 28], "parallelogram": [15, 28], "gmsh": [15, 28], "info": [15, 28], "texinfo": [15, 28], "veri": [15, 28], "consum": [15, 28], "overal": [15, 28], "triangl": 15, "effect": 15, "uv": 15, "transfervertexdictionari": 16, "transferedgedictionari": 16, "vertexlabelkei": [16, 21, 22, 28], "edgekei": 16, "includeweight": 16, "adjac": [16, 28], "weight": [16, 24], "vertexkei": 16, "adjacency_list": 16, "edgekeyfwd": 16, "edgekeybwd": 16, "bidirkei": 16, "bidirect": [16, 21], "useedgeindex": 16, "useedgelength": 16, "adjacency_matrix": 16, "forward": 16, "overrid": 16, "backward": 16, "suppos": 16, "bidrect": 16, "bidirekei": 16, "timelimit": 16, "limit": [16, 22, 28], "clustering_coeffici": 16, "includeattribut": 16, "includelabel": 16, "includegeometri": 16, "sitelabel": 16, "site_0001": 16, "sitedictionari": 16, "buildinglabel": 16, "building_0001": 16, "buildingdictionari": 16, "storeyprefix": 16, "storei": 16, "typekei": [16, 28], "verticeskei": 16, "edgeskei": 16, "edgelabelkei": [16, 21, 22, 28], "sourcekei": 16, "targetkei": 16, "xkei": 16, "hasx": 16, "ykei": 16, "hasi": 16, "zkei": 16, "hasz": 16, "geometrykei": 16, "walltyp": 16, "slabtyp": 16, "doortyp": 16, "door": 16, "windowtyp": 16, "contenttyp": 16, "namespac": [16, 28], "resourc": [16, 28], "rdf": 16, "bot": 16, "ontologi": 16, "w3c": 16, "lbd": 16, "cg": 16, "wherev": 16, "out": [16, 18, 24, 28], "site": 16, "prefix": 16, "vertex_xxxx": 16, "xxxx": 16, "sequenti": [16, 24], "uniqu": [16, 18], "forc": [16, 18, 21], "edge_xxxx": 16, "look": 16, "rdflib": 16, "turtl": 16, "thde": 16, "ttl": 16, "turtle2": 16, "linebreak": 16, "xml": 16, "pretti": 16, "ld": 16, "There": 16, "further": 16, "syntax": 16, "variant": [16, 28], "ntripl": 16, "nt": 16, "nt11": 16, "n": [16, 18, 30, 31], "tripl": 16, "exactli": [16, 30], "utf8": 16, "n3": 16, "notat": 16, "superset": 16, "cater": 16, "rule": 16, "few": 16, "thing": 16, "trig": 16, "multipl": [16, 20, 28], "trix": 16, "nquad": 16, "destin": 16, "betweeness_centr": 16, "betwe": 16, "central": 16, "betweenness_centr": 16, "betweneess_centr": 16, "xmin": [16, 21], "ymin": [16, 21], "zmin": [16, 21], "xmax": [16, 21], "ymax": [16, 21], "zmax": [16, 21], "schema": 16, "includecontext": 16, "graphidhead": 16, "graph_id": 16, "graphlabelhead": [16, 24], "graphfeatureshead": 16, "feat": [16, 24], "graphfeatureskei": 16, "edgesrchead": 16, "src_id": 16, "edgedsthead": 16, "dst_id": 16, "edgelabelhead": 16, "edgetrainmaskhead": 16, "train_mask": 16, "edgevalidatemaskhead": 16, "val_mask": 16, "edgetestmaskhead": 16, "test_mask": 16, "edgefeatureshead": 16, "edgefeatureskei": 16, "nodeidhead": 16, "node_id": 16, "nodelabelhead": 16, "nodetrainmaskhead": 16, "nodevalidatemaskhead": 16, "nodetestmaskhead": 16, "nodefeatureshead": 16, "nodexhead": 16, "nodeyhead": 16, "nodezhead": 16, "nodefeatureskei": 16, "yaml": 16, "header": 16, "mask": [16, 24], "dgcnn": 16, "includetyp": [16, 28], "excludetyp": [16, 28], "includerel": 16, "excluderel": 16, "partial": 16, "bruno": 16, "postl": 16, "exclud": [16, 28], "vertexdictionari": 16, "edgedictionari": 16, "indic": [16, 18, 24, 28], "signifi": 16, "directapertur": 16, "viasharedtopologi": 16, "viasharedapertur": 16, "toexteriortopologi": 16, "toexteriorapertur": 16, "tocont": 16, "tooutpost": 16, "idkei": 16, "topologic_id": 16, "outpostskei": 16, "outpost": 16, "vertexcategorykei": [16, 21], "categori": [16, 21, 22, 24], "edgecategorykei": [16, 21], "useinternalvertex": 16, "storebrep": 16, "graph_": 16, "discrete_mathemat": 16, "directli": 16, "via": 16, "maxcolor": 16, "chromat": 16, "graph_color": 16, "against": [16, 22, 28], "closeness_centr": 16, "oldkei": 16, "write": 16, "verticesa": [16, 28], "verticesb": [16, 28], "ther": [16, 28], "contract": 16, "replac": [16, 28, 30], "edge_contract": 16, "topollog": 16, "degree_": [16, 30], "graph_theori": [16, 30], "aggreg": 16, "retriev": [16, 28, 30], "sequenc": 16, "mathworld": 16, "wolfram": 16, "dense_graph": 16, "root": [16, 24], "map": [16, 31], "www": 16, "spacesyntax": 16, "onlin": 16, "overview": [16, 28], "analysi": [16, 28], "graphdiamet": 16, "distance_": 16, "restrict": [16, 28], "graphlabel": 16, "graphfeatur": 16, "defaultedgelabel": [16, 21], "edgemaskkei": 16, "edgetrainratio": 16, "edgevalidateratio": 16, "edgetestratio": 16, "nodelabelkei": 16, "defaultnodelabel": 16, "nodemaskkei": 16, "nodetrainratio": 16, "nodevalidateratio": 16, "nodetestratio": 16, "contin": 16, "456": 16, "011": 16, "56": 16, "defauli": 16, "dicitonari": 16, "foud": 16, "graphwidth": 16, "graphlength": 16, "graphheight": 16, "defaultvertexcolor": 16, "black": [16, 22, 28], "defaultvertexs": 16, "vertexcolorkei": 16, "vertexsizekei": 16, "defaultedgecolor": 16, "defaultedgeweight": 16, "defaultedgetyp": 16, "undirect": 16, "edgecolorkei": 16, "edgeweightkei": 16, "exchang": 16, "gexf": 16, "indent": 16, "sortkei": 16, "ouptut": [16, 22, 28], "oper": [16, 19, 22, 28], "success": [16, 19, 22, 28], "unsucces": [16, 28], "layout": 16, "seed": [16, 24], "50": [16, 22, 24, 28, 31], "rootvertex": 16, "fruchterman": 16, "reingold": 16, "distribut": 16, "radial": 16, "concentr": [16, 25], "tillford": 16, "cirumfer": 16, "constant": [16, 25], "attract": 16, "repuls": 16, "solv": 16, "global": 16, "incom": [16, 30], "coincid": [16, 30], "unidrect": 16, "bipartit": 16, "bipartite_graph": 16, "complete_graph": 16, "satisfi": 16, "erd\u0151": 16, "gallai": 16, "theorem": 16, "erd": 16, "c5": 16, "93gallai_theorem": 16, "isol": 16, "lcc": 16, "costkei": 16, "longest": 16, "maxim": [16, 24], "longest_path": 16, "delta": 16, "residualkei": 16, "residu": 16, "maximum_flow_problem": 16, "capac": 16, "whole": 16, "span": 16, "minimum_spanning_tre": 16, "navig": 16, "clip": [16, 17, 25], "veritc": 16, "networkx": 16, "outgo": [16, 30], "85": 16, "page_rank": 16, "damp": 16, "dampen": 16, "rank": [16, 22, 28], "backgroundcolor": [16, 22, 24, 28], "white": [16, 28], "fontcolor": 16, "vertexs": [16, 22, 28], "vertexcolor": [16, 22, 28], "vertexgroupkei": [16, 22, 28], "vertexgroup": [16, 22, 28], "minvertexgroup": 16, "maxvertexgroup": 16, "edgeweight": 16, "showneighbour": 16, "selectmenu": 16, "filtermenu": 16, "pyvi": 16, "background": [16, 22, 24, 28], "font": 16, "bug": 16, "deriv": 16, "neighbor": [16, 31], "hi": 16, "group": [16, 22, 28], "help": 16, "showneighbor": 16, "shown": [16, 22, 28], "hover": 16, "menu": 16, "inlin": 16, "browser": [16, 22], "tab": [16, 28], "consider": 16, "whatev": 16, "minimis": 16, "pathlimit": 16, "sagitta": [16, 22, 31], "showvertic": [16, 22, 28], "showvertexlabel": [16, 22, 28], "showvertexlegend": [16, 22, 28], "edgecolor": [16, 22, 28], "edgewidth": [16, 22, 28], "edgegroupkei": [16, 22, 28], "edgegroup": [16, 22, 28], "showedg": [16, 22, 28], "showedgelabel": [16, 22, 28], "showedgelegend": [16, 22, 28], "950": [16, 22, 24, 28], "500": [16, 22, 24, 28], "axiss": [16, 22, 28], "rgba": [16, 22, 24, 28], "marginleft": [16, 22, 24, 28], "marginright": [16, 22, 24, 28], "margintop": [16, 22, 24, 28], "marginbottom": [16, 22, 24, 28], "camera": [16, 22, 28], "perspect": [16, 22, 28], "mathemat": [16, 22, 31], "chord": [16, 22, 31], "subtend": [16, 22, 31], "drawn": [16, 22, 28], "ff0000": [16, 22, 24, 28], "hsl": [16, 22, 24, 28], "hsla": [16, 22, 24, 28], "hsv": [16, 22, 24, 28], "hsva": [16, 22, 24, 28], "permenant": [16, 22, 28], "screen": [16, 22, 28], "legend": [16, 22, 28], "discov": [16, 22, 28], "suitabl": [16, 22, 28], "margin": [16, 22, 24, 28], "orthograph": [16, 22, 28], "viewpointsa": 16, "viewpointsb": 16, "visibl": 16, "alia": [16, 23, 28], "message_queu": [16, 28], "authkei": [16, 28], "daemon": [16, 28], "whether": [16, 24, 28], "exitcod": [16, 28], "exit": [16, 28], "yet": [16, 28], "identifi": [16, 17, 19, 22, 28], "pid": [16, 28], "sentinel": [16, 28], "descriptor": [16, 28], "unix": [16, 28], "handl": [16, 28], "wait": [16, 28], "termin": [16, 28], "start_index": 16, "sub": [16, 21, 28, 30], "overridden": [16, 28], "num_work": [16, 28], "uorigin": 17, "vorigin": 17, "urang": 17, "vrang": 17, "paratm": 17, "dir": 17, "lista": 18, "best": [18, 22], "sublist": 18, "member": 18, "fill": 18, "extra": 18, "m": [18, 31], "o": 18, "p": [18, 23], "yield": [18, 31], "duplic": [18, 30], "ascend": 18, "would": 18, "insert": 18, "otherlist": 18, "reverseflag": 18, "subsequ": 18, "lastli": 18, "larg": [18, 24], "particular": 18, "swap": 18, "softwar": [18, 29], "built": 19, "hbconstructionset": 19, "hb": 19, "hbmodel": 19, "tpbuild": 19, "tpshadingfacesclust": 19, "generic_build": 19, "defaultprogramidentifi": 19, "gener": [19, 28], "defaultconstructionsetidentifi": 19, "coolingsetpoint": 19, "heatingsetpoint": 19, "humidifyingsetpoint": 19, "dehumidifyingsetpoint": 19, "55": 19, "roomnamekei": 19, "roomtypekei": 19, "aperturetypekei": 19, "addsensorgrid": 19, "tpshadingfaceclust": 19, "hvac": 19, "celsiu": 19, "humidifi": 19, "percentag": 19, "room": 19, "sensor": 19, "identifii": 19, "hbprogram": 19, "mata": 20, "matb": 20, "matric": 20, "anglex": 20, "anglei": 20, "anglez": 20, "4x4": [20, 28], "roatat": 20, "scalex": 20, "scalei": 20, "scalez": 20, "translatex": 20, "translatei": 20, "translatez": 20, "defaultvertexlabel": 21, "defaultvertexcategori": 21, "connected_to": 21, "defaultedgecategori": 21, "neo4jgraph": 21, "_sync": 21, "driver": 21, "boltdriv": 21, "neo4jdriv": 21, "defaultvertexlabel_xxx": 21, "dfefault": 21, "defaultedgelabel_xxx": 21, "defaul": 21, "usernam": 21, "password": 21, "server": 21, "log": [21, 24], "cypher": 21, "labelkei": 21, "relationshipkei": 21, "deleteal": 21, "topologicgraphvertex": 21, "bi": 21, "drection": 21, "delet": [21, 28], "ntick": 22, "xposit": 22, "outlinewidth": 22, "subtitl": [22, 28], "bar": [22, 24], "graph_obj": 22, "_figur": 22, "tick": [22, 28], "outlin": [22, 28], "blind": 22, "friendli": 22, "These": [22, 27], "protanopia": 22, "deuteranopia": 22, "tritanopia": 22, "colorblind": 22, "respect": [22, 24, 28], "frame": [22, 28], "datafram": 22, "pd": 22, "vertexmingroup": [22, 28], "vertexmaxgroup": [22, 28], "vertexlegendlabel": [22, 28], "vertexlegendrank": [22, 28], "vertexlegendgroup": [22, 28], "edgemingroup": [22, 28], "edgemaxgroup": [22, 28], "edgelegendlabel": [22, 28], "edgelegendrank": [22, 28], "edgelegendgroup": [22, 28], "showfac": [22, 28], "faceopac": [22, 28], "facecolor": [22, 28], "fafafa": [22, 28], "facelabelkei": [22, 28], "facegroupkei": [22, 28], "facegroup": [22, 28], "facemingroup": [22, 28], "facemaxgroup": [22, 28], "showfacelegend": [22, 28], "facelegendlabel": [22, 28], "facelegendrank": [22, 28], "facelegendgroup": [22, 28], "intensitykei": [22, 28], "intens": [22, 28, 30], "isn": [22, 28], "opac": [22, 28], "bhave": [22, 28], "mingroup": [22, 28], "maxgroup": [22, 28], "idenitfi": [22, 28], "png": 22, "1920": 22, "1080": 22, "imag": [22, 23], "jpg": 22, "jpeg": 22, "pdf": 22, "svg": 22, "webp": 22, "sucessfulli": 22, "xtitl": [22, 24], "ytitl": [22, 24], "showscal": [22, 28], "40": [22, 24], "arrai": [22, 28], "minmum": 22, "correl": 22, "dotcolor": 22, "linecolor": 22, "800": 22, "theme": 22, "scheme": 22, "dark": 22, "light": 22, "xspace": [22, 24], "yspace": [22, 24], "usemark": [22, 24], "charttyp": [22, 24], "gridcolor": [22, 24], "lightgrai": [22, 24], "df": 22, "data_label": 22, "chart": [22, 24], "marker": [22, 24], "xcategori": 22, "ycategori": 22, "grai": 22, "cbvalu": [22, 28], "cbtick": [22, 28], "cbx": [22, 28], "cbwidth": [22, 28], "cboutlinewidth": [22, 28], "cbtitl": [22, 28], "cbsubtitl": [22, 28], "cbunit": [22, 28], "colorbar": [22, 28], "1200": 22, "environ": 22, "vscode": 22, "studio": 22, "colab": 22, "googl": 22, "ifram": 22, "jupyterlab": 22, "anyth": 22, "kwarg": [23, 30], "p1": 23, "p2": 23, "polygon": 23, "contour": [23, 31], "goe": 23, "downward": 23, "far": 23, "concern": 23, "accordingli": 23, "data_list": 24, "node_level": 24, "graph_level": 24, "node_attr_kei": 24, "edge_attr_kei": 24, "has_download": 24, "download": 24, "has_process": 24, "num_class": 24, "num_edge_featur": 24, "per": 24, "num_featur": 24, "num_node_featur": 24, "processed_dir": 24, "processed_file_nam": 24, "skip": 24, "processed_path": 24, "filepath": 24, "raw_dir": 24, "raw_file_nam": 24, "raw_path": 24, "correct": 24, "wrong": 24, "proport": 24, "numberofgraphclass": 24, "nodeattrkei": 24, "edgeattrkei": 24, "nodeonehotencod": 24, "nodefeaturescategori": 24, "edgeonehotencod": 24, "edgefeaturescategori": 24, "addselfloop": 24, "pytorch": 24, "meta": 24, "customdataset": 24, "model_typ": 24, "cv_type": 24, "hl_width": 24, "conv_layer_typ": 24, "sageconv": 24, "pool": 24, "avgpool": 24, "use_gpu": 24, "loss_funct": 24, "entropi": 24, "input_typ": 24, "regressor": 24, "classifierholdout": 24, "neuron": 24, "convolut": 24, "graphconv": 24, "ginconv": 24, "tagconv": 24, "dgn": 24, "maxpool": 24, "sumpool": 24, "gpu": 24, "likelihood": 24, "hparam": 24, "trainingdataset": 24, "validationdataset": 24, "testingdataset": 24, "portion": 24, "hyper": 24, "pygdataset": 24, "probabl": 24, "cv": 24, "hl": 24, "conv": 24, "max": 24, "min": 24, "torch": 24, "nn": 24, "instanc": [24, 28], "adam": 24, "amsgrad": 24, "beta": 24, "999": 24, "ep": 24, "1e": 24, "06": [24, 30], "lr": 24, "weightdecai": 24, "rho": 24, "lr_decai": 24, "extens": 24, "properti": 24, "avoid": 24, "abrupt": 24, "chang": 24, "smooth": 24, "some": 24, "momentum": 24, "minima": 24, "saddl": 24, "term": 24, "denomin": 24, "stabil": 24, "000001": 24, "adjust": 24, "our": 24, "param": 24, "l2": 24, "penalti": 24, "regular": 24, "techniqu": 24, "mape": 24, "r2": 24, "rmse": 24, "plolti": 24, "maximumgap": 25, "mergejunct": 25, "disjoint": 25, "still": 25, "experiment": [25, 28], "resembl": 25, "ribbon": 25, "touch": 25, "gap": 25, "junction": 25, "diagon": 25, "resolv": 25, "subdivid": 25, "aid": 25, "36": [25, 27, 31], "ring": [25, 27], "hyperbol": 25, "circular": 25, "domain": 25, "parabolid": 25, "llvertex": 25, "lrvertex": 25, "ulvertex": 25, "urvertex": 25, "rectangular": 25, "lower": 25, "upper": 25, "On": 25, "inner": 25, "optioal": [25, 31], "simplifyboundari": 25, "optimis": 25, "client": 26, "stream": 26, "token": 26, "commit_list": 26, "commit_id": 26, "commit": 26, "branch_list": 26, "branch_id": 26, "confirm": 26, "stream_list": 26, "stream_id": 26, "date": [27, 28], "datetim": 27, "autumn": 27, "equinox": 27, "september_equinox": 27, "summer": 27, "solstic": 27, "minuteinterv": 27, "dayinterv": 27, "hyperfinearchitectur": 27, "how": [27, 29], "minut": 27, "hourli": 27, "world": [27, 28], "orbit": 27, "othwerwis": [27, 28, 31], "incldu": 27, "date_path": 27, "winter": 27, "hourly_path": 27, "hour": 27, "ground": 27, "starttim": 27, "endtim": 27, "equal": [27, 28, 31], "startdai": 27, "enddai": 27, "365": 27, "vernal": 27, "march_equinox": 27, "summer_solstic": 27, "winter_solstic": 27, "so_dict": 28, "exclus": [28, 30], "subtopologytyp": 28, "seem": 28, "subtpologi": 28, "hosttopologi": [28, 30], "topologytyp": [28, 30], "topologya": 28, "topologyb": 28, "trandict": 28, "execut": 28, "operand": 28, "boolean_oper": 28, "xrot": 28, "yrot": 28, "substr": [28, 29, 30], "sensit": 28, "guidkei": 28, "colorkei": 28, "defaultcolor": 28, "defaulttyp": 28, "authorkei": 28, "datekei": 28, "dotbimpi": 28, "dotbim": 28, "creation": 28, "dd": 28, "mm": 28, "yyyi": 28, "carri": 28, "dxf": 28, "capabl": 28, "spline": 28, "l": 28, "record": 28, "lengthunit": 28, "meter": 28, "outputmod": 28, "uuid4": 28, "topologic_": 28, "topology_typ": 28, "jsondictionari": 28, "could": [28, 29, 30], "mani": 28, "objfil": 28, "mtlfile": 28, "defaultopac": 28, "transposeax": 28, "materi": 28, "basic": 28, "textur": 28, "mtl": 28, "remain": 28, "objpath": 28, "mtlstring": 28, "occt": 28, "dev": 28, "opencascad": 28, "occt_user_guides__modeling_data": 28, "topods_shap": 28, "inoput": 28, "frameidkei": 28, "vertexidkei": 28, "conform": 28, "sepat": 28, "No": [28, 31], "word": 28, "charact": 28, "text": 28, "vertex_label": 28, "67": 28, "61": 28, "47": 28, "93": 28, "22": 28, "center_of_mass": 28, "clean": 28, "memori": 28, "consumpt": 28, "WITH": 28, "care": 28, "convex": [28, 31], "hull": [28, 31], "deep": 28, "slow": 28, "immedi": [28, 30], "addnestingdepth": 28, "tool": 28, "divis": 28, "typefilt": 28, "view_draw": 28, "explos": 28, "occt_brep_format": 28, "autocad_dxf": 28, "r2010": 28, "namekei": 28, "opacitykei": 28, "256": 28, "wavefront": 28, "searchtyp": 28, "did": 28, "criteria": 28, "ptional": 28, "nonplanar": 28, "border": 28, "dira": 28, "dirb": 28, "origina": 28, "originb": 28, "old": 28, "movement": 28, "contentlist": 28, "rebuild": 28, "roll": 28, "pitch": 28, "yaw": 28, "euler": 28, "aircraft_principal_ax": 28, "quaternion": 28, "timestamp": 28, "unsort": 28, "solid_of_revolut": 28, "spun": 28, "request": 28, "ratiorang": 28, "linear": 28, "inward": 28, "outward": 28, "traingul": 28, "move": 28, "tranvertic": 28, "tranedg": 28, "tranfac": 28, "trancel": 28, "toplogi": 28, "topologgi": 28, "triangular": 28, "anglerang": 28, "v5": 28, "namescap": 28, "3dviewer": 28, "themselv": 28, "vectora": 29, "vectorb": 29, "abov": 29, "coodin": 29, "much": 29, "therefor": 29, "blender": 29, "least": [30, 31], "counterclockwis": 30, "includecentroid": 30, "enclos": 30, "trivial": 30, "itself": 30, "retain": 30, "nearli": 30, "closer": 30, "howev": 30, "now": 30, "modifi": 30, "hold": 30, "peripher": 30, "said": 30, "02": 30, "03": 30, "04": 30, "05": [30, 31], "07": 30, "08": 30, "09": 30, "usekdtre": 30, "kdtree": 30, "infinit": 30, "pass": 30, "cz": 30, "middlevertex": 31, "head": 31, "tail": 31, "concav": 31, "moreira": 31, "santo": 31, "neighbour": 31, "FOR": 31, "THE": 31, "OF": 31, "occupi": 31, "BY": 31, "grapp": 31, "2007": 31, "confer": 31, "graphic": 31, "theori": 31, "increas": 31, "produc": 31, "smoother": 31, "decreas": 31, "maxvertic": 31, "circuit": 31, "foci": 31, "yidan": 31, "xue": 31, "wirea": 31, "wireb": 31, "intermedi": 31, "raster": 31, "zigzag": 31, "toolpath": 31, "similar": 31, "turn": 31, "final": 31, "circumfer": 31}, "objects": {"": [[2, 0, 0, "-", "topologicpy"]], "topologicpy": [[3, 0, 0, "-", "ANN"], [4, 0, 0, "-", "Aperture"], [5, 0, 0, "-", "BVH"], [6, 0, 0, "-", "Cell"], [7, 0, 0, "-", "CellComplex"], [8, 0, 0, "-", "Cluster"], [9, 0, 0, "-", "Color"], [10, 0, 0, "-", "Context"], [12, 0, 0, "-", "Dictionary"], [13, 0, 0, "-", "Edge"], [14, 0, 0, "-", "EnergyModel"], [15, 0, 0, "-", "Face"], [16, 0, 0, "-", "Graph"], [17, 0, 0, "-", "Grid"], [18, 0, 0, "-", "Helper"], [19, 0, 0, "-", "Honeybee"], [20, 0, 0, "-", "Matrix"], [21, 0, 0, "-", "Neo4j"], [22, 0, 0, "-", "Plotly"], [23, 0, 0, "-", "Polyskel"], [24, 0, 0, "-", "PyG"], [25, 0, 0, "-", "Shell"], [26, 0, 0, "-", "Speckle"], [27, 0, 0, "-", "Sun"], [28, 0, 0, "-", "Topology"], [29, 0, 0, "-", "Vector"], [30, 0, 0, "-", "Vertex"], [31, 0, 0, "-", "Wire"], [32, 0, 0, "-", "version"]], "topologicpy.ANN": [[3, 1, 1, "", "ANN"]], "topologicpy.ANN.ANN": [[3, 2, 1, "", "DatasetByCSVPath"], [3, 2, 1, "", "DatasetBySampleName"], [3, 2, 1, "", "DatasetSampleNames"], [3, 2, 1, "", "DatasetSplit"], [3, 2, 1, "", "Figures"], [3, 2, 1, "", "Hyperparameters"], [3, 2, 1, "", "HyperparametersBySampleName"], [3, 2, 1, "", "Initialize"], [3, 2, 1, "", "Load"], [3, 2, 1, "", "Metrics"], [3, 2, 1, "", "ModelData"], [3, 2, 1, "", "Save"], [3, 2, 1, "", "Test"], [3, 2, 1, "", "Train"]], "topologicpy.Aperture": [[4, 1, 1, "", "Aperture"]], "topologicpy.Aperture.Aperture": [[4, 2, 1, "", "ByTopologyContext"], [4, 2, 1, "", "Topology"]], "topologicpy.BVH": [[5, 1, 1, "", "BVH"]], "topologicpy.BVH.BVH": [[5, 1, 1, "", "AABB"], [5, 1, 1, "", "BVHNode"], [5, 2, 1, "", "ByTopologies"], [5, 2, 1, "", "Clashes"], [5, 2, 1, "", "Graph"], [5, 1, 1, "", "MeshObject"], [5, 2, 1, "", "QueryByTopologies"]], "topologicpy.BVH.BVH.AABB": [[5, 2, 1, "", "contains"], [5, 2, 1, "", "intersects"]], "topologicpy.Cell": [[6, 1, 1, "", "Cell"]], "topologicpy.Cell.Cell": [[6, 2, 1, "", "Area"], [6, 2, 1, "", "Box"], [6, 2, 1, "", "ByFaces"], [6, 2, 1, "", "ByOffset"], [6, 2, 1, "", "ByShell"], [6, 2, 1, "", "ByShells"], [6, 2, 1, "", "ByThickenedFace"], [6, 2, 1, "", "ByThickenedShell"], [6, 2, 1, "", "ByWires"], [6, 2, 1, "", "ByWiresCluster"], [6, 2, 1, "", "Capsule"], [6, 2, 1, "", "Compactness"], [6, 2, 1, "", "Cone"], [6, 2, 1, "", "ContainmentStatus"], [6, 2, 1, "", "Cylinder"], [6, 2, 1, "", "Decompose"], [6, 2, 1, "", "Dodecahedron"], [6, 2, 1, "", "Edges"], [6, 2, 1, "", "Egg"], [6, 2, 1, "", "ExternalBoundary"], [6, 2, 1, "", "Faces"], [6, 2, 1, "", "Hyperboloid"], [6, 2, 1, "", "Icosahedron"], [6, 2, 1, "", "InternalBoundaries"], [6, 2, 1, "", "InternalVertex"], [6, 2, 1, "", "IsOnBoundary"], [6, 2, 1, "", "Octahedron"], [6, 2, 1, "", "Paraboloid"], [6, 2, 1, "", "Pipe"], [6, 2, 1, "", "Prism"], [6, 2, 1, "", "RemoveCollinearEdges"], [6, 2, 1, "", "Roof"], [6, 2, 1, "", "Sets"], [6, 2, 1, "", "Shells"], [6, 2, 1, "", "Sphere"], [6, 2, 1, "", "SurfaceArea"], [6, 2, 1, "", "Tetrahedron"], [6, 2, 1, "", "Torus"], [6, 2, 1, "", "Vertices"], [6, 2, 1, "", "Volume"], [6, 2, 1, "", "Wires"]], "topologicpy.CellComplex": [[7, 1, 1, "", "CellComplex"]], "topologicpy.CellComplex.CellComplex": [[7, 2, 1, "", "Box"], [7, 2, 1, "", "ByCells"], [7, 2, 1, "", "ByCellsCluster"], [7, 2, 1, "", "ByFaces"], [7, 2, 1, "", "ByFacesCluster"], [7, 2, 1, "", "ByWires"], [7, 2, 1, "", "ByWiresCluster"], [7, 2, 1, "", "Cells"], [7, 2, 1, "", "Decompose"], [7, 2, 1, "", "Delaunay"], [7, 2, 1, "", "Edges"], [7, 2, 1, "", "ExternalBoundary"], [7, 2, 1, "", "ExternalFaces"], [7, 2, 1, "", "Faces"], [7, 2, 1, "", "InternalFaces"], [7, 2, 1, "", "NonManifoldFaces"], [7, 2, 1, "", "Octahedron"], [7, 2, 1, "", "Prism"], [7, 2, 1, "", "RemoveCollinearEdges"], [7, 2, 1, "", "Shells"], [7, 2, 1, "", "Vertices"], [7, 2, 1, "", "Volume"], [7, 2, 1, "", "Voronoi"], [7, 2, 1, "", "Wires"]], "topologicpy.Cluster": [[8, 1, 1, "", "Cluster"]], "topologicpy.Cluster.Cluster": [[8, 2, 1, "", "ByFormula"], [8, 2, 1, "", "ByTopologies"], [8, 2, 1, "", "CellComplexes"], [8, 2, 1, "", "Cells"], [8, 2, 1, "", "DBSCAN"], [8, 2, 1, "", "Edges"], [8, 2, 1, "", "Faces"], [8, 2, 1, "", "FreeCells"], [8, 2, 1, "", "FreeEdges"], [8, 2, 1, "", "FreeFaces"], [8, 2, 1, "", "FreeShells"], [8, 2, 1, "", "FreeTopologies"], [8, 2, 1, "", "FreeVertices"], [8, 2, 1, "", "FreeWires"], [8, 2, 1, "", "HighestType"], [8, 2, 1, "", "K_Means"], [8, 2, 1, "", "MergeCells"], [8, 2, 1, "", "MysticRose"], [8, 2, 1, "", "Shells"], [8, 2, 1, "", "Simplify"], [8, 2, 1, "", "Vertices"], [8, 2, 1, "", "Wires"]], "topologicpy.Color": [[9, 1, 1, "", "Color"]], "topologicpy.Color.Color": [[9, 2, 1, "", "ByCSSNamedColor"], [9, 2, 1, "", "ByHEX"], [9, 2, 1, "", "ByValueInRange"], [9, 2, 1, "", "CSSNamedColor"], [9, 2, 1, "", "CSSNamedColors"], [9, 2, 1, "", "PlotlyColor"], [9, 2, 1, "", "RGBToHex"]], "topologicpy.Context": [[10, 1, 1, "", "Context"]], "topologicpy.Context.Context": [[10, 2, 1, "", "ByTopologyParameters"], [10, 2, 1, "", "Topology"]], "topologicpy.Dictionary": [[12, 1, 1, "", "Dictionary"]], "topologicpy.Dictionary.Dictionary": [[12, 2, 1, "", "ByKeyValue"], [12, 2, 1, "", "ByKeysValues"], [12, 2, 1, "", "ByMergedDictionaries"], [12, 2, 1, "", "ByPythonDictionary"], [12, 2, 1, "", "Keys"], [12, 2, 1, "", "ListAttributeValues"], [12, 2, 1, "", "PythonDictionary"], [12, 2, 1, "", "RemoveKey"], [12, 2, 1, "", "SetValueAtKey"], [12, 2, 1, "", "ValueAtKey"], [12, 2, 1, "", "Values"]], "topologicpy.Edge": [[13, 1, 1, "", "Edge"]], "topologicpy.Edge.Edge": [[13, 2, 1, "", "Angle"], [13, 2, 1, "", "Bisect"], [13, 2, 1, "", "ByFaceNormal"], [13, 2, 1, "", "ByOffset2D"], [13, 2, 1, "", "ByStartVertexEndVertex"], [13, 2, 1, "", "ByVertices"], [13, 2, 1, "", "ByVerticesCluster"], [13, 2, 1, "", "Connection"], [13, 2, 1, "", "Direction"], [13, 2, 1, "", "EndVertex"], [13, 2, 1, "", "Equation2D"], [13, 2, 1, "", "Extend"], [13, 2, 1, "", "ExtendToEdge"], [13, 2, 1, "", "ExternalBoundary"], [13, 2, 1, "", "Index"], [13, 2, 1, "", "Intersect2D"], [13, 2, 1, "", "IsCollinear"], [13, 2, 1, "", "IsCoplanar"], [13, 2, 1, "", "IsParallel"], [13, 2, 1, "", "Length"], [13, 2, 1, "", "Line"], [13, 2, 1, "", "Normal"], [13, 2, 1, "", "NormalEdge"], [13, 2, 1, "", "Normalize"], [13, 2, 1, "", "ParameterAtVertex"], [13, 2, 1, "", "Reverse"], [13, 2, 1, "", "SetLength"], [13, 2, 1, "", "StartVertex"], [13, 2, 1, "", "Trim"], [13, 2, 1, "", "TrimByEdge"], [13, 2, 1, "", "VertexByDistance"], [13, 2, 1, "", "VertexByParameter"], [13, 2, 1, "", "Vertices"]], "topologicpy.EnergyModel": [[14, 1, 1, "", "EnergyModel"]], "topologicpy.EnergyModel.EnergyModel": [[14, 2, 1, "", "ByOSMPath"], [14, 2, 1, "", "ByTopology"], [14, 2, 1, "", "ColumnNames"], [14, 2, 1, "", "DefaultConstructionSets"], [14, 2, 1, "", "DefaultScheduleSets"], [14, 2, 1, "", "ExportToGBXML"], [14, 2, 1, "", "ExportToOSM"], [14, 2, 1, "", "GBXMLString"], [14, 2, 1, "", "Query"], [14, 2, 1, "", "ReportNames"], [14, 2, 1, "", "RowNames"], [14, 2, 1, "", "Run"], [14, 2, 1, "", "SpaceColors"], [14, 2, 1, "", "SpaceDictionaries"], [14, 2, 1, "", "SpaceTypeNames"], [14, 2, 1, "", "SpaceTypes"], [14, 2, 1, "", "SqlFile"], [14, 2, 1, "", "TableNames"], [14, 2, 1, "", "Topologies"], [14, 2, 1, "", "Units"]], "topologicpy.Face": [[15, 1, 1, "", "Face"]], "topologicpy.Face.Face": [[15, 2, 1, "", "AddInternalBoundaries"], [15, 2, 1, "", "AddInternalBoundariesCluster"], [15, 2, 1, "", "Angle"], [15, 2, 1, "", "Area"], [15, 2, 1, "", "BoundingRectangle"], [15, 2, 1, "", "ByEdges"], [15, 2, 1, "", "ByEdgesCluster"], [15, 2, 1, "", "ByOffset"], [15, 2, 1, "", "ByOffsetArea"], [15, 2, 1, "", "ByShell"], [15, 2, 1, "", "ByThickenedWire"], [15, 2, 1, "", "ByVertices"], [15, 2, 1, "", "ByVerticesCluster"], [15, 2, 1, "", "ByWire"], [15, 2, 1, "", "ByWires"], [15, 2, 1, "", "ByWiresCluster"], [15, 2, 1, "", "Circle"], [15, 2, 1, "", "Compactness"], [15, 2, 1, "", "CompassAngle"], [15, 2, 1, "", "Edges"], [15, 2, 1, "", "Einstein"], [15, 2, 1, "", "Ellipse"], [15, 2, 1, "", "ExteriorAngles"], [15, 2, 1, "", "ExternalBoundary"], [15, 2, 1, "", "FacingToward"], [15, 2, 1, "", "Fillet"], [15, 2, 1, "", "Harmonize"], [15, 2, 1, "", "InteriorAngles"], [15, 2, 1, "", "InternalBoundaries"], [15, 2, 1, "", "InternalVertex"], [15, 2, 1, "", "Invert"], [15, 2, 1, "", "IsCoplanar"], [15, 2, 1, "", "Isovist"], [15, 2, 1, "", "MedialAxis"], [15, 2, 1, "", "Normal"], [15, 2, 1, "", "NormalEdge"], [15, 2, 1, "", "NorthArrow"], [15, 2, 1, "", "Planarize"], [15, 2, 1, "", "PlaneEquation"], [15, 2, 1, "", "Project"], [15, 2, 1, "", "Rectangle"], [15, 2, 1, "", "RectangleByPlaneEquation"], [15, 2, 1, "", "RemoveCollinearEdges"], [15, 2, 1, "", "Simplify"], [15, 2, 1, "", "Skeleton"], [15, 2, 1, "", "Square"], [15, 2, 1, "", "Squircle"], [15, 2, 1, "", "Star"], [15, 2, 1, "", "Trapezoid"], [15, 2, 1, "", "Triangulate"], [15, 2, 1, "", "TrimByWire"], [15, 2, 1, "", "VertexByParameters"], [15, 2, 1, "", "VertexParameters"], [15, 2, 1, "", "Vertices"], [15, 2, 1, "", "Wire"], [15, 2, 1, "", "Wires"]], "topologicpy.Graph": [[16, 1, 1, "", "Graph"], [16, 1, 1, "", "GraphQueueItem"], [16, 1, 1, "", "MergingProcess"], [16, 1, 1, "", "WorkerProcess"], [16, 1, 1, "", "WorkerProcessPool"]], "topologicpy.Graph.Graph": [[16, 2, 1, "", "AddEdge"], [16, 2, 1, "", "AddVertex"], [16, 2, 1, "", "AddVertices"], [16, 2, 1, "", "AdjacencyDictionary"], [16, 2, 1, "", "AdjacencyList"], [16, 2, 1, "", "AdjacencyMatrix"], [16, 2, 1, "", "AdjacentVertices"], [16, 2, 1, "", "AllPaths"], [16, 2, 1, "", "AverageClusteringCoefficient"], [16, 2, 1, "", "BOTGraph"], [16, 2, 1, "", "BOTString"], [16, 2, 1, "", "BetweenessCentrality"], [16, 2, 1, "", "ByAdjacencyMatrix"], [16, 2, 1, "", "ByAdjacencyMatrixCSVPath"], [16, 2, 1, "", "ByBOTGraph"], [16, 2, 1, "", "ByBOTPath"], [16, 2, 1, "", "ByCSVPath"], [16, 2, 1, "", "ByDGCNNFile"], [16, 2, 1, "", "ByDGCNNPath"], [16, 2, 1, "", "ByDGCNNString"], [16, 2, 1, "", "ByIFCFile"], [16, 2, 1, "", "ByIFCPath"], [16, 2, 1, "", "ByMeshData"], [16, 2, 1, "", "ByTopology"], [16, 2, 1, "", "ByVerticesEdges"], [16, 2, 1, "", "ChromaticNumber"], [16, 2, 1, "", "ClosenessCentrality"], [16, 2, 1, "", "Color"], [16, 2, 1, "", "Connect"], [16, 2, 1, "", "ContainsEdge"], [16, 2, 1, "", "ContainsVertex"], [16, 2, 1, "", "ContractEdge"], [16, 2, 1, "", "Degree"], [16, 2, 1, "", "DegreeSequence"], [16, 2, 1, "", "Density"], [16, 2, 1, "", "Depth"], [16, 2, 1, "", "DepthMap"], [16, 2, 1, "", "Diameter"], [16, 2, 1, "", "Dictionary"], [16, 2, 1, "", "Distance"], [16, 2, 1, "", "Edge"], [16, 2, 1, "", "Edges"], [16, 2, 1, "", "ExportToAdjacencyMatrixCSV"], [16, 2, 1, "", "ExportToBOT"], [16, 2, 1, "", "ExportToCSV"], [16, 2, 1, "", "ExportToGEXF"], [16, 2, 1, "", "ExportToJSON"], [16, 2, 1, "", "Flatten"], [16, 2, 1, "", "GlobalClusteringCoefficient"], [16, 2, 1, "", "Guid"], [16, 2, 1, "", "IncomingEdges"], [16, 2, 1, "", "IncomingVertices"], [16, 2, 1, "", "IsBipartite"], [16, 2, 1, "", "IsComplete"], [16, 2, 1, "", "IsErdoesGallai"], [16, 2, 1, "", "IsTree"], [16, 2, 1, "", "IsolatedVertices"], [16, 2, 1, "", "JSONData"], [16, 2, 1, "", "JSONString"], [16, 2, 1, "", "LocalClusteringCoefficient"], [16, 2, 1, "", "LongestPath"], [16, 2, 1, "", "MaximumDelta"], [16, 2, 1, "", "MaximumFlow"], [16, 2, 1, "", "MeshData"], [16, 2, 1, "", "MetricDistance"], [16, 2, 1, "", "MinimumDelta"], [16, 2, 1, "", "MinimumSpanningTree"], [16, 2, 1, "", "NavigationGraph"], [16, 2, 1, "", "NearestVertex"], [16, 2, 1, "", "NetworkXGraph"], [16, 2, 1, "", "Order"], [16, 2, 1, "", "OutgoingEdges"], [16, 2, 1, "", "OutgoingVertices"], [16, 2, 1, "", "PageRank"], [16, 2, 1, "", "Path"], [16, 2, 1, "", "PyvisGraph"], [16, 2, 1, "", "RemoveEdge"], [16, 2, 1, "", "RemoveVertex"], [16, 2, 1, "", "SetDictionary"], [16, 2, 1, "", "ShortestPath"], [16, 2, 1, "", "ShortestPaths"], [16, 2, 1, "", "Show"], [16, 2, 1, "", "Size"], [16, 2, 1, "", "TopologicalDistance"], [16, 2, 1, "", "Topology"], [16, 2, 1, "", "Tree"], [16, 2, 1, "", "VertexDegree"], [16, 2, 1, "", "Vertices"], [16, 2, 1, "", "VisibilityGraph"]], "topologicpy.Graph.GraphQueueItem": [[16, 3, 1, "", "edges"]], "topologicpy.Graph.MergingProcess": [[16, 2, 1, "", "wait_message"]], "topologicpy.Graph.WorkerProcess": [[16, 2, 1, "", "run"]], "topologicpy.Graph.WorkerProcessPool": [[16, 2, 1, "", "join"], [16, 2, 1, "", "startProcesses"], [16, 2, 1, "", "stopProcesses"]], "topologicpy.Grid": [[17, 1, 1, "", "Grid"]], "topologicpy.Grid.Grid": [[17, 2, 1, "", "EdgesByDistances"], [17, 2, 1, "", "EdgesByParameters"], [17, 2, 1, "", "VerticesByDistances"], [17, 2, 1, "", "VerticesByParameters"]], "topologicpy.Helper": [[18, 1, 1, "", "Helper"]], "topologicpy.Helper.Helper": [[18, 2, 1, "", "ClosestMatch"], [18, 2, 1, "", "Flatten"], [18, 2, 1, "", "Iterate"], [18, 2, 1, "", "MakeUnique"], [18, 2, 1, "", "MergeByThreshold"], [18, 2, 1, "", "Normalize"], [18, 2, 1, "", "Position"], [18, 2, 1, "", "Repeat"], [18, 2, 1, "", "Sort"], [18, 2, 1, "", "Transpose"], [18, 2, 1, "", "Trim"], [18, 2, 1, "", "Version"]], "topologicpy.Honeybee": [[19, 1, 1, "", "Honeybee"]], "topologicpy.Honeybee.Honeybee": [[19, 2, 1, "", "ConstructionSetByIdentifier"], [19, 2, 1, "", "ConstructionSets"], [19, 2, 1, "", "ExportToHBJSON"], [19, 2, 1, "", "ModelByTopology"], [19, 2, 1, "", "ProgramTypeByIdentifier"], [19, 2, 1, "", "ProgramTypes"], [19, 2, 1, "", "String"]], "topologicpy.Matrix": [[20, 1, 1, "", "Matrix"]], "topologicpy.Matrix.Matrix": [[20, 2, 1, "", "Add"], [20, 2, 1, "", "ByRotation"], [20, 2, 1, "", "ByScaling"], [20, 2, 1, "", "ByTranslation"], [20, 2, 1, "", "Multiply"], [20, 2, 1, "", "Subtract"], [20, 2, 1, "", "Transpose"]], "topologicpy.Neo4j": [[21, 1, 1, "", "Neo4j"]], "topologicpy.Neo4j.Neo4j": [[21, 2, 1, "", "ByGraph"], [21, 2, 1, "", "ByParameters"], [21, 2, 1, "", "ExportToGraph"], [21, 2, 1, "", "Reset"], [21, 2, 1, "", "SetGraph"]], "topologicpy.Plotly": [[22, 1, 1, "", "Plotly"]], "topologicpy.Plotly.Plotly": [[22, 2, 1, "", "AddColorBar"], [22, 2, 1, "", "ColorScale"], [22, 2, 1, "", "Colors"], [22, 2, 1, "", "DataByDGL"], [22, 2, 1, "", "DataByGraph"], [22, 2, 1, "", "DataByTopology"], [22, 2, 1, "", "ExportToImage"], [22, 2, 1, "", "FigureByConfusionMatrix"], [22, 2, 1, "", "FigureByCorrelation"], [22, 2, 1, "", "FigureByData"], [22, 2, 1, "", "FigureByDataFrame"], [22, 2, 1, "", "FigureByJSONFile"], [22, 2, 1, "", "FigureByJSONPath"], [22, 2, 1, "", "FigureByMatrix"], [22, 2, 1, "", "FigureByPieChart"], [22, 2, 1, "", "FigureByTopology"], [22, 2, 1, "", "FigureExportToJSON"], [22, 2, 1, "", "FigureExportToPDF"], [22, 2, 1, "", "FigureExportToPNG"], [22, 2, 1, "", "FigureExportToSVG"], [22, 2, 1, "", "Renderer"], [22, 2, 1, "", "Renderers"], [22, 2, 1, "", "SetCamera"], [22, 2, 1, "", "Show"]], "topologicpy.Polyskel": [[23, 1, 1, "", "Debug"], [23, 1, 1, "", "Line2"], [23, 1, 1, "", "LineSegment2"], [23, 1, 1, "", "Point2"], [23, 1, 1, "", "Ray2"], [23, 1, 1, "", "Subtree"], [23, 4, 1, "", "set_debug"], [23, 4, 1, "", "skeletonize"]], "topologicpy.Polyskel.Debug": [[23, 2, 1, "", "line"], [23, 2, 1, "", "rectangle"], [23, 2, 1, "", "show"]], "topologicpy.Polyskel.Line2": [[23, 2, 1, "", "distance"], [23, 2, 1, "", "intersect"]], "topologicpy.Polyskel.LineSegment2": [[23, 2, 1, "", "intersect"]], "topologicpy.Polyskel.Point2": [[23, 2, 1, "", "cross"], [23, 2, 1, "", "distance"], [23, 2, 1, "", "dot"], [23, 2, 1, "", "normalized"]], "topologicpy.Polyskel.Ray2": [[23, 2, 1, "", "intersect"]], "topologicpy.Polyskel.Subtree": [[23, 3, 1, "", "height"], [23, 3, 1, "", "sinks"], [23, 3, 1, "", "source"]], "topologicpy.PyG": [[24, 1, 1, "", "CustomGraphDataset"], [24, 1, 1, "", "PyG"]], "topologicpy.PyG.CustomGraphDataset": [[24, 2, 1, "", "process_all"]], "topologicpy.PyG.PyG": [[24, 2, 1, "", "Accuracy"], [24, 2, 1, "", "ConfusionMatrix"], [24, 2, 1, "", "DatasetByCSVPath"], [24, 2, 1, "", "DatasetGraphLabels"], [24, 2, 1, "", "DatasetSplit"], [24, 2, 1, "", "Hyperparameters"], [24, 2, 1, "", "MSE"], [24, 2, 1, "", "Model"], [24, 2, 1, "", "ModelClassify"], [24, 2, 1, "", "ModelData"], [24, 2, 1, "", "ModelLoad"], [24, 2, 1, "", "ModelPredict"], [24, 2, 1, "", "ModelSave"], [24, 2, 1, "", "ModelTest"], [24, 2, 1, "", "ModelTrain"], [24, 2, 1, "", "Optimizer"], [24, 2, 1, "", "Performance"], [24, 2, 1, "", "Show"]], "topologicpy.Shell": [[25, 1, 1, "", "Shell"]], "topologicpy.Shell.Shell": [[25, 2, 1, "", "ByDisjointFaces"], [25, 2, 1, "", "ByFaces"], [25, 2, 1, "", "ByFacesCluster"], [25, 2, 1, "", "ByThickenedWire"], [25, 2, 1, "", "ByWires"], [25, 2, 1, "", "ByWiresCluster"], [25, 2, 1, "", "Circle"], [25, 2, 1, "", "Delaunay"], [25, 2, 1, "", "Edges"], [25, 2, 1, "", "ExternalBoundary"], [25, 2, 1, "", "Faces"], [25, 2, 1, "", "HyperbolicParaboloidCircularDomain"], [25, 2, 1, "", "HyperbolicParaboloidRectangularDomain"], [25, 2, 1, "", "InternalBoundaries"], [25, 2, 1, "", "IsClosed"], [25, 2, 1, "", "IsOnBoundary"], [25, 2, 1, "", "Paraboloid"], [25, 2, 1, "", "Pie"], [25, 2, 1, "", "Planarize"], [25, 2, 1, "", "Rectangle"], [25, 2, 1, "", "RemoveCollinearEdges"], [25, 2, 1, "", "Roof"], [25, 2, 1, "", "SelfMerge"], [25, 2, 1, "", "Simplify"], [25, 2, 1, "", "Skeleton"], [25, 2, 1, "", "Vertices"], [25, 2, 1, "", "Voronoi"], [25, 2, 1, "", "Wires"]], "topologicpy.Speckle": [[26, 1, 1, "", "Speckle"]], "topologicpy.Speckle.Speckle": [[26, 2, 1, "", "BranchesByStream"], [26, 2, 1, "", "ClientByURL"], [26, 2, 1, "", "CommitByID"], [26, 2, 1, "", "CommitsByBranch"], [26, 2, 1, "", "Object"], [26, 2, 1, "", "Send"], [26, 2, 1, "", "SpeckleBranchByID"], [26, 2, 1, "", "SpeckleCommitByURL"], [26, 2, 1, "", "SpeckleCommitDelete"], [26, 2, 1, "", "SpeckleGlobalsByStream"], [26, 2, 1, "", "SpeckleSendObjects"], [26, 2, 1, "", "SpeckleStreamByID"], [26, 2, 1, "", "SpeckleStreamByURL"], [26, 2, 1, "", "StreamsByClient"], [26, 2, 1, "", "mesh_to_speckle"], [26, 2, 1, "", "mesh_to_speckle_mesh"]], "topologicpy.Sun": [[27, 1, 1, "", "Sun"]], "topologicpy.Sun.Sun": [[27, 2, 1, "", "Altitude"], [27, 2, 1, "", "AutumnEquinox"], [27, 2, 1, "", "Azimuth"], [27, 2, 1, "", "Diagram"], [27, 2, 1, "", "Edge"], [27, 2, 1, "", "PathByDate"], [27, 2, 1, "", "PathByHour"], [27, 2, 1, "", "Position"], [27, 2, 1, "", "SpringEquinox"], [27, 2, 1, "", "SummerSolstice"], [27, 2, 1, "", "Sunrise"], [27, 2, 1, "", "Sunset"], [27, 2, 1, "", "Vector"], [27, 2, 1, "", "Vertex"], [27, 2, 1, "", "VerticesByDate"], [27, 2, 1, "", "VerticesByHour"], [27, 2, 1, "", "WinterSolstice"]], "topologicpy.Topology": [[28, 1, 1, "", "MergingProcess"], [28, 1, 1, "", "QueueItem"], [28, 1, 1, "", "SinkItem"], [28, 1, 1, "", "Topology"], [28, 1, 1, "", "WorkerProcess"], [28, 1, 1, "", "WorkerProcessPool"]], "topologicpy.Topology.MergingProcess": [[28, 2, 1, "", "wait_message"]], "topologicpy.Topology.QueueItem": [[28, 3, 1, "", "ID"], [28, 3, 1, "", "sinkKeys"], [28, 3, 1, "", "sinkValues"]], "topologicpy.Topology.SinkItem": [[28, 3, 1, "", "ID"], [28, 3, 1, "", "sink_str"]], "topologicpy.Topology.Topology": [[28, 2, 1, "", "AddApertures"], [28, 2, 1, "", "AddApertures_old"], [28, 2, 1, "", "AddContent"], [28, 2, 1, "", "AddDictionary"], [28, 2, 1, "", "AdjacentTopologies"], [28, 2, 1, "", "Analyze"], [28, 2, 1, "", "ApertureTopologies"], [28, 2, 1, "", "Apertures"], [28, 2, 1, "", "BREPString"], [28, 2, 1, "", "Boolean"], [28, 2, 1, "", "BoundingBox"], [28, 2, 1, "", "ByBIMFile"], [28, 2, 1, "", "ByBIMPath"], [28, 2, 1, "", "ByBIMString"], [28, 2, 1, "", "ByBREPFile"], [28, 2, 1, "", "ByBREPPath"], [28, 2, 1, "", "ByBREPString"], [28, 2, 1, "", "ByDXFFile"], [28, 2, 1, "", "ByDXFPath"], [28, 2, 1, "", "ByGeometry"], [28, 2, 1, "", "ByGeometry_old"], [28, 2, 1, "", "ByIFCFile"], [28, 2, 1, "", "ByIFCPath"], [28, 2, 1, "", "ByJSONDictionary"], [28, 2, 1, "", "ByJSONFile"], [28, 2, 1, "", "ByJSONPath"], [28, 2, 1, "", "ByJSONString"], [28, 2, 1, "", "ByOBJFile"], [28, 2, 1, "", "ByOBJPath"], [28, 2, 1, "", "ByOBJString"], [28, 2, 1, "", "ByOCCTShape"], [28, 2, 1, "", "ByXYZFile"], [28, 2, 1, "", "ByXYZPath"], [28, 2, 1, "", "CellComplexes"], [28, 2, 1, "", "Cells"], [28, 2, 1, "", "CenterOfMass"], [28, 2, 1, "", "Centroid"], [28, 2, 1, "", "Cleanup"], [28, 2, 1, "", "ClusterFaces"], [28, 2, 1, "", "ClusterFaces_orig"], [28, 2, 1, "", "Clusters"], [28, 2, 1, "", "Contents"], [28, 2, 1, "", "Contexts"], [28, 2, 1, "", "ConvexHull"], [28, 2, 1, "", "Copy"], [28, 2, 1, "", "Degree"], [28, 2, 1, "", "Dictionary"], [28, 2, 1, "", "Difference"], [28, 2, 1, "", "Dimensionality"], [28, 2, 1, "", "Divide"], [28, 2, 1, "", "Edges"], [28, 2, 1, "", "Explode"], [28, 2, 1, "", "ExportToBIM"], [28, 2, 1, "", "ExportToBREP"], [28, 2, 1, "", "ExportToDXF"], [28, 2, 1, "", "ExportToJSON"], [28, 2, 1, "", "ExportToOBJ"], [28, 2, 1, "", "ExternalBoundary"], [28, 2, 1, "", "Faces"], [28, 2, 1, "", "Filter"], [28, 2, 1, "", "Fix"], [28, 2, 1, "", "Flatten"], [28, 2, 1, "", "Geometry"], [28, 2, 1, "", "HighestType"], [28, 2, 1, "", "Impose"], [28, 2, 1, "", "Imprint"], [28, 2, 1, "", "InternalVertex"], [28, 2, 1, "", "Intersect"], [28, 2, 1, "", "IsInstance"], [28, 2, 1, "", "IsPlanar"], [28, 2, 1, "", "IsSame"], [28, 2, 1, "", "JSONString"], [28, 2, 1, "", "Merge"], [28, 2, 1, "", "MergeAll"], [28, 2, 1, "", "NonPlanarFaces"], [28, 2, 1, "", "OBJString"], [28, 2, 1, "", "OCCTShape"], [28, 2, 1, "", "OpenEdges"], [28, 2, 1, "", "OpenFaces"], [28, 2, 1, "", "OpenVertices"], [28, 2, 1, "", "Orient"], [28, 2, 1, "", "Place"], [28, 2, 1, "", "RemoveCollinearEdges"], [28, 2, 1, "", "RemoveContent"], [28, 2, 1, "", "RemoveCoplanarFaces"], [28, 2, 1, "", "RemoveEdges"], [28, 2, 1, "", "RemoveFaces"], [28, 2, 1, "", "RemoveFacesBySelectors"], [28, 2, 1, "", "RemoveVertices"], [28, 2, 1, "", "ReplaceVertices"], [28, 2, 1, "", "Rotate"], [28, 2, 1, "", "RotateByEulerAngles"], [28, 2, 1, "", "RotateByQuaternion"], [28, 2, 1, "", "Scale"], [28, 2, 1, "", "SelectSubTopology"], [28, 2, 1, "", "SelfMerge"], [28, 2, 1, "", "SetDictionary"], [28, 2, 1, "", "SetSnapshot"], [28, 2, 1, "", "SharedEdges"], [28, 2, 1, "", "SharedFaces"], [28, 2, 1, "", "SharedTopologies"], [28, 2, 1, "", "SharedVertices"], [28, 2, 1, "", "SharedWires"], [28, 2, 1, "", "Shells"], [28, 2, 1, "", "Show"], [28, 2, 1, "", "Slice"], [28, 2, 1, "", "Snapshots"], [28, 2, 1, "", "SortBySelectors"], [28, 2, 1, "", "Spin"], [28, 2, 1, "", "SubTopologies"], [28, 2, 1, "", "SuperTopologies"], [28, 2, 1, "", "SymDif"], [28, 2, 1, "", "SymmetricDifference"], [28, 2, 1, "", "Taper"], [28, 2, 1, "", "TransferDictionaries"], [28, 2, 1, "", "TransferDictionariesBySelectors"], [28, 2, 1, "", "Transform"], [28, 2, 1, "", "Translate"], [28, 2, 1, "", "TranslateByDirectionDistance"], [28, 2, 1, "", "Triangulate"], [28, 2, 1, "", "Twist"], [28, 2, 1, "", "Type"], [28, 2, 1, "", "TypeAsString"], [28, 2, 1, "", "TypeID"], [28, 2, 1, "", "UUID"], [28, 2, 1, "", "Unflatten"], [28, 2, 1, "", "Union"], [28, 2, 1, "", "Vertices"], [28, 2, 1, "", "View3D"], [28, 2, 1, "", "Wires"], [28, 2, 1, "", "XOR"]], "topologicpy.Topology.WorkerProcess": [[28, 2, 1, "", "run"]], "topologicpy.Topology.WorkerProcessPool": [[28, 2, 1, "", "join"], [28, 2, 1, "", "startProcesses"], [28, 2, 1, "", "stopProcesses"]], "topologicpy.Vector": [[29, 1, 1, "", "Vector"]], "topologicpy.Vector.Vector": [[29, 2, 1, "", "Add"], [29, 2, 1, "", "Angle"], [29, 2, 1, "", "Average"], [29, 2, 1, "", "AzimuthAltitude"], [29, 2, 1, "", "Bisect"], [29, 2, 1, "", "ByAzimuthAltitude"], [29, 2, 1, "", "ByCoordinates"], [29, 2, 1, "", "ByVertices"], [29, 2, 1, "", "CompassAngle"], [29, 2, 1, "", "Coordinates"], [29, 2, 1, "", "Cross"], [29, 2, 1, "", "Dot"], [29, 2, 1, "", "Down"], [29, 2, 1, "", "East"], [29, 2, 1, "", "IsAntiParallel"], [29, 2, 1, "", "IsCollinear"], [29, 2, 1, "", "IsParallel"], [29, 2, 1, "", "IsSame"], [29, 2, 1, "", "Length"], [29, 2, 1, "", "Magnitude"], [29, 2, 1, "", "Multiply"], [29, 2, 1, "", "Normalize"], [29, 2, 1, "", "North"], [29, 2, 1, "", "NorthEast"], [29, 2, 1, "", "NorthWest"], [29, 2, 1, "", "Reverse"], [29, 2, 1, "", "SetMagnitude"], [29, 2, 1, "", "South"], [29, 2, 1, "", "SouthEast"], [29, 2, 1, "", "SouthWest"], [29, 2, 1, "", "Subtract"], [29, 2, 1, "", "Sum"], [29, 2, 1, "", "TransformationMatrix"], [29, 2, 1, "", "Up"], [29, 2, 1, "", "West"], [29, 2, 1, "", "XAxis"], [29, 2, 1, "", "YAxis"], [29, 2, 1, "", "ZAxis"]], "topologicpy.Vertex": [[30, 1, 1, "", "Vertex"]], "topologicpy.Vertex.Vertex": [[30, 2, 1, "", "AreCollinear"], [30, 2, 1, "", "AreIpsilateral"], [30, 2, 1, "", "AreIpsilateralCluster"], [30, 2, 1, "", "AreOnSameSide"], [30, 2, 1, "", "AreOnSameSideCluster"], [30, 2, 1, "", "ByCoordinates"], [30, 2, 1, "", "Centroid"], [30, 2, 1, "", "Clockwise2D"], [30, 2, 1, "", "Coordinates"], [30, 2, 1, "", "CounterClockwise2D"], [30, 2, 1, "", "Degree"], [30, 2, 1, "", "Distance"], [30, 2, 1, "", "EnclosingCell"], [30, 2, 1, "", "ExternalBoundary"], [30, 2, 1, "", "Fuse"], [30, 2, 1, "", "IncomingEdges"], [30, 2, 1, "", "Index"], [30, 2, 1, "", "InterpolateValue"], [30, 2, 1, "", "IsCoincident"], [30, 2, 1, "", "IsExternal"], [30, 2, 1, "", "IsInternal"], [30, 2, 1, "", "IsPeripheral"], [30, 2, 1, "", "NearestVertex"], [30, 2, 1, "", "Origin"], [30, 2, 1, "", "OutgoingEdges"], [30, 2, 1, "", "PerpendicularDistance"], [30, 2, 1, "", "PlaneEquation"], [30, 2, 1, "", "Point"], [30, 2, 1, "", "Project"], [30, 2, 1, "", "X"], [30, 2, 1, "", "Y"], [30, 2, 1, "", "Z"]], "topologicpy.Wire": [[31, 1, 1, "", "Wire"]], "topologicpy.Wire.Wire": [[31, 2, 1, "", "Arc"], [31, 2, 1, "", "ArcByEdge"], [31, 2, 1, "", "BoundingRectangle"], [31, 2, 1, "", "ByEdges"], [31, 2, 1, "", "ByEdgesCluster"], [31, 2, 1, "", "ByOffset"], [31, 2, 1, "", "ByOffsetArea"], [31, 2, 1, "", "ByVertices"], [31, 2, 1, "", "ByVerticesCluster"], [31, 2, 1, "", "Circle"], [31, 2, 1, "", "Close"], [31, 2, 1, "", "ConcaveHull"], [31, 2, 1, "", "ConvexHull"], [31, 2, 1, "", "Cycles"], [31, 2, 1, "", "Edges"], [31, 2, 1, "", "Einstein"], [31, 2, 1, "", "Ellipse"], [31, 2, 1, "", "EllipseAll"], [31, 2, 1, "", "EndVertex"], [31, 2, 1, "", "ExteriorAngles"], [31, 2, 1, "", "ExternalBoundary"], [31, 2, 1, "", "Fillet"], [31, 2, 1, "", "InteriorAngles"], [31, 2, 1, "", "Interpolate"], [31, 2, 1, "", "Invert"], [31, 2, 1, "", "IsClosed"], [31, 2, 1, "", "IsManifold"], [31, 2, 1, "", "IsSimilar"], [31, 2, 1, "", "Length"], [31, 2, 1, "", "Line"], [31, 2, 1, "", "Miter"], [31, 2, 1, "", "Normal"], [31, 2, 1, "", "OrientEdges"], [31, 2, 1, "", "Planarize"], [31, 2, 1, "", "Project"], [31, 2, 1, "", "Rectangle"], [31, 2, 1, "", "RemoveCollinearEdges"], [31, 2, 1, "", "Reverse"], [31, 2, 1, "", "Roof"], [31, 2, 1, "", "Simplify"], [31, 2, 1, "", "Skeleton"], [31, 2, 1, "", "Spiral"], [31, 2, 1, "", "Split"], [31, 2, 1, "", "Square"], [31, 2, 1, "", "Squircle"], [31, 2, 1, "", "Star"], [31, 2, 1, "", "StartEndVertices"], [31, 2, 1, "", "StartVertex"], [31, 2, 1, "", "Trapezoid"], [31, 2, 1, "", "VertexByDistance"], [31, 2, 1, "", "VertexByParameter"], [31, 2, 1, "", "VertexDistance"], [31, 2, 1, "", "Vertices"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"topologicpi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "an": 0, "ai": 0, "power": 0, "spatial": 0, "model": 0, "analysi": 0, "softwar": 0, "librari": 0, "architectur": 0, "engin": 0, "construct": 0, "introduct": 0, "instal": 0, "prerequisit": 0, "how": 0, "start": 0, "us": 0, "topolog": 0, "api": 0, "document": 0, "cite": 0, "content": [0, 2], "indic": 0, "tabl": 0, "packag": 2, "submodul": 2, "modul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "ann": 3, "apertur": 4, "bvh": 5, "cell": 6, "cellcomplex": 7, "cluster": 8, "color": 9, "context": 10, "dgl": 11, "dictionari": 12, "edg": 13, "energymodel": 14, "face": 15, "graph": 16, "grid": 17, "helper": 18, "honeybe": 19, "matrix": 20, "neo4j": 21, "plotli": 22, "polyskel": 23, "pyg": 24, "shell": 25, "speckl": 26, "sun": 27, "topologi": 28, "vector": 29, "vertex": 30, "wire": 31, "version": 32}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"topologicpy": [[0, "topologicpy"], [1, "topologicpy"]], "An AI-Powered Spatial Modelling and Analysis Software Library for Architecture, Engineering, and Construction": [[0, "an-ai-powered-spatial-modelling-and-analysis-software-library-for-architecture-engineering-and-construction"]], "Introduction": [[0, "introduction"]], "Installation": [[0, "installation"]], "Prerequisites": [[0, "prerequisites"]], "How to start using Topologic": [[0, "how-to-start-using-topologic"]], "API Documentation": [[0, "api-documentation"]], "How to cite topologicpy": [[0, "how-to-cite-topologicpy"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "topologicpy package": [[2, "topologicpy-package"]], "Submodules": [[2, "submodules"]], "Module contents": [[2, "module-topologicpy"]], "topologicpy.ANN module": [[3, "module-topologicpy.ANN"]], "topologicpy.Aperture module": [[4, "module-topologicpy.Aperture"]], "topologicpy.BVH module": [[5, "module-topologicpy.BVH"]], "topologicpy.Cell module": [[6, "module-topologicpy.Cell"]], "topologicpy.CellComplex module": [[7, "module-topologicpy.CellComplex"]], "topologicpy.Cluster module": [[8, "module-topologicpy.Cluster"]], "topologicpy.Color module": [[9, "module-topologicpy.Color"]], "topologicpy.Context module": [[10, "module-topologicpy.Context"]], "topologicpy.DGL module": [[11, "topologicpy-dgl-module"]], "topologicpy.Dictionary module": [[12, "module-topologicpy.Dictionary"]], "topologicpy.Edge module": [[13, "module-topologicpy.Edge"]], "topologicpy.EnergyModel module": [[14, "module-topologicpy.EnergyModel"]], "topologicpy.Face module": [[15, "module-topologicpy.Face"]], "topologicpy.Graph module": [[16, "module-topologicpy.Graph"]], "topologicpy.Grid module": [[17, "module-topologicpy.Grid"]], "topologicpy.Helper module": [[18, "module-topologicpy.Helper"]], "topologicpy.Honeybee module": [[19, "module-topologicpy.Honeybee"]], "topologicpy.Matrix module": [[20, "module-topologicpy.Matrix"]], "topologicpy.Neo4j module": [[21, "module-topologicpy.Neo4j"]], "topologicpy.Plotly module": [[22, "module-topologicpy.Plotly"]], "topologicpy.Polyskel module": [[23, "module-topologicpy.Polyskel"]], "topologicpy.PyG module": [[24, "module-topologicpy.PyG"]], "topologicpy.Shell module": [[25, "module-topologicpy.Shell"]], "topologicpy.Speckle module": [[26, "module-topologicpy.Speckle"]], "topologicpy.Sun module": [[27, "module-topologicpy.Sun"]], "topologicpy.Topology module": [[28, "module-topologicpy.Topology"]], "topologicpy.Vector module": [[29, "module-topologicpy.Vector"]], "topologicpy.Vertex module": [[30, "module-topologicpy.Vertex"]], "topologicpy.Wire module": [[31, "module-topologicpy.Wire"]], "topologicpy.version module": [[32, "module-topologicpy.version"]]}, "indexentries": {"module": [[2, "module-topologicpy"], [3, "module-topologicpy.ANN"], [4, "module-topologicpy.Aperture"], [5, "module-topologicpy.BVH"], [6, "module-topologicpy.Cell"], [7, "module-topologicpy.CellComplex"], [8, "module-topologicpy.Cluster"], [9, "module-topologicpy.Color"], [10, "module-topologicpy.Context"], [12, "module-topologicpy.Dictionary"], [13, "module-topologicpy.Edge"], [14, "module-topologicpy.EnergyModel"], [15, "module-topologicpy.Face"], [16, "module-topologicpy.Graph"], [17, "module-topologicpy.Grid"], [18, "module-topologicpy.Helper"], [19, "module-topologicpy.Honeybee"], [20, "module-topologicpy.Matrix"], [21, "module-topologicpy.Neo4j"], [22, "module-topologicpy.Plotly"], [23, "module-topologicpy.Polyskel"], [24, "module-topologicpy.PyG"], [25, "module-topologicpy.Shell"], [26, "module-topologicpy.Speckle"], [27, "module-topologicpy.Sun"], [28, "module-topologicpy.Topology"], [29, "module-topologicpy.Vector"], [30, "module-topologicpy.Vertex"], [31, "module-topologicpy.Wire"], [32, "module-topologicpy.version"]], "topologicpy": [[2, "module-topologicpy"]], "ann (class in topologicpy.ann)": [[3, "topologicpy.ANN.ANN"]], "datasetbycsvpath() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetByCSVPath"]], "datasetbysamplename() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetBySampleName"]], "datasetsamplenames() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetSampleNames"]], "datasetsplit() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.DatasetSplit"]], "figures() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Figures"]], "hyperparameters() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Hyperparameters"]], "hyperparametersbysamplename() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.HyperparametersBySampleName"]], "initialize() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Initialize"]], "load() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Load"]], "metrics() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Metrics"]], "modeldata() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.ModelData"]], "save() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Save"]], "test() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Test"]], "train() (topologicpy.ann.ann static method)": [[3, "topologicpy.ANN.ANN.Train"]], "topologicpy.ann": [[3, "module-topologicpy.ANN"]], "aperture (class in topologicpy.aperture)": [[4, "topologicpy.Aperture.Aperture"]], "bytopologycontext() (topologicpy.aperture.aperture static method)": [[4, "topologicpy.Aperture.Aperture.ByTopologyContext"]], "topology() (topologicpy.aperture.aperture static method)": [[4, "topologicpy.Aperture.Aperture.Topology"]], "topologicpy.aperture": [[4, "module-topologicpy.Aperture"]], "bvh (class in topologicpy.bvh)": [[5, "topologicpy.BVH.BVH"]], "bvh.aabb (class in topologicpy.bvh)": [[5, "topologicpy.BVH.BVH.AABB"]], "bvh.bvhnode (class in topologicpy.bvh)": [[5, "topologicpy.BVH.BVH.BVHNode"]], "bvh.meshobject (class in topologicpy.bvh)": [[5, "topologicpy.BVH.BVH.MeshObject"]], "bytopologies() (topologicpy.bvh.bvh static method)": [[5, "topologicpy.BVH.BVH.ByTopologies"]], "clashes() (topologicpy.bvh.bvh method)": [[5, "topologicpy.BVH.BVH.Clashes"]], "graph() (topologicpy.bvh.bvh method)": [[5, "topologicpy.BVH.BVH.Graph"]], "querybytopologies() (topologicpy.bvh.bvh static method)": [[5, "topologicpy.BVH.BVH.QueryByTopologies"]], "contains() (topologicpy.bvh.bvh.aabb method)": [[5, "topologicpy.BVH.BVH.AABB.contains"]], "intersects() (topologicpy.bvh.bvh.aabb method)": [[5, "topologicpy.BVH.BVH.AABB.intersects"]], "topologicpy.bvh": [[5, "module-topologicpy.BVH"]], "area() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Area"]], "box() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Box"]], "byfaces() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ByFaces"]], "byoffset() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ByOffset"]], "byshell() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ByShell"]], "byshells() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ByShells"]], "bythickenedface() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ByThickenedFace"]], "bythickenedshell() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ByThickenedShell"]], "bywires() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ByWires"]], "bywirescluster() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ByWiresCluster"]], "capsule() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Capsule"]], "cell (class in topologicpy.cell)": [[6, "topologicpy.Cell.Cell"]], "compactness() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Compactness"]], "cone() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Cone"]], "containmentstatus() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ContainmentStatus"]], "cylinder() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Cylinder"]], "decompose() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Decompose"]], "dodecahedron() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Dodecahedron"]], "edges() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Edges"]], "egg() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Egg"]], "externalboundary() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.ExternalBoundary"]], "faces() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Faces"]], "hyperboloid() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Hyperboloid"]], "icosahedron() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Icosahedron"]], "internalboundaries() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.InternalBoundaries"]], "internalvertex() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.InternalVertex"]], "isonboundary() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.IsOnBoundary"]], "octahedron() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Octahedron"]], "paraboloid() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Paraboloid"]], "pipe() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Pipe"]], "prism() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Prism"]], "removecollinearedges() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.RemoveCollinearEdges"]], "roof() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Roof"]], "sets() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Sets"]], "shells() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Shells"]], "sphere() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Sphere"]], "surfacearea() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.SurfaceArea"]], "tetrahedron() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Tetrahedron"]], "torus() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Torus"]], "vertices() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Vertices"]], "volume() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Volume"]], "wires() (topologicpy.cell.cell static method)": [[6, "topologicpy.Cell.Cell.Wires"]], "topologicpy.cell": [[6, "module-topologicpy.Cell"]], "box() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Box"]], "bycells() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.ByCells"]], "bycellscluster() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.ByCellsCluster"]], "byfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.ByFaces"]], "byfacescluster() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.ByFacesCluster"]], "bywires() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.ByWires"]], "bywirescluster() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.ByWiresCluster"]], "cellcomplex (class in topologicpy.cellcomplex)": [[7, "topologicpy.CellComplex.CellComplex"]], "cells() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Cells"]], "decompose() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Decompose"]], "delaunay() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Delaunay"]], "edges() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Edges"]], "externalboundary() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.ExternalBoundary"]], "externalfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.ExternalFaces"]], "faces() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Faces"]], "internalfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.InternalFaces"]], "nonmanifoldfaces() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.NonManifoldFaces"]], "octahedron() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Octahedron"]], "prism() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Prism"]], "removecollinearedges() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.RemoveCollinearEdges"]], "shells() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Shells"]], "vertices() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Vertices"]], "volume() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Volume"]], "voronoi() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Voronoi"]], "wires() (topologicpy.cellcomplex.cellcomplex static method)": [[7, "topologicpy.CellComplex.CellComplex.Wires"]], "topologicpy.cellcomplex": [[7, "module-topologicpy.CellComplex"]], "byformula() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.ByFormula"]], "bytopologies() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.ByTopologies"]], "cellcomplexes() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.CellComplexes"]], "cells() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.Cells"]], "cluster (class in topologicpy.cluster)": [[8, "topologicpy.Cluster.Cluster"]], "dbscan() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.DBSCAN"]], "edges() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.Edges"]], "faces() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.Faces"]], "freecells() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.FreeCells"]], "freeedges() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.FreeEdges"]], "freefaces() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.FreeFaces"]], "freeshells() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.FreeShells"]], "freetopologies() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.FreeTopologies"]], "freevertices() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.FreeVertices"]], "freewires() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.FreeWires"]], "highesttype() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.HighestType"]], "k_means() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.K_Means"]], "mergecells() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.MergeCells"]], "mysticrose() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.MysticRose"]], "shells() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.Shells"]], "simplify() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.Simplify"]], "vertices() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.Vertices"]], "wires() (topologicpy.cluster.cluster static method)": [[8, "topologicpy.Cluster.Cluster.Wires"]], "topologicpy.cluster": [[8, "module-topologicpy.Cluster"]], "bycssnamedcolor() (topologicpy.color.color static method)": [[9, "topologicpy.Color.Color.ByCSSNamedColor"]], "byhex() (topologicpy.color.color static method)": [[9, "topologicpy.Color.Color.ByHEX"]], "byvalueinrange() (topologicpy.color.color static method)": [[9, "topologicpy.Color.Color.ByValueInRange"]], "cssnamedcolor() (topologicpy.color.color static method)": [[9, "topologicpy.Color.Color.CSSNamedColor"]], "cssnamedcolors() (topologicpy.color.color static method)": [[9, "topologicpy.Color.Color.CSSNamedColors"]], "color (class in topologicpy.color)": [[9, "topologicpy.Color.Color"]], "plotlycolor() (topologicpy.color.color static method)": [[9, "topologicpy.Color.Color.PlotlyColor"]], "rgbtohex() (topologicpy.color.color static method)": [[9, "topologicpy.Color.Color.RGBToHex"]], "topologicpy.color": [[9, "module-topologicpy.Color"]], "bytopologyparameters() (topologicpy.context.context static method)": [[10, "topologicpy.Context.Context.ByTopologyParameters"]], "context (class in topologicpy.context)": [[10, "topologicpy.Context.Context"]], "topology() (topologicpy.context.context static method)": [[10, "topologicpy.Context.Context.Topology"]], "topologicpy.context": [[10, "module-topologicpy.Context"]], "bykeyvalue() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.ByKeyValue"]], "bykeysvalues() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.ByKeysValues"]], "bymergeddictionaries() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.ByMergedDictionaries"]], "bypythondictionary() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.ByPythonDictionary"]], "dictionary (class in topologicpy.dictionary)": [[12, "topologicpy.Dictionary.Dictionary"]], "keys() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.Keys"]], "listattributevalues() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.ListAttributeValues"]], "pythondictionary() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.PythonDictionary"]], "removekey() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.RemoveKey"]], "setvalueatkey() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.SetValueAtKey"]], "valueatkey() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.ValueAtKey"]], "values() (topologicpy.dictionary.dictionary static method)": [[12, "topologicpy.Dictionary.Dictionary.Values"]], "topologicpy.dictionary": [[12, "module-topologicpy.Dictionary"]], "angle() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Angle"]], "bisect() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Bisect"]], "byfacenormal() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.ByFaceNormal"]], "byoffset2d() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.ByOffset2D"]], "bystartvertexendvertex() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.ByStartVertexEndVertex"]], "byvertices() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.ByVertices"]], "byverticescluster() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.ByVerticesCluster"]], "connection() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Connection"]], "direction() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Direction"]], "edge (class in topologicpy.edge)": [[13, "topologicpy.Edge.Edge"]], "endvertex() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.EndVertex"]], "equation2d() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Equation2D"]], "extend() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Extend"]], "extendtoedge() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.ExtendToEdge"]], "externalboundary() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.ExternalBoundary"]], "index() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Index"]], "intersect2d() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Intersect2D"]], "iscollinear() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.IsCollinear"]], "iscoplanar() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.IsCoplanar"]], "isparallel() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.IsParallel"]], "length() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Length"]], "line() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Line"]], "normal() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Normal"]], "normaledge() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.NormalEdge"]], "normalize() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Normalize"]], "parameteratvertex() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.ParameterAtVertex"]], "reverse() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Reverse"]], "setlength() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.SetLength"]], "startvertex() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.StartVertex"]], "trim() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Trim"]], "trimbyedge() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.TrimByEdge"]], "vertexbydistance() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.VertexByDistance"]], "vertexbyparameter() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.VertexByParameter"]], "vertices() (topologicpy.edge.edge static method)": [[13, "topologicpy.Edge.Edge.Vertices"]], "topologicpy.edge": [[13, "module-topologicpy.Edge"]], "byosmpath() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.ByOSMPath"]], "bytopology() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.ByTopology"]], "columnnames() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.ColumnNames"]], "defaultconstructionsets() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.DefaultConstructionSets"]], "defaultschedulesets() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.DefaultScheduleSets"]], "energymodel (class in topologicpy.energymodel)": [[14, "topologicpy.EnergyModel.EnergyModel"]], "exporttogbxml() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.ExportToGBXML"]], "exporttoosm() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.ExportToOSM"]], "gbxmlstring() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.GBXMLString"]], "query() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.Query"]], "reportnames() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.ReportNames"]], "rownames() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.RowNames"]], "run() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.Run"]], "spacecolors() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.SpaceColors"]], "spacedictionaries() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.SpaceDictionaries"]], "spacetypenames() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.SpaceTypeNames"]], "spacetypes() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.SpaceTypes"]], "sqlfile() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.SqlFile"]], "tablenames() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.TableNames"]], "topologies() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.Topologies"]], "units() (topologicpy.energymodel.energymodel static method)": [[14, "topologicpy.EnergyModel.EnergyModel.Units"]], "topologicpy.energymodel": [[14, "module-topologicpy.EnergyModel"]], "addinternalboundaries() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.AddInternalBoundaries"]], "addinternalboundariescluster() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.AddInternalBoundariesCluster"]], "angle() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Angle"]], "area() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Area"]], "boundingrectangle() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.BoundingRectangle"]], "byedges() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByEdges"]], "byedgescluster() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByEdgesCluster"]], "byoffset() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByOffset"]], "byoffsetarea() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByOffsetArea"]], "byshell() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByShell"]], "bythickenedwire() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByThickenedWire"]], "byvertices() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByVertices"]], "byverticescluster() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByVerticesCluster"]], "bywire() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByWire"]], "bywires() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByWires"]], "bywirescluster() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ByWiresCluster"]], "circle() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Circle"]], "compactness() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Compactness"]], "compassangle() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.CompassAngle"]], "edges() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Edges"]], "einstein() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Einstein"]], "ellipse() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Ellipse"]], "exteriorangles() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ExteriorAngles"]], "externalboundary() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.ExternalBoundary"]], "face (class in topologicpy.face)": [[15, "topologicpy.Face.Face"]], "facingtoward() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.FacingToward"]], "fillet() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Fillet"]], "harmonize() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Harmonize"]], "interiorangles() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.InteriorAngles"]], "internalboundaries() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.InternalBoundaries"]], "internalvertex() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.InternalVertex"]], "invert() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Invert"]], "iscoplanar() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.IsCoplanar"]], "isovist() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Isovist"]], "medialaxis() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.MedialAxis"]], "normal() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Normal"]], "normaledge() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.NormalEdge"]], "northarrow() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.NorthArrow"]], "planarize() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Planarize"]], "planeequation() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.PlaneEquation"]], "project() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Project"]], "rectangle() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Rectangle"]], "rectanglebyplaneequation() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.RectangleByPlaneEquation"]], "removecollinearedges() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.RemoveCollinearEdges"]], "simplify() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Simplify"]], "skeleton() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Skeleton"]], "square() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Square"]], "squircle() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Squircle"]], "star() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Star"]], "trapezoid() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Trapezoid"]], "triangulate() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Triangulate"]], "trimbywire() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.TrimByWire"]], "vertexbyparameters() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.VertexByParameters"]], "vertexparameters() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.VertexParameters"]], "vertices() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Vertices"]], "wire() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Wire"]], "wires() (topologicpy.face.face static method)": [[15, "topologicpy.Face.Face.Wires"]], "topologicpy.face": [[15, "module-topologicpy.Face"]], "addedge() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.AddEdge"]], "addvertex() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.AddVertex"]], "addvertices() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.AddVertices"]], "adjacencydictionary() (topologicpy.graph.graph method)": [[16, "topologicpy.Graph.Graph.AdjacencyDictionary"]], "adjacencylist() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.AdjacencyList"]], "adjacencymatrix() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.AdjacencyMatrix"]], "adjacentvertices() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.AdjacentVertices"]], "allpaths() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.AllPaths"]], "averageclusteringcoefficient() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.AverageClusteringCoefficient"]], "botgraph() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.BOTGraph"]], "botstring() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.BOTString"]], "betweenesscentrality() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.BetweenessCentrality"]], "byadjacencymatrix() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByAdjacencyMatrix"]], "byadjacencymatrixcsvpath() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByAdjacencyMatrixCSVPath"]], "bybotgraph() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByBOTGraph"]], "bybotpath() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByBOTPath"]], "bycsvpath() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByCSVPath"]], "bydgcnnfile() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByDGCNNFile"]], "bydgcnnpath() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByDGCNNPath"]], "bydgcnnstring() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByDGCNNString"]], "byifcfile() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByIFCFile"]], "byifcpath() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByIFCPath"]], "bymeshdata() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByMeshData"]], "bytopology() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByTopology"]], "byverticesedges() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ByVerticesEdges"]], "chromaticnumber() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ChromaticNumber"]], "closenesscentrality() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ClosenessCentrality"]], "color() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Color"]], "connect() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Connect"]], "containsedge() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ContainsEdge"]], "containsvertex() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ContainsVertex"]], "contractedge() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ContractEdge"]], "degree() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Degree"]], "degreesequence() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.DegreeSequence"]], "density() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Density"]], "depth() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Depth"]], "depthmap() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.DepthMap"]], "diameter() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Diameter"]], "dictionary() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Dictionary"]], "distance() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Distance"]], "edge() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Edge"]], "edges() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Edges"]], "exporttoadjacencymatrixcsv() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ExportToAdjacencyMatrixCSV"]], "exporttobot() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ExportToBOT"]], "exporttocsv() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ExportToCSV"]], "exporttogexf() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ExportToGEXF"]], "exporttojson() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ExportToJSON"]], "flatten() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Flatten"]], "globalclusteringcoefficient() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.GlobalClusteringCoefficient"]], "graph (class in topologicpy.graph)": [[16, "topologicpy.Graph.Graph"]], "graphqueueitem (class in topologicpy.graph)": [[16, "topologicpy.Graph.GraphQueueItem"]], "guid() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Guid"]], "incomingedges() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.IncomingEdges"]], "incomingvertices() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.IncomingVertices"]], "isbipartite() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.IsBipartite"]], "iscomplete() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.IsComplete"]], "iserdoesgallai() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.IsErdoesGallai"]], "istree() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.IsTree"]], "isolatedvertices() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.IsolatedVertices"]], "jsondata() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.JSONData"]], "jsonstring() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.JSONString"]], "localclusteringcoefficient() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.LocalClusteringCoefficient"]], "longestpath() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.LongestPath"]], "maximumdelta() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.MaximumDelta"]], "maximumflow() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.MaximumFlow"]], "mergingprocess (class in topologicpy.graph)": [[16, "topologicpy.Graph.MergingProcess"]], "meshdata() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.MeshData"]], "metricdistance() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.MetricDistance"]], "minimumdelta() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.MinimumDelta"]], "minimumspanningtree() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.MinimumSpanningTree"]], "navigationgraph() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.NavigationGraph"]], "nearestvertex() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.NearestVertex"]], "networkxgraph() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.NetworkXGraph"]], "order() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Order"]], "outgoingedges() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.OutgoingEdges"]], "outgoingvertices() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.OutgoingVertices"]], "pagerank() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.PageRank"]], "path() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Path"]], "pyvisgraph() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.PyvisGraph"]], "removeedge() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.RemoveEdge"]], "removevertex() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.RemoveVertex"]], "setdictionary() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.SetDictionary"]], "shortestpath() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ShortestPath"]], "shortestpaths() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.ShortestPaths"]], "show() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Show"]], "size() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Size"]], "topologicaldistance() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.TopologicalDistance"]], "topology() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Topology"]], "tree() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Tree"]], "vertexdegree() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.VertexDegree"]], "vertices() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.Vertices"]], "visibilitygraph() (topologicpy.graph.graph static method)": [[16, "topologicpy.Graph.Graph.VisibilityGraph"]], "workerprocess (class in topologicpy.graph)": [[16, "topologicpy.Graph.WorkerProcess"]], "workerprocesspool (class in topologicpy.graph)": [[16, "topologicpy.Graph.WorkerProcessPool"]], "edges (topologicpy.graph.graphqueueitem attribute)": [[16, "topologicpy.Graph.GraphQueueItem.edges"]], "join() (topologicpy.graph.workerprocesspool method)": [[16, "topologicpy.Graph.WorkerProcessPool.join"]], "run() (topologicpy.graph.workerprocess method)": [[16, "topologicpy.Graph.WorkerProcess.run"]], "startprocesses() (topologicpy.graph.workerprocesspool method)": [[16, "topologicpy.Graph.WorkerProcessPool.startProcesses"]], "stopprocesses() (topologicpy.graph.workerprocesspool method)": [[16, "topologicpy.Graph.WorkerProcessPool.stopProcesses"]], "topologicpy.graph": [[16, "module-topologicpy.Graph"]], "wait_message() (topologicpy.graph.mergingprocess method)": [[16, "topologicpy.Graph.MergingProcess.wait_message"]], "edgesbydistances() (topologicpy.grid.grid static method)": [[17, "topologicpy.Grid.Grid.EdgesByDistances"]], "edgesbyparameters() (topologicpy.grid.grid static method)": [[17, "topologicpy.Grid.Grid.EdgesByParameters"]], "grid (class in topologicpy.grid)": [[17, "topologicpy.Grid.Grid"]], "verticesbydistances() (topologicpy.grid.grid static method)": [[17, "topologicpy.Grid.Grid.VerticesByDistances"]], "verticesbyparameters() (topologicpy.grid.grid static method)": [[17, "topologicpy.Grid.Grid.VerticesByParameters"]], "topologicpy.grid": [[17, "module-topologicpy.Grid"]], "closestmatch() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.ClosestMatch"]], "flatten() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.Flatten"]], "helper (class in topologicpy.helper)": [[18, "topologicpy.Helper.Helper"]], "iterate() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.Iterate"]], "makeunique() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.MakeUnique"]], "mergebythreshold() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.MergeByThreshold"]], "normalize() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.Normalize"]], "position() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.Position"]], "repeat() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.Repeat"]], "sort() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.Sort"]], "transpose() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.Transpose"]], "trim() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.Trim"]], "version() (topologicpy.helper.helper static method)": [[18, "topologicpy.Helper.Helper.Version"]], "topologicpy.helper": [[18, "module-topologicpy.Helper"]], "constructionsetbyidentifier() (topologicpy.honeybee.honeybee static method)": [[19, "topologicpy.Honeybee.Honeybee.ConstructionSetByIdentifier"]], "constructionsets() (topologicpy.honeybee.honeybee static method)": [[19, "topologicpy.Honeybee.Honeybee.ConstructionSets"]], "exporttohbjson() (topologicpy.honeybee.honeybee static method)": [[19, "topologicpy.Honeybee.Honeybee.ExportToHBJSON"]], "honeybee (class in topologicpy.honeybee)": [[19, "topologicpy.Honeybee.Honeybee"]], "modelbytopology() (topologicpy.honeybee.honeybee static method)": [[19, "topologicpy.Honeybee.Honeybee.ModelByTopology"]], "programtypebyidentifier() (topologicpy.honeybee.honeybee static method)": [[19, "topologicpy.Honeybee.Honeybee.ProgramTypeByIdentifier"]], "programtypes() (topologicpy.honeybee.honeybee static method)": [[19, "topologicpy.Honeybee.Honeybee.ProgramTypes"]], "string() (topologicpy.honeybee.honeybee static method)": [[19, "topologicpy.Honeybee.Honeybee.String"]], "topologicpy.honeybee": [[19, "module-topologicpy.Honeybee"]], "add() (topologicpy.matrix.matrix static method)": [[20, "topologicpy.Matrix.Matrix.Add"]], "byrotation() (topologicpy.matrix.matrix static method)": [[20, "topologicpy.Matrix.Matrix.ByRotation"]], "byscaling() (topologicpy.matrix.matrix static method)": [[20, "topologicpy.Matrix.Matrix.ByScaling"]], "bytranslation() (topologicpy.matrix.matrix static method)": [[20, "topologicpy.Matrix.Matrix.ByTranslation"]], "matrix (class in topologicpy.matrix)": [[20, "topologicpy.Matrix.Matrix"]], "multiply() (topologicpy.matrix.matrix static method)": [[20, "topologicpy.Matrix.Matrix.Multiply"]], "subtract() (topologicpy.matrix.matrix static method)": [[20, "topologicpy.Matrix.Matrix.Subtract"]], "transpose() (topologicpy.matrix.matrix static method)": [[20, "topologicpy.Matrix.Matrix.Transpose"]], "topologicpy.matrix": [[20, "module-topologicpy.Matrix"]], "bygraph() (topologicpy.neo4j.neo4j method)": [[21, "topologicpy.Neo4j.Neo4j.ByGraph"]], "byparameters() (topologicpy.neo4j.neo4j static method)": [[21, "topologicpy.Neo4j.Neo4j.ByParameters"]], "exporttograph() (topologicpy.neo4j.neo4j static method)": [[21, "topologicpy.Neo4j.Neo4j.ExportToGraph"]], "neo4j (class in topologicpy.neo4j)": [[21, "topologicpy.Neo4j.Neo4j"]], "reset() (topologicpy.neo4j.neo4j static method)": [[21, "topologicpy.Neo4j.Neo4j.Reset"]], "setgraph() (topologicpy.neo4j.neo4j static method)": [[21, "topologicpy.Neo4j.Neo4j.SetGraph"]], "topologicpy.neo4j": [[21, "module-topologicpy.Neo4j"]], "addcolorbar() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.AddColorBar"]], "colorscale() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.ColorScale"]], "colors() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.Colors"]], "databydgl() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.DataByDGL"]], "databygraph() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.DataByGraph"]], "databytopology() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.DataByTopology"]], "exporttoimage() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.ExportToImage"]], "figurebyconfusionmatrix() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureByConfusionMatrix"]], "figurebycorrelation() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureByCorrelation"]], "figurebydata() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureByData"]], "figurebydataframe() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureByDataFrame"]], "figurebyjsonfile() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureByJSONFile"]], "figurebyjsonpath() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureByJSONPath"]], "figurebymatrix() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureByMatrix"]], "figurebypiechart() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureByPieChart"]], "figurebytopology() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureByTopology"]], "figureexporttojson() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureExportToJSON"]], "figureexporttopdf() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureExportToPDF"]], "figureexporttopng() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureExportToPNG"]], "figureexporttosvg() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.FigureExportToSVG"]], "plotly (class in topologicpy.plotly)": [[22, "topologicpy.Plotly.Plotly"]], "renderer() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.Renderer"]], "renderers() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.Renderers"]], "setcamera() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.SetCamera"]], "show() (topologicpy.plotly.plotly static method)": [[22, "topologicpy.Plotly.Plotly.Show"]], "topologicpy.plotly": [[22, "module-topologicpy.Plotly"]], "debug (class in topologicpy.polyskel)": [[23, "topologicpy.Polyskel.Debug"]], "line2 (class in topologicpy.polyskel)": [[23, "topologicpy.Polyskel.Line2"]], "linesegment2 (class in topologicpy.polyskel)": [[23, "topologicpy.Polyskel.LineSegment2"]], "point2 (class in topologicpy.polyskel)": [[23, "topologicpy.Polyskel.Point2"]], "ray2 (class in topologicpy.polyskel)": [[23, "topologicpy.Polyskel.Ray2"]], "subtree (class in topologicpy.polyskel)": [[23, "topologicpy.Polyskel.Subtree"]], "cross() (topologicpy.polyskel.point2 method)": [[23, "topologicpy.Polyskel.Point2.cross"]], "distance() (topologicpy.polyskel.line2 method)": [[23, "topologicpy.Polyskel.Line2.distance"]], "distance() (topologicpy.polyskel.point2 method)": [[23, "topologicpy.Polyskel.Point2.distance"]], "dot() (topologicpy.polyskel.point2 method)": [[23, "topologicpy.Polyskel.Point2.dot"]], "height (topologicpy.polyskel.subtree attribute)": [[23, "topologicpy.Polyskel.Subtree.height"]], "intersect() (topologicpy.polyskel.line2 method)": [[23, "topologicpy.Polyskel.Line2.intersect"]], "intersect() (topologicpy.polyskel.linesegment2 method)": [[23, "topologicpy.Polyskel.LineSegment2.intersect"]], "intersect() (topologicpy.polyskel.ray2 method)": [[23, "topologicpy.Polyskel.Ray2.intersect"]], "line() (topologicpy.polyskel.debug method)": [[23, "topologicpy.Polyskel.Debug.line"]], "normalized() (topologicpy.polyskel.point2 method)": [[23, "topologicpy.Polyskel.Point2.normalized"]], "rectangle() (topologicpy.polyskel.debug method)": [[23, "topologicpy.Polyskel.Debug.rectangle"]], "set_debug() (in module topologicpy.polyskel)": [[23, "topologicpy.Polyskel.set_debug"]], "show() (topologicpy.polyskel.debug method)": [[23, "topologicpy.Polyskel.Debug.show"]], "sinks (topologicpy.polyskel.subtree attribute)": [[23, "topologicpy.Polyskel.Subtree.sinks"]], "skeletonize() (in module topologicpy.polyskel)": [[23, "topologicpy.Polyskel.skeletonize"]], "source (topologicpy.polyskel.subtree attribute)": [[23, "topologicpy.Polyskel.Subtree.source"]], "topologicpy.polyskel": [[23, "module-topologicpy.Polyskel"]], "accuracy() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.Accuracy"]], "confusionmatrix() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.ConfusionMatrix"]], "customgraphdataset (class in topologicpy.pyg)": [[24, "topologicpy.PyG.CustomGraphDataset"]], "datasetbycsvpath() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.DatasetByCSVPath"]], "datasetgraphlabels() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.DatasetGraphLabels"]], "datasetsplit() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.DatasetSplit"]], "hyperparameters() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.Hyperparameters"]], "mse() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.MSE"]], "model() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.Model"]], "modelclassify() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.ModelClassify"]], "modeldata() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.ModelData"]], "modelload() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.ModelLoad"]], "modelpredict() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.ModelPredict"]], "modelsave() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.ModelSave"]], "modeltest() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.ModelTest"]], "modeltrain() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.ModelTrain"]], "optimizer() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.Optimizer"]], "performance() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.Performance"]], "pyg (class in topologicpy.pyg)": [[24, "topologicpy.PyG.PyG"]], "show() (topologicpy.pyg.pyg static method)": [[24, "topologicpy.PyG.PyG.Show"]], "process_all() (topologicpy.pyg.customgraphdataset method)": [[24, "topologicpy.PyG.CustomGraphDataset.process_all"]], "topologicpy.pyg": [[24, "module-topologicpy.PyG"]], "bydisjointfaces() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.ByDisjointFaces"]], "byfaces() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.ByFaces"]], "byfacescluster() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.ByFacesCluster"]], "bythickenedwire() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.ByThickenedWire"]], "bywires() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.ByWires"]], "bywirescluster() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.ByWiresCluster"]], "circle() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Circle"]], "delaunay() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Delaunay"]], "edges() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Edges"]], "externalboundary() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.ExternalBoundary"]], "faces() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Faces"]], "hyperbolicparaboloidcirculardomain() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.HyperbolicParaboloidCircularDomain"]], "hyperbolicparaboloidrectangulardomain() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.HyperbolicParaboloidRectangularDomain"]], "internalboundaries() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.InternalBoundaries"]], "isclosed() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.IsClosed"]], "isonboundary() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.IsOnBoundary"]], "paraboloid() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Paraboloid"]], "pie() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Pie"]], "planarize() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Planarize"]], "rectangle() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Rectangle"]], "removecollinearedges() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.RemoveCollinearEdges"]], "roof() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Roof"]], "selfmerge() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.SelfMerge"]], "shell (class in topologicpy.shell)": [[25, "topologicpy.Shell.Shell"]], "simplify() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Simplify"]], "skeleton() (topologicpy.shell.shell method)": [[25, "topologicpy.Shell.Shell.Skeleton"]], "vertices() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Vertices"]], "voronoi() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Voronoi"]], "wires() (topologicpy.shell.shell static method)": [[25, "topologicpy.Shell.Shell.Wires"]], "topologicpy.shell": [[25, "module-topologicpy.Shell"]], "branchesbystream() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.BranchesByStream"]], "clientbyurl() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.ClientByURL"]], "commitbyid() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.CommitByID"]], "commitsbybranch() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.CommitsByBranch"]], "object() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.Object"]], "send() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.Send"]], "speckle (class in topologicpy.speckle)": [[26, "topologicpy.Speckle.Speckle"]], "specklebranchbyid() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.SpeckleBranchByID"]], "specklecommitbyurl() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.SpeckleCommitByURL"]], "specklecommitdelete() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.SpeckleCommitDelete"]], "speckleglobalsbystream() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.SpeckleGlobalsByStream"]], "specklesendobjects() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.SpeckleSendObjects"]], "specklestreambyid() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.SpeckleStreamByID"]], "specklestreambyurl() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.SpeckleStreamByURL"]], "streamsbyclient() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.StreamsByClient"]], "mesh_to_speckle() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.mesh_to_speckle"]], "mesh_to_speckle_mesh() (topologicpy.speckle.speckle static method)": [[26, "topologicpy.Speckle.Speckle.mesh_to_speckle_mesh"]], "topologicpy.speckle": [[26, "module-topologicpy.Speckle"]], "altitude() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.Altitude"]], "autumnequinox() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.AutumnEquinox"]], "azimuth() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.Azimuth"]], "diagram() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.Diagram"]], "edge() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.Edge"]], "pathbydate() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.PathByDate"]], "pathbyhour() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.PathByHour"]], "position() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.Position"]], "springequinox() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.SpringEquinox"]], "summersolstice() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.SummerSolstice"]], "sun (class in topologicpy.sun)": [[27, "topologicpy.Sun.Sun"]], "sunrise() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.Sunrise"]], "sunset() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.Sunset"]], "vector() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.Vector"]], "vertex() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.Vertex"]], "verticesbydate() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.VerticesByDate"]], "verticesbyhour() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.VerticesByHour"]], "wintersolstice() (topologicpy.sun.sun static method)": [[27, "topologicpy.Sun.Sun.WinterSolstice"]], "topologicpy.sun": [[27, "module-topologicpy.Sun"]], "addapertures() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.AddApertures"]], "addapertures_old() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.AddApertures_old"]], "addcontent() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.AddContent"]], "adddictionary() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.AddDictionary"]], "adjacenttopologies() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.AdjacentTopologies"]], "analyze() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Analyze"]], "aperturetopologies() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ApertureTopologies"]], "apertures() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Apertures"]], "brepstring() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.BREPString"]], "boolean() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Boolean"]], "boundingbox() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.BoundingBox"]], "bybimfile() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByBIMFile"]], "bybimpath() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByBIMPath"]], "bybimstring() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByBIMString"]], "bybrepfile() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByBREPFile"]], "bybreppath() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByBREPPath"]], "bybrepstring() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByBREPString"]], "bydxffile() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByDXFFile"]], "bydxfpath() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByDXFPath"]], "bygeometry() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByGeometry"]], "bygeometry_old() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByGeometry_old"]], "byifcfile() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByIFCFile"]], "byifcpath() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByIFCPath"]], "byjsondictionary() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByJSONDictionary"]], "byjsonfile() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByJSONFile"]], "byjsonpath() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByJSONPath"]], "byjsonstring() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByJSONString"]], "byobjfile() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByOBJFile"]], "byobjpath() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByOBJPath"]], "byobjstring() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByOBJString"]], "byocctshape() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByOCCTShape"]], "byxyzfile() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByXYZFile"]], "byxyzpath() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ByXYZPath"]], "cellcomplexes() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.CellComplexes"]], "cells() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Cells"]], "centerofmass() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.CenterOfMass"]], "centroid() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Centroid"]], "cleanup() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Cleanup"]], "clusterfaces() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ClusterFaces"]], "clusterfaces_orig() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ClusterFaces_orig"]], "clusters() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Clusters"]], "contents() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Contents"]], "contexts() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Contexts"]], "convexhull() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ConvexHull"]], "copy() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Copy"]], "degree() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Degree"]], "dictionary() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Dictionary"]], "difference() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Difference"]], "dimensionality() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Dimensionality"]], "divide() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Divide"]], "edges() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Edges"]], "explode() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Explode"]], "exporttobim() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ExportToBIM"]], "exporttobrep() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ExportToBREP"]], "exporttodxf() (topologicpy.topology.topology method)": [[28, "topologicpy.Topology.Topology.ExportToDXF"]], "exporttojson() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ExportToJSON"]], "exporttoobj() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ExportToOBJ"]], "externalboundary() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ExternalBoundary"]], "faces() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Faces"]], "filter() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Filter"]], "fix() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Fix"]], "flatten() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Flatten"]], "geometry() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Geometry"]], "highesttype() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.HighestType"]], "id (topologicpy.topology.queueitem attribute)": [[28, "topologicpy.Topology.QueueItem.ID"]], "id (topologicpy.topology.sinkitem attribute)": [[28, "topologicpy.Topology.SinkItem.ID"]], "impose() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Impose"]], "imprint() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Imprint"]], "internalvertex() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.InternalVertex"]], "intersect() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Intersect"]], "isinstance() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.IsInstance"]], "isplanar() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.IsPlanar"]], "issame() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.IsSame"]], "jsonstring() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.JSONString"]], "merge() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Merge"]], "mergeall() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.MergeAll"]], "mergingprocess (class in topologicpy.topology)": [[28, "topologicpy.Topology.MergingProcess"]], "nonplanarfaces() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.NonPlanarFaces"]], "objstring() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.OBJString"]], "occtshape() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.OCCTShape"]], "openedges() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.OpenEdges"]], "openfaces() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.OpenFaces"]], "openvertices() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.OpenVertices"]], "orient() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Orient"]], "place() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Place"]], "queueitem (class in topologicpy.topology)": [[28, "topologicpy.Topology.QueueItem"]], "removecollinearedges() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.RemoveCollinearEdges"]], "removecontent() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.RemoveContent"]], "removecoplanarfaces() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.RemoveCoplanarFaces"]], "removeedges() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.RemoveEdges"]], "removefaces() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.RemoveFaces"]], "removefacesbyselectors() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.RemoveFacesBySelectors"]], "removevertices() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.RemoveVertices"]], "replacevertices() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.ReplaceVertices"]], "rotate() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Rotate"]], "rotatebyeulerangles() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.RotateByEulerAngles"]], "rotatebyquaternion() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.RotateByQuaternion"]], "scale() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Scale"]], "selectsubtopology() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SelectSubTopology"]], "selfmerge() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SelfMerge"]], "setdictionary() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SetDictionary"]], "setsnapshot() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SetSnapshot"]], "sharededges() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SharedEdges"]], "sharedfaces() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SharedFaces"]], "sharedtopologies() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SharedTopologies"]], "sharedvertices() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SharedVertices"]], "sharedwires() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SharedWires"]], "shells() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Shells"]], "show() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Show"]], "sinkitem (class in topologicpy.topology)": [[28, "topologicpy.Topology.SinkItem"]], "slice() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Slice"]], "snapshots() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Snapshots"]], "sortbyselectors() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SortBySelectors"]], "spin() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Spin"]], "subtopologies() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SubTopologies"]], "supertopologies() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SuperTopologies"]], "symdif() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SymDif"]], "symmetricdifference() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.SymmetricDifference"]], "taper() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Taper"]], "topology (class in topologicpy.topology)": [[28, "topologicpy.Topology.Topology"]], "transferdictionaries() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.TransferDictionaries"]], "transferdictionariesbyselectors() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.TransferDictionariesBySelectors"]], "transform() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Transform"]], "translate() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Translate"]], "translatebydirectiondistance() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.TranslateByDirectionDistance"]], "triangulate() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Triangulate"]], "twist() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Twist"]], "type() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Type"]], "typeasstring() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.TypeAsString"]], "typeid() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.TypeID"]], "uuid() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.UUID"]], "unflatten() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Unflatten"]], "union() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Union"]], "vertices() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Vertices"]], "view3d() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.View3D"]], "wires() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.Wires"]], "workerprocess (class in topologicpy.topology)": [[28, "topologicpy.Topology.WorkerProcess"]], "workerprocesspool (class in topologicpy.topology)": [[28, "topologicpy.Topology.WorkerProcessPool"]], "xor() (topologicpy.topology.topology static method)": [[28, "topologicpy.Topology.Topology.XOR"]], "join() (topologicpy.topology.workerprocesspool method)": [[28, "topologicpy.Topology.WorkerProcessPool.join"]], "run() (topologicpy.topology.workerprocess method)": [[28, "topologicpy.Topology.WorkerProcess.run"]], "sinkkeys (topologicpy.topology.queueitem attribute)": [[28, "topologicpy.Topology.QueueItem.sinkKeys"]], "sinkvalues (topologicpy.topology.queueitem attribute)": [[28, "topologicpy.Topology.QueueItem.sinkValues"]], "sink_str (topologicpy.topology.sinkitem attribute)": [[28, "topologicpy.Topology.SinkItem.sink_str"]], "startprocesses() (topologicpy.topology.workerprocesspool method)": [[28, "topologicpy.Topology.WorkerProcessPool.startProcesses"]], "stopprocesses() (topologicpy.topology.workerprocesspool method)": [[28, "topologicpy.Topology.WorkerProcessPool.stopProcesses"]], "topologicpy.topology": [[28, "module-topologicpy.Topology"]], "wait_message() (topologicpy.topology.mergingprocess method)": [[28, "topologicpy.Topology.MergingProcess.wait_message"]], "add() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Add"]], "angle() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Angle"]], "average() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Average"]], "azimuthaltitude() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.AzimuthAltitude"]], "bisect() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Bisect"]], "byazimuthaltitude() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.ByAzimuthAltitude"]], "bycoordinates() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.ByCoordinates"]], "byvertices() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.ByVertices"]], "compassangle() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.CompassAngle"]], "coordinates() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Coordinates"]], "cross() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Cross"]], "dot() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Dot"]], "down() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Down"]], "east() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.East"]], "isantiparallel() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.IsAntiParallel"]], "iscollinear() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.IsCollinear"]], "isparallel() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.IsParallel"]], "issame() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.IsSame"]], "length() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Length"]], "magnitude() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Magnitude"]], "multiply() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Multiply"]], "normalize() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Normalize"]], "north() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.North"]], "northeast() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.NorthEast"]], "northwest() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.NorthWest"]], "reverse() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Reverse"]], "setmagnitude() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.SetMagnitude"]], "south() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.South"]], "southeast() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.SouthEast"]], "southwest() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.SouthWest"]], "subtract() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Subtract"]], "sum() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Sum"]], "transformationmatrix() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.TransformationMatrix"]], "up() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.Up"]], "vector (class in topologicpy.vector)": [[29, "topologicpy.Vector.Vector"]], "west() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.West"]], "xaxis() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.XAxis"]], "yaxis() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.YAxis"]], "zaxis() (topologicpy.vector.vector static method)": [[29, "topologicpy.Vector.Vector.ZAxis"]], "topologicpy.vector": [[29, "module-topologicpy.Vector"]], "arecollinear() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.AreCollinear"]], "areipsilateral() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.AreIpsilateral"]], "areipsilateralcluster() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.AreIpsilateralCluster"]], "areonsameside() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.AreOnSameSide"]], "areonsamesidecluster() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.AreOnSameSideCluster"]], "bycoordinates() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.ByCoordinates"]], "centroid() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Centroid"]], "clockwise2d() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Clockwise2D"]], "coordinates() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Coordinates"]], "counterclockwise2d() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.CounterClockwise2D"]], "degree() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Degree"]], "distance() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Distance"]], "enclosingcell() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.EnclosingCell"]], "externalboundary() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.ExternalBoundary"]], "fuse() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Fuse"]], "incomingedges() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.IncomingEdges"]], "index() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Index"]], "interpolatevalue() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.InterpolateValue"]], "iscoincident() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.IsCoincident"]], "isexternal() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.IsExternal"]], "isinternal() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.IsInternal"]], "isperipheral() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.IsPeripheral"]], "nearestvertex() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.NearestVertex"]], "origin() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Origin"]], "outgoingedges() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.OutgoingEdges"]], "perpendiculardistance() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.PerpendicularDistance"]], "planeequation() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.PlaneEquation"]], "point() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Point"]], "project() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Project"]], "vertex (class in topologicpy.vertex)": [[30, "topologicpy.Vertex.Vertex"]], "x() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.X"]], "y() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Y"]], "z() (topologicpy.vertex.vertex static method)": [[30, "topologicpy.Vertex.Vertex.Z"]], "topologicpy.vertex": [[30, "module-topologicpy.Vertex"]], "arc() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Arc"]], "arcbyedge() (topologicpy.wire.wire method)": [[31, "topologicpy.Wire.Wire.ArcByEdge"]], "boundingrectangle() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.BoundingRectangle"]], "byedges() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ByEdges"]], "byedgescluster() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ByEdgesCluster"]], "byoffset() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ByOffset"]], "byoffsetarea() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ByOffsetArea"]], "byvertices() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ByVertices"]], "byverticescluster() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ByVerticesCluster"]], "circle() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Circle"]], "close() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Close"]], "concavehull() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ConcaveHull"]], "convexhull() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ConvexHull"]], "cycles() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Cycles"]], "edges() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Edges"]], "einstein() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Einstein"]], "ellipse() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Ellipse"]], "ellipseall() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.EllipseAll"]], "endvertex() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.EndVertex"]], "exteriorangles() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ExteriorAngles"]], "externalboundary() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.ExternalBoundary"]], "fillet() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Fillet"]], "interiorangles() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.InteriorAngles"]], "interpolate() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Interpolate"]], "invert() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Invert"]], "isclosed() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.IsClosed"]], "ismanifold() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.IsManifold"]], "issimilar() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.IsSimilar"]], "length() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Length"]], "line() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Line"]], "miter() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Miter"]], "normal() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Normal"]], "orientedges() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.OrientEdges"]], "planarize() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Planarize"]], "project() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Project"]], "rectangle() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Rectangle"]], "removecollinearedges() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.RemoveCollinearEdges"]], "reverse() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Reverse"]], "roof() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Roof"]], "simplify() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Simplify"]], "skeleton() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Skeleton"]], "spiral() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Spiral"]], "split() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Split"]], "square() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Square"]], "squircle() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Squircle"]], "star() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Star"]], "startendvertices() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.StartEndVertices"]], "startvertex() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.StartVertex"]], "trapezoid() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Trapezoid"]], "vertexbydistance() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.VertexByDistance"]], "vertexbyparameter() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.VertexByParameter"]], "vertexdistance() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.VertexDistance"]], "vertices() (topologicpy.wire.wire static method)": [[31, "topologicpy.Wire.Wire.Vertices"]], "wire (class in topologicpy.wire)": [[31, "topologicpy.Wire.Wire"]], "topologicpy.wire": [[31, "module-topologicpy.Wire"]], "topologicpy.version": [[32, "module-topologicpy.version"]]}})